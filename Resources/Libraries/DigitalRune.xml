<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>DigitalRune</name>
  </assembly>
  <members>
    <member name="T:DigitalRune.EnumHelper">
      <summary>
            Auxiliary methods for enumerations.
            </summary>
    </member>
    <member name="M:DigitalRune.EnumHelper.GetValues(System.Type)">
      <summary>
            Retrieves an array of the values of the constants in a specified enumeration.
            </summary>
      <param name="enumType">An enumeration type.</param>
      <returns>
            An array of the enumeration values in <paramref name="enumType" />. 
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.
            </exception>
    </member>
    <member name="M:DigitalRune.EnumHelper.TryParse``1(System.String,System.Boolean,``0@)">
      <summary>
            Converts the string representation of the name or numeric value of one or more enumerated 
            constants to an equivalent enumerated object.
            </summary>
      <param name="s">The string representation of the name or numeric value.</param>
      <param name="ignoreCase">
            If set to <see langword="true" /> ignore case; otherwise, regard case.
            </param>
      <param name="value">The converted enumeration value.</param>
      <typeparam name="T">The type of enumeration.</typeparam>
      <returns>
        <see langword="true" /> if the string was converted successfully; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="T:DigitalRune.INamedObject">
      <summary>
            Represents an objects with a (unique) name.
            </summary>
    </member>
    <member name="P:DigitalRune.INamedObject.Name">
      <summary>
            Gets the name.
            </summary>
    </member>
    <member name="T:DigitalRune.IRecyclable">
      <summary>
            Represents an object that supports resource pooling and can be recycled.
            </summary>
    </member>
    <member name="M:DigitalRune.IRecyclable.Recycle">
      <summary>
            Recycles this instance.
            </summary>
    </member>
    <member name="T:DigitalRune.Licensing">
      <summary>
            Manages copy protection and licensing.
            </summary>
    </member>
    <member name="M:DigitalRune.Licensing.AddSerialNumber(System.String)">
      <summary>
            Adds the specified serial number.
            </summary>
      <param name="serialNumber">A serial number (license key) for a DigitalRune product.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serialNumber" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.ObjectHelper">
      <summary>
            Provides extension methods applicable to all objects.
            </summary>
    </member>
    <member name="M:DigitalRune.ObjectHelper.CanParse(System.Type)">
      <summary>
            Determines the <see cref="T:DigitalRune.ObjectHelper" /><strong>Parse</strong> methods can parse the 
            given type.
            </summary>
      <param name="type">The type.</param>
      <returns>
        <see langword="true" /> if the type can be parsed; otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.ObjectHelper.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
      <summary>
            Retrieves the name of a property identified by a lambda expression.
            </summary>
      <param name="expression">A lambda expression selecting the property.</param>
      <typeparam name="T">The type of the property.</typeparam>
      <returns>The name of the property accessed by <paramref name="expression" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" /> does not represent an expression accessing a property.
            </exception>
    </member>
    <member name="M:DigitalRune.ObjectHelper.GetPropertyName``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
            Retrieves the name of a given object's property identified by a lambda expression.
            </summary>
      <param name="this">The object containing the property.</param>
      <param name="expression">
            A lambda expression selecting the property from the containing object.
            </param>
      <typeparam name="TObject">The type of object containing the property.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <returns>The name of the property accessed by <paramref name="expression" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" /> does not represent an expression accessing a property.
            </exception>
    </member>
    <member name="M:DigitalRune.ObjectHelper.GetTypeConverter(System.Type)">
      <summary>
            Gets the type converter for the given type.
            </summary>
      <param name="type">The type.</param>
      <returns>
            A new type converter instance for the given type; or <see langword="null" /> if no type
            converter was found.
            </returns>
    </member>
    <member name="M:DigitalRune.ObjectHelper.Parse``1(System.String)">
      <summary>
            Parses the specified value (using the invariant culture).
            </summary>
      <param name="value">The value.</param>
      <typeparam name="T">The target type.</typeparam>
      <returns>The parsed value.</returns>
      <exception cref="T:System.NotSupportedException">
            Cannot convert string to target type.
            </exception>
    </member>
    <member name="M:DigitalRune.ObjectHelper.Parse(System.Type,System.String)">
      <summary>
            Parses a string and converts it to the specified type (using the invariant culture).
            </summary>
      <param name="type">The target type.</param>
      <param name="value">The value.</param>
      <returns>An instance of the given type that represents the string value.</returns>
      <exception cref="T:System.NotSupportedException">
            Cannot convert string to target type.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.ReferenceEqualityComparer`1">
      <summary>
            Compares objects for equality by checking whether the specified <see cref="T:System.Object" /> instances 
            are the same instance.
            </summary>
      <typeparam name="T">The type of the objects to compare.</typeparam>
    </member>
    <member name="M:DigitalRune.ReferenceEqualityComparer`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.ReferenceEqualityComparer`1" /> class</summary>
    </member>
    <member name="P:DigitalRune.ReferenceEqualityComparer`1.Default">
      <summary>
            Gets a default <see cref="T:DigitalRune.ReferenceEqualityComparer`1" /> for the type specified by the 
            generic argument. 
            </summary>
    </member>
    <member name="M:DigitalRune.ReferenceEqualityComparer`1.Equals(`0,`0)">
      <summary>
            Determines whether the specified objects are equal.
            </summary>
      <param name="x">
            The first object of type <typeparamref name="T" /> to compare.
            </param>
      <param name="y">
            The second object of type <typeparamref name="T" /> to compare.
            </param>
      <returns>
        <see langword="true" /> if the specified objects are equal; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.ReferenceEqualityComparer`1.GetHashCode(`0)">
      <summary>
            Returns a hash code for the specified object.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <returns>A hash code for the specified object.</returns>
      <exception cref="T:System.ArgumentNullException">
            The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is 
            <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.ResourcePool">
      <summary>
            Manages a pool of reusable items (base implementation).
            </summary>
    </member>
    <member name="M:DigitalRune.ResourcePool.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.ResourcePool" /> class</summary>
    </member>
    <member name="M:DigitalRune.ResourcePool.Clear">
      <summary>
            Removes all items from the resource pool.
            </summary>
    </member>
    <member name="M:DigitalRune.ResourcePool.ClearAll">
      <summary>
            Clears all resource pools.
            </summary>
    </member>
    <member name="P:DigitalRune.ResourcePool.Enabled">
      <summary>
            Gets or sets a value indicating whether resource pooling is enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.ResourcePool.Pools">
      <summary>
            Gets collection of all active <see cref="T:DigitalRune.ResourcePool" />s.
            </summary>
    </member>
    <member name="T:DigitalRune.ResourcePool`1">
      <summary>
            Manages a pool of typed, reusable items.
            </summary>
      <typeparam name="T">The type of the items.</typeparam>
    </member>
    <member name="M:DigitalRune.ResourcePool`1.#ctor(System.Func{`0},System.Action{`0},System.Action{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.ResourcePool`1" /> class with the given
            un-/initialize methods.
            </summary>
      <param name="create">
            The function that creates a new item of type <typeparamref name="T" />.
            </param>
      <param name="initialize">
            The method that is executed on an item when it is obtained from the pool - can be
            <see langword="null" />.
            </param>
      <param name="uninitialize">
            The method that is executed on an item when it is recycled - can be <see langword="null" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="create" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.ResourcePool`1.Clear">
      <summary>
            Removes all items from the resource pool.
            </summary>
    </member>
    <member name="M:DigitalRune.ResourcePool`1.Obtain">
      <summary>
            Obtains a new item by reusing an instance from the pool or by creating a new instance if 
            necessary.
            </summary>
      <returns>The item.</returns>
    </member>
    <member name="M:DigitalRune.ResourcePool`1.Recycle(`0)">
      <summary>
            Recycles the given item and places it back in the pool for future reuse.
            </summary>
      <param name="item">The item to be recycled.</param>
    </member>
    <member name="T:DigitalRune.ResourcePools`1">
      <summary>
            Provides resource pools for reusable generic collections.
            </summary>
      <typeparam name="T">The type of the elements in the collection.</typeparam>
    </member>
    <member name="F:DigitalRune.ResourcePools`1.HashSets">
      <summary>
            A resource pool containing collections of type <see cref="T:System.Collections.Generic.HashSet`1" />.
            </summary>
    </member>
    <member name="F:DigitalRune.ResourcePools`1.Lists">
      <summary>
            A resource pool containing collections of type <see cref="T:System.Collections.Generic.List`1" />.
            </summary>
    </member>
    <member name="F:DigitalRune.ResourcePools`1.Stacks">
      <summary>
            A resource pool containing collections of type <see cref="T:System.Collections.Generic.Stack`1" />.
            </summary>
    </member>
    <member name="T:DigitalRune.ServiceManager">
      <summary>
            Provides an <see cref="T:System.IServiceProvider" /> for global services. <i>(Obsolete)</i></summary>
    </member>
    <member name="M:DigitalRune.ServiceManager.GetGlobalService``1">
      <summary>
            Gets a service from the global service provider. If the global service provider does not 
            exist (<see cref="P:DigitalRune.ServiceManager.GlobalServices" /> is <see langword="null" />)
            or does not contain the service an <see cref="T:DigitalRune.ServiceNotFoundException" /> is thrown.
            </summary>
      <typeparam name="T">The service type.</typeparam>
      <returns>The service.</returns>
      <exception cref="T:DigitalRune.ServiceNotFoundException">
            The provider does not contain a service of type <typeparamref name="T" />.
            </exception>
    </member>
    <member name="M:DigitalRune.ServiceManager.GetService``1(System.IServiceProvider)">
      <summary>
            Gets a service from a service provider. If the provider does not contain 
            the service an <see cref="T:DigitalRune.ServiceNotFoundException" /> is thrown.
            </summary>
      <param name="serviceProvider">The service provider.</param>
      <typeparam name="T">The service type.</typeparam>
      <returns>The service.</returns>
      <exception cref="T:DigitalRune.ServiceNotFoundException">
            The provider does not contain a service of type <typeparamref name="T" />.
            </exception>
    </member>
    <member name="P:DigitalRune.ServiceManager.GlobalServices">
      <summary>
            Gets or sets the global services.
            </summary>
    </member>
    <member name="M:DigitalRune.ServiceManager.TryGetService``1(System.IServiceProvider,``0@)">
      <summary>
            Tries to get a service from a service provider.
            </summary>
      <param name="serviceProvider">The service provider.</param>
      <param name="service">
            The requested service, or <see langword="null" /> if the service is not available.
            </param>
      <typeparam name="T">The service type.</typeparam>
      <returns>
        <see langword="true" /> if the service is available; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="T:DigitalRune.ServiceNotFoundException">
      <summary>
            Exception that is thrown when a service is not found in the <see cref="T:System.IServiceProvider" />.
            </summary>
    </member>
    <member name="M:DigitalRune.ServiceNotFoundException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.ServiceNotFoundException" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.ServiceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.ServiceNotFoundException" /> class.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The serialization context.</param>
    </member>
    <member name="M:DigitalRune.ServiceNotFoundException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.ServiceNotFoundException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:DigitalRune.ServiceNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.ServiceNotFoundException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner exception.</param>
    </member>
    <member name="M:DigitalRune.ServiceNotFoundException.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.ServiceNotFoundException" /> class.
            </summary>
      <param name="serviceType">Type of the service.</param>
    </member>
    <member name="T:DigitalRune.ServiceProvider">
      <summary>
            Manages a collection of services. <i>(Obsolete)</i></summary>
    </member>
    <member name="M:DigitalRune.ServiceProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.ServiceProvider" /> class</summary>
    </member>
    <member name="M:DigitalRune.ServiceProvider.AddService(System.Type,System.Object)">
      <summary>
            Adds a service to the service container.
            </summary>
      <param name="type">The type of service to add.</param>
      <param name="service">The service to add.</param>
      <exception cref="T:System.ArgumentNullException">
            Either <paramref name="type" /> or <paramref name="service" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The service container already contains a service of this type. Or, the 
            <paramref name="service" /> is not a class (or subclass) of <paramref name="type" />.
            </exception>
    </member>
    <member name="M:DigitalRune.ServiceProvider.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="serviceType">
            An object that specifies the type of service object to get.
            </param>
      <returns>
            A service object of type <paramref name="serviceType" />; or <see langword="null" /> if there 
            is no service object of that type.
            </returns>
    </member>
    <member name="M:DigitalRune.ServiceProvider.RemoveService(System.Type)">
      <summary>
            Removes a service from the service container.
            </summary>
      <param name="type">The type of the service to remove.</param>
      <returns>
        <see langword="true" /> if the service is successfully found and removed; otherwise, 
            <see langword="false" />. This method returns <see langword="false" /> if service of 
            <paramref name="type" /> is not found in the <see cref="T:DigitalRune.ServiceProvider" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.ServiceProvider.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the service provider returning all registered
            service objects.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the service 
            provider.
            </returns>
    </member>
    <member name="T:DigitalRune.Singleton`1">
      <summary>
            Base class for types to restrict instantiation to one object ("singleton pattern").
            </summary>
      <typeparam name="T">The type of the object that is instantiated.</typeparam>
    </member>
    <member name="M:DigitalRune.Singleton`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Singleton`1" /> class.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            Constructor is called several times, but <see cref="T:DigitalRune.Singleton`1" /> can only be instantiated 
            once.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The class which derives from <see cref="T:DigitalRune.Singleton`1" /> is not of type 
            <typeparamref name="T" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Singleton`1.Instance">
      <summary>
            Gets the singleton of type <typeparamref name="T" />.
            </summary>
    </member>
    <member name="T:DigitalRune.WeakDelegate">
      <summary>
            Represents a <see cref="P:DigitalRune.WeakDelegate.Delegate" /> that stores the target object as a weak reference.
            </summary>
    </member>
    <member name="M:DigitalRune.WeakDelegate.#ctor(System.Delegate)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.WeakDelegate" /> class.
            </summary>
      <param name="delegate">
            The original <see cref="T:System.Delegate" /> to create a weak reference for.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegate" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.WeakDelegate.Delegate">
      <summary>
            Gets the <see cref="T:System.Delegate" /> stored by the current <see cref="T:DigitalRune.WeakDelegate" /> 
            object.
            </summary>
    </member>
    <member name="P:DigitalRune.WeakDelegate.DelegateType">
      <summary>
            Gets the type of delegate.
            </summary>
    </member>
    <member name="M:DigitalRune.WeakDelegate.Invoke(System.Object[])">
      <summary>
            Invokes the stored <see cref="T:System.Delegate" /> with the given arguments.
            </summary>
      <param name="args">The arguments.</param>
    </member>
    <member name="P:DigitalRune.WeakDelegate.IsAlive">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Delegate" /> referenced by this 
            <see cref="T:DigitalRune.WeakDelegate" /> has been garbage collected.
            </summary>
    </member>
    <member name="P:DigitalRune.WeakDelegate.MethodInfo">
      <summary>
            Gets the metadata of the delegate method.
            </summary>
    </member>
    <member name="P:DigitalRune.WeakDelegate.TargetReference">
      <summary>
            Gets the weak reference of the target object.
            </summary>
    </member>
    <member name="T:DigitalRune.WeakDelegate`1">
      <summary>
            Represents a <see cref="T:System.Delegate" /> of a specific type that stores the target object as a weak 
            reference.
            </summary>
      <typeparam name="T">The type of delegate.</typeparam>
    </member>
    <member name="M:DigitalRune.WeakDelegate`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.WeakDelegate`1" /> class.
            </summary>
      <param name="target">
            The original <see cref="T:System.Delegate" /> to create a weak reference for.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.WeakEvent`1">
      <summary>
            Represents an event that stores the target objects as weak 
            references.
            </summary>
      <typeparam name="T">
            The type of event handler. Must be of type <see cref="T:System.EventHandler" /> or 
            <see cref="T:System.EventHandler`1" />.
            </typeparam>
    </member>
    <member name="M:DigitalRune.WeakEvent`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.WeakEvent`1" /> class</summary>
    </member>
    <member name="M:DigitalRune.WeakEvent`1.Invoke(System.Object,System.EventArgs)">
      <summary>
            Raises the event.
            </summary>
      <param name="sender">The sender.</param>
      <param name="eventArgs">
            The <see cref="T:System.EventArgs" /> instance containing the event data.
            </param>
    </member>
    <member name="T:DigitalRune.WeakEventHandler">
      <summary>
            Helper class to add weak event handlers to events of type <see cref="T:System.EventHandler" />.
            </summary>
    </member>
    <member name="M:DigitalRune.WeakEventHandler.Register``2(``0,``1,System.Action{``0,System.EventHandler},System.Action{``0,System.EventHandler},System.Action{``1,System.Object,System.EventArgs})">
      <summary>
            Registers an event handler that works with a weak reference to the target object.
            </summary>
      <param name="sender">The object that provides the event.</param>
      <param name="listener">The object that listens to the event.</param>
      <param name="addHandler">A callback method that adds an event handler to the event.</param>
      <param name="removeHandler">A callback method that removes an event handler from the event.</param>
      <param name="forwardEvent">A callback method that forwards the event to the actual event handler.</param>
      <typeparam name="TSender">The type of the sender.</typeparam>
      <typeparam name="TListener">The type of the listener.</typeparam>
      <returns>
            An <see cref="T:System.IDisposable" /> which can be used to detach the weak event handler from the 
            event.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sender" />, <paramref name="addHandler" />, <paramref name="removeHandler" />, 
            <paramref name="listener" />, or <paramref name="forwardEvent" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.WeakEventHandler`1">
      <summary>
            Helper class to add weak event handlers to events of type
            <see cref="T:System.EventHandler`1" />.
            </summary>
      <typeparam name="TEventArgs">The type of the event args.</typeparam>
    </member>
    <member name="M:DigitalRune.WeakEventHandler`1.Register``2(``0,``1,System.Action{``0,System.EventHandler{`0}},System.Action{``0,System.EventHandler{`0}},System.Action{``1,System.Object,`0})">
      <summary>
            Registers an event handler that works with a weak reference to the target object.
            </summary>
      <param name="sender">The object that provides the event.</param>
      <param name="listener">The object that listens to the event.</param>
      <param name="addHandler">A callback method that adds an event handler to the event.</param>
      <param name="removeHandler">A callback method that removes an event handler from the event.</param>
      <param name="forwardEvent">A callback method that forwards the event to the actual event handler.</param>
      <typeparam name="TSender">The type of the sender.</typeparam>
      <typeparam name="TListener">The type of the listener.</typeparam>
      <returns>
            An <see cref="T:System.IDisposable" /> which can be used to detach the weak event handler from the 
            event.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sender" />, <paramref name="addHandler" />, <paramref name="removeHandler" />,
            <paramref name="listener" />, or <paramref name="forwardEvent" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.WeakEventHandler`2">
      <summary>
            Helper class to add weak event handlers to events of a certain type of event handler.
            </summary>
      <typeparam name="TEventHandler">The type of the event handler.</typeparam>
      <typeparam name="TEventArgs">The type of the event args.</typeparam>
    </member>
    <member name="M:DigitalRune.WeakEventHandler`2.Register``2(``0,``1,System.Func{System.EventHandler{`1},`0},System.Action{``0,`0},System.Action{``0,`0},System.Action{``1,System.Object,`1})">
      <summary>
            Registers an event handler that works with a weak reference to the target object.
            </summary>
      <param name="sender">The object that provides the event.</param>
      <param name="listener">The object that listens to the event.</param>
      <param name="conversion">
            A function used to convert the given event handler to a delegate compatible with the 
            underlying .NET event.
            </param>
      <param name="addHandler">A callback method that adds an event handler to the event.</param>
      <param name="removeHandler">A callback method that removes an event handler from the event.</param>
      <param name="forwardEvent">A callback method that forwards the event to the actual event handler.</param>
      <typeparam name="TSender">The type of the sender.</typeparam>
      <typeparam name="TListener">The type of the listener.</typeparam>
      <returns>
            An <see cref="T:System.IDisposable" /> which can be used to detach the weak event handler from the 
            event.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sender" />, <paramref name="addHandler" />, <paramref name="removeHandler" />,
            <paramref name="listener" />, or <paramref name="forwardEvent" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.WeakMulticastDelegate">
      <summary>
            Represents a <see cref="T:System.MulticastDelegate" /> that stores the target objects as weak 
            references.
            </summary>
    </member>
    <member name="M:DigitalRune.WeakMulticastDelegate.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.WeakMulticastDelegate" /> class</summary>
    </member>
    <member name="M:DigitalRune.WeakMulticastDelegate.Add(System.Delegate)">
      <summary>
            Adds a new <see cref="T:System.Delegate" /> to the <see cref="T:DigitalRune.WeakMulticastDelegate" />.
            </summary>
      <param name="delegate">The new <see cref="T:System.Delegate" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegate" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.WeakMulticastDelegate.Count">
      <summary>
            Gets the number of live delegates in the collection.
            </summary>
    </member>
    <member name="M:DigitalRune.WeakMulticastDelegate.Invoke(System.Object[])">
      <summary>
            Invokes the stored <see cref="T:System.Delegate" />s with the given arguments.
            </summary>
      <param name="args">The arguments.</param>
    </member>
    <member name="M:DigitalRune.WeakMulticastDelegate.Remove(System.Delegate)">
      <summary>
            Removes a <see cref="T:System.Delegate" /> from the <see cref="T:DigitalRune.WeakMulticastDelegate" />.
            </summary>
      <param name="delegate">The <see cref="T:System.Delegate" /> to remove.</param>
    </member>
    <member name="T:DigitalRune.WeakMulticastDelegate`1">
      <summary>
            Represents a <see cref="T:System.MulticastDelegate" /> that stores the target objects as weak 
            references.
            </summary>
      <typeparam name="T">The type of delegate.</typeparam>
    </member>
    <member name="M:DigitalRune.WeakMulticastDelegate`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.WeakMulticastDelegate`1" /> class</summary>
    </member>
    <member name="M:DigitalRune.WeakMulticastDelegate`1.Add(`0)">
      <summary>
            Adds a new <see cref="T:System.Delegate" /> of a given type to the 
            <see cref="T:DigitalRune.WeakMulticastDelegate`1" />.
            </summary>
      <param name="delegate">The new <see cref="T:System.Delegate" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegate" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.WeakMulticastDelegate`1.Remove(`0)">
      <summary>
            Removes a <see cref="T:System.Delegate" /> of a given type from the 
            <see cref="T:DigitalRune.WeakMulticastDelegate`1" />.
            </summary>
      <param name="delegate">The <see cref="T:System.Delegate" /> to remove.</param>
    </member>
    <member name="T:DigitalRune.Animation.IAnimatableObject">
      <summary>
            Represents an object that can be animated.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.IAnimatableObject.GetAnimatableProperty``1(System.String)">
      <summary>
            Gets the property with given name and type which can be animated.
            </summary>
      <param name="name">The name of the property.</param>
      <typeparam name="T">The type of the property.</typeparam>
      <returns>
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty" /> that has the given name and type; otherwise, 
            <see langword="null" /> if the object does not have an animatable property with this name or 
            type.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.IAnimatableObject.GetAnimatedProperties">
      <summary>
            Gets either the properties which are currently animated, or all properties which can be 
            animated. (See remarks.)
            </summary>
      <returns>
            The properties which are currently animated, or the all properties which can be animated.
            (See remarks.)
            </returns>
    </member>
    <member name="T:DigitalRune.Animation.IAnimatableProperty">
      <summary>
            Represents a property that can be animated.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.IAnimatableProperty.AnimationValue">
      <summary>
            Gets the animation value.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.IAnimatableProperty.BaseValue">
      <summary>
            Gets the base value.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.IAnimatableProperty.HasBaseValue">
      <summary>
            Gets a value indicating whether this property has a base value.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.IAnimatableProperty.IsAnimated">
      <summary>
            Gets or sets a value indicating whether this property is animated by the animation system.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.IAnimatableProperty`1">
      <summary>
            Represents a property of a certain type that can be animated.
            </summary>
      <typeparam name="T">The type of the property.</typeparam>
    </member>
    <member name="P:DigitalRune.Animation.IAnimatableProperty`1.AnimationValue">
      <summary>
            Gets or sets the animation value.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.IAnimatableProperty`1.BaseValue">
      <summary>
            Gets the base value.
            </summary>
    </member>
    <member name="T:DigitalRune.Collections.ChildCollection`2">
      <summary>
            Represents a collection of children.
            </summary>
      <typeparam name="TParent">The type of the parent object.</typeparam>
      <typeparam name="TChild">The type of the child object.</typeparam>
    </member>
    <member name="M:DigitalRune.Collections.ChildCollection`2.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.ChildCollection`2" /> class.
            </summary>
      <param name="parent">The parent object that owns this collection.</param>
    </member>
    <member name="M:DigitalRune.Collections.ChildCollection`2.#ctor(`0,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.ChildCollection`2" /> class that
            has the specified initial capacity.
            </summary>
      <param name="parent">The parent object that owns this collection.</param>
      <param name="capacity">
            The number of elements that the new list can initially store.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.ChildCollection`2.ClearItems">
      <summary>
            Removes all elements from the collection. 
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.ChildCollection`2.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Collections.ChildCollection`2" />. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for <see cref="T:DigitalRune.Collections.ChildCollection`2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Collections.ChildCollection`2.GetParent(`1)">
      <summary>
            Gets the parent of an object.
            </summary>
      <param name="child">The child object.</param>
      <returns>The parent of <paramref name="child" />.</returns>
    </member>
    <member name="M:DigitalRune.Collections.ChildCollection`2.InsertItem(System.Int32,`1)">
      <summary>
            Inserts an element into the collection at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="child" /> should be inserted.
            </param>
      <param name="child">The object to insert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="child" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Cannot insert node into collection - <paramref name="child" /> is already in this collection
            or child of another object.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.ChildCollection`2.Move(System.Int32,System.Int32)">
      <summary>
            Moves the item at the specified index to a new location in the collection. 
            </summary>
      <param name="oldIndex">
            The zero-based index specifying the location of the item to be moved. 
            </param>
      <param name="newIndex">
            The zero-based index specifying the new location of the item.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="oldIndex" /> or <paramref name="newIndex" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.ChildCollection`2.MoveItem(System.Int32,System.Int32)">
      <summary>
            Moves the item at the specified index to a new location in the collection. 
            </summary>
      <param name="oldIndex">
            The zero-based index specifying the location of the item to be moved. 
            </param>
      <param name="newIndex">
            The zero-based index specifying the new location of the item.
            </param>
    </member>
    <member name="P:DigitalRune.Collections.ChildCollection`2.Parent">
      <summary>
            Gets (or sets) the parent which owns this child collection.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.ChildCollection`2.RemoveItem(System.Int32)">
      <summary>
            Removes the element at the specified index of the collection. 
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="M:DigitalRune.Collections.ChildCollection`2.SetItem(System.Int32,`1)">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="child">The new value for the element at the specified index.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="child" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Cannot insert node into collection - <paramref name="child" /> is already in this collection
            or child of another object.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.ChildCollection`2.SetParent(`1,`0)">
      <summary>
            Sets the parent of the given object.
            </summary>
      <param name="parent">The parent to set.</param>
      <param name="child">The child object.</param>
    </member>
    <member name="T:DigitalRune.Collections.CollectionChangedAction">
      <summary>
            Describes the action that caused a <see cref="E:DigitalRune.Collections.NotifyingCollection`1.CollectionChanged" /> 
            event.
            </summary>
    </member>
    <member name="F:DigitalRune.Collections.CollectionChangedAction.Add">
      <summary>
            New items were added to the collection.
            </summary>
    </member>
    <member name="F:DigitalRune.Collections.CollectionChangedAction.Remove">
      <summary>
            Items were removed from the collection.
            </summary>
    </member>
    <member name="F:DigitalRune.Collections.CollectionChangedAction.Replace">
      <summary>
            One item was replaced in the collection.
            </summary>
    </member>
    <member name="F:DigitalRune.Collections.CollectionChangedAction.Clear">
      <summary>
            All items were removed from the collection.
            </summary>
    </member>
    <member name="F:DigitalRune.Collections.CollectionChangedAction.Move">
      <summary>
            An item was moved within the collection.
            </summary>
    </member>
    <member name="T:DigitalRune.Collections.CollectionChangedEventArgs`1">
      <summary>
            Provides data for the <see cref="E:DigitalRune.Collections.NotifyingCollection`1.CollectionChanged" /> event.
            </summary>
      <typeparam name="T">The type of elements in the collection.</typeparam>
    </member>
    <member name="P:DigitalRune.Collections.CollectionChangedEventArgs`1.Action">
      <summary>
            Gets or sets the action that caused the event.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.CollectionChangedEventArgs`1.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Collections.CollectionChangedEventArgs`1" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Collections.CollectionChangedEventArgs`1" /> class.
            </returns>
    </member>
    <member name="P:DigitalRune.Collections.CollectionChangedEventArgs`1.NewItems">
      <summary>
            Gets the new items that were involved in the change.
            </summary>
    </member>
    <member name="P:DigitalRune.Collections.CollectionChangedEventArgs`1.NewItemsIndex">
      <summary>
            Gets or sets the index of the first new item.
            </summary>
    </member>
    <member name="P:DigitalRune.Collections.CollectionChangedEventArgs`1.OldItems">
      <summary>
            Gets the items affected by a replace, remove or move action.
            </summary>
    </member>
    <member name="P:DigitalRune.Collections.CollectionChangedEventArgs`1.OldItemsIndex">
      <summary>
            Gets or sets the index where the first old item was placed in the collection.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.CollectionChangedEventArgs`1.Recycle">
      <summary>
            Recycles this instance of the <see cref="T:DigitalRune.Collections.CollectionChangedEventArgs`1" /> class.
            </summary>
    </member>
    <member name="T:DigitalRune.Collections.CollectionHelper">
      <summary>
            Provides extension methods for working with collections.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.CollectionHelper.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
             Adds the specified items to the <see cref="T:System.Collections.Generic.ICollection`1" />. 
             </summary>
      <param name="collection">The collection to which the items should be added.</param>
      <param name="items">TThe items to be added.</param>
      <typeparam name="T">The type of items in the collection.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is <see langword="null" />.
             </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> is <see langword="null" />.
             </exception>
    </member>
    <member name="T:DigitalRune.Collections.Deque`1">
      <summary>
            Represents a double-ended queue (deque) of objects. 
            </summary>
      <typeparam name="T">Specifies the type of elements in the deque.</typeparam>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.Deque`1" /> class that is empty and has the
            default initial capacity. 
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.Deque`1" /> class that contains elements copied 
            from the specified collection and has sufficient capacity to accommodate the number of 
            elements copied. 
            </summary>
      <param name="collection">
            The collection whose elements are copied to the new <see cref="T:DigitalRune.Collections.Deque`1" />. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.Deque`1" /> class is empty and has the 
            specified initial capacity. 
            </summary>
      <param name="capacity">
            The initial number of elements that the <see cref="T:DigitalRune.Collections.Deque`1" /> can contain.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.Clear">
      <summary>
            Removes all items from the <see cref="T:DigitalRune.Collections.Deque`1" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.Contains(`0)">
      <summary>
            Determines whether the <see cref="T:DigitalRune.Collections.Deque`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:DigitalRune.Collections.Deque`1" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:DigitalRune.Collections.Deque`1" />; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:DigitalRune.Collections.Deque`1" /> to an <see cref="T:System.Array" />, starting at a 
            particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from 
            <see cref="T:DigitalRune.Collections.Deque`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
      <param name="arrayIndex">
            The zero-based index in <paramref name="array" /> at which copying begins.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional. Or <paramref name="arrayIndex" /> is equal to 
            or greater than the length of <paramref name="array" />. Or the number of elements in the 
            source <see cref="T:DigitalRune.Collections.Deque`1" /> is greater than the available space from 
            <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Collections.Deque`1.Count">
      <summary>
            Gets the number of items contained in the <see cref="T:DigitalRune.Collections.Deque`1" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.DequeueHead">
      <summary>
            Removes and returns the object at the beginning of the <see cref="T:DigitalRune.Collections.Deque`1" />. 
            </summary>
      <returns>
            The object that is removed from the beginning of the <see cref="T:DigitalRune.Collections.Deque`1" />. 
            </returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:DigitalRune.Collections.Deque`1" /> is empty.</exception>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.DequeueTail">
      <summary>
            Removes and returns the object at the end of the <see cref="T:DigitalRune.Collections.Deque`1" />. 
            </summary>
      <returns>
            The object that is removed from the end of the <see cref="T:DigitalRune.Collections.Deque`1" />. 
            </returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:DigitalRune.Collections.Deque`1" /> is empty.</exception>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.EnqueueHead(`0)">
      <summary>
            Adds an object to the beginning of the <see cref="T:DigitalRune.Collections.Deque`1" />. 
            </summary>
      <param name="item">
            The object to add to the <see cref="T:DigitalRune.Collections.Deque`1" />. The value can be null for reference types.
            </param>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.EnqueueTail(`0)">
      <summary>
            Adds an object to the end of the <see cref="T:DigitalRune.Collections.Deque`1" />. 
            </summary>
      <param name="item">
            The object to add to the <see cref="T:DigitalRune.Collections.Deque`1" />. The value can be null for reference types.
            </param>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="P:DigitalRune.Collections.Deque`1.Head">
      <summary>
            Gets or sets the object at the beginning of the <see cref="T:DigitalRune.Collections.Deque`1" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:DigitalRune.Collections.Deque`1" /> is empty.</exception>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.IndexOf(`0)">
      <summary>
            Determines the index of a specific item in the <see cref="T:DigitalRune.Collections.Deque`1" />.
            </summary>
      <param name="item">The object to locate in the <see cref="T:DigitalRune.Collections.Deque`1" />.</param>
      <returns>
            The index of <paramref name="item" /> if found in the deque; otherwise, -1.
            </returns>
    </member>
    <member name="P:DigitalRune.Collections.Deque`1.Item(System.Int32)">
      <summary>
            Gets or sets the item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or equal to or greater than <see cref="P:DigitalRune.Collections.Deque`1.Count" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">
            The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </param>
    </member>
    <member name="P:DigitalRune.Collections.Deque`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> was successfully removed from the 
            <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />. This method also returns 
            <see langword="false" /> if <paramref name="item" /> is not found in the original 
            <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>
            Inserts an item into the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
      <param name="item">
            The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index from the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at 
            a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from 
            <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
      <param name="arrayIndex">
            The zero-based index in <paramref name="array" /> at which copying begins.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than zero.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional. Or <paramref name="arrayIndex" /> is equal to or 
            greater than the length of <paramref name="array" />. Or the number of elements in the source 
            <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="arrayIndex" /> 
            to the end of the destination <paramref name="array" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of 
            the destination <paramref name="array" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Collections.Deque`1.System#Collections#ICollection#IsSynchronized">
      <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized 
            (thread safe).
            </summary>
    </member>
    <member name="P:DigitalRune.Collections.Deque`1.System#Collections#ICollection#SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="P:DigitalRune.Collections.Deque`1.Tail">
      <summary>
            Gets or sets the object at the end of the <see cref="T:DigitalRune.Collections.Deque`1" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:DigitalRune.Collections.Deque`1" /> is empty.</exception>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.ToArray">
      <summary>
            Copies the <see cref="T:DigitalRune.Collections.Deque`1" /> elements to a new array.
            </summary>
      <returns>A new array containing elements copied from the <see cref="T:DigitalRune.Collections.Deque`1" />.</returns>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.TrimExcess">
      <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:DigitalRune.Collections.Deque`1" />, if that 
            number is less than 90 percent of current capacity.
            </summary>
    </member>
    <member name="T:DigitalRune.Collections.Deque`1.Enumerator">
      <summary>
            Enumerates the elements of a <see cref="T:DigitalRune.Collections.Deque`1" />. 
            </summary>
    </member>
    <member name="P:DigitalRune.Collections.Deque`1.Enumerator.Current">
      <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.Enumerator.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting 
            unmanaged resources.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.Enumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
      <returns>
        <see langword="true" /> if the enumerator was successfully advanced to the next element; 
            <see langword="false" /> if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.Deque`1.Enumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the 
            <see cref="T:DigitalRune.Collections.Deque`1" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The <see cref="T:DigitalRune.Collections.Deque`1" /> was modified after the enumerator was created.
            </exception>
    </member>
    <member name="P:DigitalRune.Collections.Deque`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last 
            element.
            </exception>
    </member>
    <member name="T:DigitalRune.Collections.NamedObjectCollection`1">
      <summary>
            Stores objects by their names.
            </summary>
      <typeparam name="T">
            The type of the objects. Must be derived from <see cref="T:DigitalRune.INamedObject" />.
            </typeparam>
    </member>
    <member name="M:DigitalRune.Collections.NamedObjectCollection`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.NamedObjectCollection`1" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.NamedObjectCollection`1.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.NamedObjectCollection`1" /> class using the
            given comparer.
            </summary>
      <param name="comparer">The comparer that compares whether two names are equal.</param>
    </member>
    <member name="M:DigitalRune.Collections.NamedObjectCollection`1.#ctor(System.Collections.Generic.IEqualityComparer{System.String},System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.NamedObjectCollection`1" /> class that uses the 
            specified equality comparer and creates a lookup dictionary when the specified threshold is 
            exceeded. 
            </summary>
      <param name="comparer">The comparer that compares whether two names are equal.</param>
      <param name="dictionaryCreationThreshold">
            The number of elements the collection can hold without creating a lookup dictionary 
            (0 creates the lookup dictionary when the first item is added), or –1 to specify that a 
            lookup dictionary is never created. 
            </param>
    </member>
    <member name="M:DigitalRune.Collections.NamedObjectCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Adds the elements of the specified collection to the end of the 
            <see cref="T:DigitalRune.Collections.NamedObjectCollection`1" />. 
            </summary>
      <param name="collection">
            The collection whose elements should be added to the end of the 
            <see cref="T:DigitalRune.Collections.NamedObjectCollection`1" /></param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.NamedObjectCollection`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Collections.NamedObjectCollection`1.GetKeyForItem(`0)">
      <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
      <param name="item">The element from which to extract the key.</param>
      <returns>The key for the specified element.</returns>
    </member>
    <member name="M:DigitalRune.Collections.NamedObjectCollection`1.Move(System.Int32,System.Int32)">
      <summary>
            Moves the item at the specified index to a new location in the collection. 
            </summary>
      <param name="oldIndex">
            The zero-based index specifying the location of the item to be moved. 
            </param>
      <param name="newIndex">
            The zero-based index specifying the new location of the item.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="oldIndex" /> or <paramref name="newIndex" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.NamedObjectCollection`1.MoveItem(System.Int32,System.Int32)">
      <summary>
            Moves the item at the specified index to a new location in the collection.
            </summary>
      <param name="oldIndex">
            The zero-based index specifying the location of the item to be moved. 
            </param>
      <param name="newIndex">
            The zero-based index specifying the new location of the item.
            </param>
    </member>
    <member name="M:DigitalRune.Collections.NamedObjectCollection`1.TryGet(System.String,`0@)">
      <summary>
            Gets the object associated with the specified key.
            </summary>
      <param name="key">The name of the element to get.</param>
      <param name="value">
            When this method returns, the object associated with the specified key, if 
            the key is found; otherwise, the default value for the type of the value 
            parameter. (This parameter is passed uninitialized.)
            </param>
      <returns>
        <see langword="true" /> if the <see cref="T:DigitalRune.Collections.NamedObjectCollection`1" /> contains 
            an element with the specified key; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Collections.NamedObjectCollection`1.TryGet``1(System.String,``0@)">
      <summary>
            Gets the object associated with the specified key. The object needs to be of a
            certain type.
            </summary>
      <param name="key">The name of the element to get.</param>
      <param name="value">
            The object associated with the specified key, if the key is found and the 
            object is of type <typeparamref name="TExpected" />; otherwise, the 
            default value for <typeparamref name="TExpected" /> is returned. (This 
            parameter is passed uninitialized.)
            </param>
      <typeparam name="TExpected">The expected type of the object.</typeparam>
      <returns>
        <see langword="true" /> if the <see cref="T:DigitalRune.Collections.NamedObjectCollection`1" /> contains an element 
            with the specified key which is of the expected type; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Collections.NotifyingCollection`1">
      <summary>
            Represents collection of objects that sends notifications (events) when the collection is 
            modified.
            </summary>
      <typeparam name="T">The type of elements in the collection.</typeparam>
    </member>
    <member name="M:DigitalRune.Collections.NotifyingCollection`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.NotifyingCollection`1" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.NotifyingCollection`1.#ctor(System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.NotifyingCollection`1" /> class with the given
            settings.
            </summary>
      <param name="allowNull">
            If set to <see langword="true" /> null items are allowed.
            </param>
      <param name="allowDuplicates">
            If set to <see langword="true" /> duplicate items are allowed.
            </param>
    </member>
    <member name="M:DigitalRune.Collections.NotifyingCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Adds the elements of the specified collection to the end of the 
            <see cref="T:DigitalRune.Collections.NotifyingCollection`1" />. 
            </summary>
      <param name="collection">
            The collection whose elements should be added to the end of the 
            <see cref="T:DigitalRune.Collections.NotifyingCollection`1" />. The collection itself cannot be 
            <see langword="null" />, but it can contain elements that are <see langword="null" />, if type 
            <typeparamref name="T" /> is a reference type and <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowNull" /> is set to 
            <see langword="true" />. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Collections.NotifyingCollection`1.AllowDuplicates">
      <summary>
            Gets or sets a value indicating whether duplicate items are allowed in 
            the collection.
            </summary>
    </member>
    <member name="P:DigitalRune.Collections.NotifyingCollection`1.AllowNull">
      <summary>
            Gets or sets a value indicating whether <see langword="null" /> items are allowed 
            in the collection.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.NotifyingCollection`1.ClearItems">
      <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
    </member>
    <member name="E:DigitalRune.Collections.NotifyingCollection`1.CollectionChanged">
      <summary>
            Event raised after items were added, replaced or removed.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.NotifyingCollection`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Collections.NotifyingCollection`1" />. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for <see cref="T:DigitalRune.Collections.NotifyingCollection`1" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Collections.NotifyingCollection`1.InsertItem(System.Int32,`0)">
      <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
      <param name="item">The object to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. The collection does not allow 
            <see langword="null" /> values. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowNull" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. The collection does not 
            allow duplicate items. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowDuplicates" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.NotifyingCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Inserts the elements of a collection into the <see cref="T:DigitalRune.Collections.NotifyingCollection`1" /> at the
            specified index.
            </summary>
      <param name="index">
            The zero-based index at which the new elements should be inserted.
            </param>
      <param name="collection">
            The collection whose elements should be inserted into the 
            <see cref="T:DigitalRune.Collections.NotifyingCollection`1" />. The collection itself cannot be 
            <see langword="null" />, but it can contain elements that are <see langword="null" />, if type 
            <typeparamref name="T" /> is a reference type and <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowNull" /> is set to 
            <see langword="true" />.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.NotifyingCollection`1.Move(System.Int32,System.Int32)">
      <summary>
            Moves the item at the specified index to a new location in the collection. 
            </summary>
      <param name="oldIndex">
            The zero-based index specifying the location of the item to be moved. 
            </param>
      <param name="newIndex">
            The zero-based index specifying the new location of the item.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="oldIndex" /> or <paramref name="newIndex" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.NotifyingCollection`1.MoveItem(System.Int32,System.Int32)">
      <summary>
            Moves the item at the specified index to a new location in the collection.
            </summary>
      <param name="oldIndex">
            The zero-based index specifying the location of the item to be moved. 
            </param>
      <param name="newIndex">
            The zero-based index specifying the new location of the item.
            </param>
    </member>
    <member name="M:DigitalRune.Collections.NotifyingCollection`1.OnCollectionChanged(DigitalRune.Collections.CollectionChangedEventArgs{`0})">
      <summary>
            Raises the <see cref="E:DigitalRune.Collections.NotifyingCollection`1.CollectionChanged" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:DigitalRune.Collections.CollectionChangedEventArgs`1" /> object that provides the arguments for the
            event.
            </param>
    </member>
    <member name="M:DigitalRune.Collections.NotifyingCollection`1.RemoveItem(System.Int32)">
      <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or <paramref name="index" /> is equal to or 
            greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.NotifyingCollection`1.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes a range of elements from the <see cref="T:DigitalRune.Collections.NotifyingCollection`1" />. 
            </summary>
      <param name="index">
            The zero-based starting index of the range of elements to remove.
            </param>
      <param name="count">
            The number of elements to remove. 
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than 0.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of 
            elements in the <see cref="T:DigitalRune.Collections.NotifyingCollection`1" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.NotifyingCollection`1.SetItem(System.Int32,`0)">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. The collection does not allow 
            <see langword="null" /> values. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowNull" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. The collection does not 
            allow duplicate items. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowDuplicates" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Collections.Pair`1">
      <summary>
            Stores two unordered related objects.
            </summary>
      <typeparam name="T">The type of the contained objects.</typeparam>
    </member>
    <member name="M:DigitalRune.Collections.Pair`1.#ctor(`0,`0)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.Pair`1" /> class with the given
            objects.
            </summary>
      <param name="first">The first object.</param>
      <param name="second">The second object.</param>
    </member>
    <member name="M:DigitalRune.Collections.Pair`1.Equals(DigitalRune.Collections.Pair{`0})">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Collections.Pair`1.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current 
            <see cref="T:System.Object" />.
            </summary>
      <param name="obj">
            The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.
            </param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current 
            <see cref="T:System.Object" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Collections.Pair`1.First">
      <summary>
            Gets or sets the first object.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.Pair`1.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Collections.Pair`1.op_Equality(DigitalRune.Collections.Pair{`0},DigitalRune.Collections.Pair{`0})">
      <summary>
            Compares two <see cref="T:DigitalRune.Collections.Pair`1" /> objects to determine whether they are the 
            same.
            </summary>
      <param name="pair1">The first pair.</param>
      <param name="pair2">The second pair.</param>
      <returns>
        <see langword="true" /> if the <paramref name="pair1" /> and <paramref name="pair2" /> are the 
            same; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Collections.Pair`1.op_Inequality(DigitalRune.Collections.Pair{`0},DigitalRune.Collections.Pair{`0})">
      <summary>
            Compares two <see cref="T:DigitalRune.Collections.Pair`1" /> objects to determine whether they are 
            different.
            </summary>
      <param name="pair1">The first pair.</param>
      <param name="pair2">The second pair.</param>
      <returns>
        <see langword="true" /> if the <paramref name="pair1" /> and <paramref name="pair2" /> are 
            different; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Collections.Pair`1.Second">
      <summary>
            Gets or sets the second object.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.Pair`1.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Collections.Pair`2">
      <summary>
            Stores two ordered related objects.
            </summary>
      <typeparam name="TFirst">The type of the first object.</typeparam>
      <typeparam name="TSecond">The type of the second object.</typeparam>
    </member>
    <member name="M:DigitalRune.Collections.Pair`2.#ctor(`0,`1)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.Pair`2" /> class with the given
            objects.
            </summary>
      <param name="first">The first object.</param>
      <param name="second">The second object.</param>
    </member>
    <member name="M:DigitalRune.Collections.Pair`2.Equals(DigitalRune.Collections.Pair{`0,`1})">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Collections.Pair`2.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current 
            <see cref="T:System.Object" />.
            </summary>
      <param name="obj">
            The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.
            </param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current 
            <see cref="T:System.Object" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Collections.Pair`2.First">
      <summary>
            Gets or sets the first object.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.Pair`2.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Collections.Pair`2.op_Equality(DigitalRune.Collections.Pair{`0,`1},DigitalRune.Collections.Pair{`0,`1})">
      <summary>
            Compares two <see cref="T:DigitalRune.Collections.Pair`2" /> objects to determine whether they are the 
            same.
            </summary>
      <param name="pair1">The first pair.</param>
      <param name="pair2">The second pair.</param>
      <returns>
        <see langword="true" /> if the <paramref name="pair1" /> and <paramref name="pair2" /> are the 
            same; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Collections.Pair`2.op_Inequality(DigitalRune.Collections.Pair{`0,`1},DigitalRune.Collections.Pair{`0,`1})">
      <summary>
            Compares two <see cref="T:DigitalRune.Collections.Pair`2" /> objects to determine whether they are 
            different.
            </summary>
      <param name="pair1">The first pair.</param>
      <param name="pair2">The second pair.</param>
      <returns>
        <see langword="true" /> if the <paramref name="pair1" /> and <paramref name="pair2" /> are 
            different; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Collections.Pair`2.Second">
      <summary>
            Gets or sets the second object.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.Pair`2.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Collections.PooledEnumerable`1">
      <summary>
            Provides a base implementation for an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and an
            <see cref="T:System.Collections.Generic.IEnumerator`1" /> supporting resource pooling. (For internal use only.)
            </summary>
      <typeparam name="T">The type of objects to enumerate.</typeparam>
    </member>
    <member name="M:DigitalRune.Collections.PooledEnumerable`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Collections.PooledEnumerable`1" /> class</summary>
    </member>
    <member name="M:DigitalRune.Collections.PooledEnumerable`1.Initialize">
      <summary>
            Initializes this instance.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            This enumerable/enumerator is already in use.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.PooledEnumerable`1.OnNext(`0@)">
      <summary>
            Called when the enumerator should move to the next object.
            </summary>
      <param name="current">The next object.</param>
      <returns>
        <see langword="true" /> if the enumerator was successfully advanced to the next element; 
            <see langword="false" /> if the enumerator has passed the end of the collection. 
            </returns>
    </member>
    <member name="M:DigitalRune.Collections.PooledEnumerable`1.OnRecycle">
      <summary>
            Called when this instance should be recycled.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.PooledEnumerable`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            This enumerable/enumerator has already been disposed, or the enumerator is already in use.
            </exception>
    </member>
    <member name="P:DigitalRune.Collections.PooledEnumerable`1.System#Collections#Generic#IEnumerator{T}#Current">
      <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.PooledEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="P:DigitalRune.Collections.PooledEnumerable`1.System#Collections#IEnumerator#Current">
      <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.PooledEnumerable`1.System#Collections#IEnumerator#MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
      <returns>
        <see langword="true" /> if the enumerator was successfully advanced to the next element; 
            <see langword="false" /> if the enumerator has passed the end of the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Collections.PooledEnumerable`1.System#Collections#IEnumerator#Reset">
      <summary>
            Not supported.
            </summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="M:System.Collections.IEnumerator.Reset" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.PooledEnumerable`1.System#IDisposable#Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting 
            unmanaged resources.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            This enumerable/enumerator has already been disposed.
            </exception>
    </member>
    <member name="T:DigitalRune.Collections.SynchronizedNotifyingCollection`1">
      <summary>
            Represents a collection of objects that sends notifications (events) when the collection is 
            modified where access is thread-safe. (Not available on these platforms: Silverlight, Windows 
            Phone 7, Xbox 360)
            </summary>
      <typeparam name="T">The type of elements in the collection.</typeparam>
    </member>
    <member name="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.SynchronizedNotifyingCollection`1" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.#ctor(System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.SynchronizedNotifyingCollection`1" /> class
            with the given settings.
            </summary>
      <param name="allowNull">
            If set to <see langword="true" /> null items are allowed.
            </param>
      <param name="allowDuplicates">
            If set to <see langword="true" /> duplicate items are allowed.
            </param>
    </member>
    <member name="P:DigitalRune.Collections.SynchronizedNotifyingCollection`1.AllowDuplicates">
      <summary>
            Gets or sets a value indicating whether duplicate items are allowed in 
            the collection.
            </summary>
    </member>
    <member name="P:DigitalRune.Collections.SynchronizedNotifyingCollection`1.AllowNull">
      <summary>
            Gets or sets a value indicating whether <see langword="null" /> items are allowed 
            in the collection.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.ClearItems">
      <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
    </member>
    <member name="E:DigitalRune.Collections.SynchronizedNotifyingCollection`1.CollectionChanged">
      <summary>
            Event raised after items were added, replaced or removed.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Collections.SynchronizedNotifyingCollection`1" />. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for <see cref="T:DigitalRune.Collections.SynchronizedNotifyingCollection`1" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.InsertItem(System.Int32,`0)">
      <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
      <param name="item">The object to insert. The value can be null for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. The collection does not allow 
            <see langword="null" /> values. See <see cref="P:DigitalRune.Collections.SynchronizedNotifyingCollection`1.AllowNull" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. The collection does not 
            allow duplicate items. See <see cref="P:DigitalRune.Collections.SynchronizedNotifyingCollection`1.AllowDuplicates" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.Move(System.Int32,System.Int32)">
      <summary>
            Moves the item at the specified index to a new location in the collection. 
            </summary>
      <param name="oldIndex">
            The zero-based index specifying the location of the item to be moved. 
            </param>
      <param name="newIndex">
            The zero-based index specifying the new location of the item.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="oldIndex" /> or <paramref name="newIndex" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.MoveItem(System.Int32,System.Int32)">
      <summary>
            Moves the item at the specified index to a new location in the collection.
            </summary>
      <param name="oldIndex">
            The zero-based index specifying the location of the item to be moved. 
            </param>
      <param name="newIndex">
            The zero-based index specifying the new location of the item.
            </param>
    </member>
    <member name="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.OnCollectionChanged(DigitalRune.Collections.CollectionChangedEventArgs{`0})">
      <summary>
            Raises the <see cref="E:DigitalRune.Collections.SynchronizedNotifyingCollection`1.CollectionChanged" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:DigitalRune.Collections.CollectionChangedEventArgs`1" /> object that provides the arguments for the
            event.
            </param>
    </member>
    <member name="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.RemoveItem(System.Int32)">
      <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or 
            greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.SetItem(System.Int32,`0)">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">
            The new value for the element at the specified index. The value can be null for reference 
            types.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. The collection does not allow 
            <see langword="null" /> values. See <see cref="P:DigitalRune.Collections.SynchronizedNotifyingCollection`1.AllowNull" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. The collection does not 
            allow duplicate items. See <see cref="P:DigitalRune.Collections.SynchronizedNotifyingCollection`1.AllowDuplicates" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Collections.WeakCollection`1">
      <summary>
            Represents a collection of objects of type <typeparamref name="T" /> using weak references. 
            </summary>
      <typeparam name="T">The type of the elements in the collection.</typeparam>
    </member>
    <member name="M:DigitalRune.Collections.WeakCollection`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.WeakCollection`1" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.WeakCollection`1.Add(`0)">
      <summary>
            Adds an item to the <see cref="T:DigitalRune.Collections.WeakCollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:DigitalRune.Collections.WeakCollection`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. The <see cref="T:DigitalRune.Collections.WeakCollection`1" /> does 
            not support null entries.
            </exception>
    </member>
    <member name="M:DigitalRune.Collections.WeakCollection`1.Clear">
      <summary>
            Removes all items from the <see cref="T:DigitalRune.Collections.WeakCollection`1" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.WeakCollection`1.Contains(`0)">
      <summary>
            Determines whether the <see cref="T:DigitalRune.Collections.WeakCollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:DigitalRune.Collections.WeakCollection`1" />.</param>
      <returns>
        <see langword="true" /> if the collection contains a specific value; <see langword="false" /> 
            if it does not.
            </returns>
    </member>
    <member name="P:DigitalRune.Collections.WeakCollection`1.Count">
      <summary>
            Gets the number of items contained in the <see cref="T:DigitalRune.Collections.WeakCollection`1" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.WeakCollection`1.Finalize">
      <summary>
            Releases unmanaged resources before an instance of the <see cref="T:DigitalRune.Collections.WeakCollection`1" /> class
            is reclaimed by garbage collection.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.WeakCollection`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Collections.WeakCollection`1.Remove(`0)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:DigitalRune.Collections.WeakCollection`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:DigitalRune.Collections.WeakCollection`1" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> was successfully removed from the 
            <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />. This method also returns 
            <see langword="false" /> if <paramref name="item" /> is not found in the original 
            <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Collections.WeakCollection`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:DigitalRune.Collections.WeakCollection`1" /> to an <see cref="T:System.Array" />, 
            starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from 
            <see cref="T:DigitalRune.Collections.Deque`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
      <param name="arrayIndex">
            The zero-based index in <paramref name="array" /> at which copying begins.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional. Or <paramref name="arrayIndex" /> is equal to 
            or greater than the length of <paramref name="array" />. Or the number of elements in the 
            source <see cref="T:DigitalRune.Collections.WeakCollection`1" /> is greater than the available space from 
            <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Collections.WeakCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read only. Always returns 
            <see langword="false" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.WeakCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at 
            a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from 
            <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
      <param name="arrayIndex">
            The zero-based index in <paramref name="array" /> at which copying begins.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than zero.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional. Or <paramref name="arrayIndex" /> is equal to or 
            greater than the length of <paramref name="array" />. Or the number of elements in the source 
            <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="arrayIndex" /> 
            to the end of the destination <paramref name="array" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of 
            the destination <paramref name="array" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Collections.WeakCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized 
            (thread safe).
            </summary>
    </member>
    <member name="P:DigitalRune.Collections.WeakCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Collections.WeakCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="T:DigitalRune.Diagnostics.HierarchicalProfiler">
      <summary>
             Provides support for hierarchical profiling. (Not available in Silverlight.)
             </summary>
    </member>
    <member name="M:DigitalRune.Diagnostics.HierarchicalProfiler.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Diagnostics.HierarchicalProfiler" /> class.
            </summary>
      <param name="name">The name of this profiler.</param>
    </member>
    <member name="M:DigitalRune.Diagnostics.HierarchicalProfiler.Dump(DigitalRune.Diagnostics.HierarchicalProfilerNode,System.Int32)">
      <summary>
            Dumps the profiled data of the given node.
            </summary>
      <param name="node">The node. Can be <see langword="false" /> to use the root node.</param>
      <param name="maxLevelIncluded">
            The maximal level included relative to the given node. 0 means, no child data is included.
            1 means, one level of children are included.
            </param>
      <returns>
            A string representing the profiled data.
            </returns>
    </member>
    <member name="P:DigitalRune.Diagnostics.HierarchicalProfiler.ElapsedTime">
      <summary>
            Gets the elapsed time since the creation of this instance or the last <see cref="M:DigitalRune.Diagnostics.HierarchicalProfiler.Reset" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Diagnostics.HierarchicalProfiler.FrameCount">
      <summary>
            Gets the number of frames.
            </summary>
    </member>
    <member name="P:DigitalRune.Diagnostics.HierarchicalProfiler.Name">
      <summary>
            Gets the name of this profiler.
            </summary>
    </member>
    <member name="M:DigitalRune.Diagnostics.HierarchicalProfiler.NewFrame">
      <summary>
            Must be called when a new frame begins.
            </summary>
    </member>
    <member name="M:DigitalRune.Diagnostics.HierarchicalProfiler.Reset">
      <summary>
            Resets all timing data.
            </summary>
    </member>
    <member name="P:DigitalRune.Diagnostics.HierarchicalProfiler.Root">
      <summary>
            Gets the root node.
            </summary>
    </member>
    <member name="M:DigitalRune.Diagnostics.HierarchicalProfiler.Start(System.String)">
      <summary>
            Starts time measurement for a node.
            </summary>
      <param name="nodeName">The name of the node.</param>
    </member>
    <member name="M:DigitalRune.Diagnostics.HierarchicalProfiler.Stop">
      <summary>
            Stops time measurement for a node.
            </summary>
    </member>
    <member name="T:DigitalRune.Diagnostics.HierarchicalProfilerNode">
      <summary>
            Defines a node in the hierarchical measurements of a <see cref="T:DigitalRune.Diagnostics.HierarchicalProfiler" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Average">
      <summary>
            Gets the average (arithmetic mean) time of all non-recursive calls.
            </summary>
    </member>
    <member name="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Children">
      <summary>
            Gets the child nodes.
            </summary>
    </member>
    <member name="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Count">
      <summary>
            Gets how often this node was called.
            </summary>
    </member>
    <member name="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Maximum">
      <summary>
            Gets the maximum time of all non-recursive calls.
            </summary>
    </member>
    <member name="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Minimum">
      <summary>
            Gets the minimum time of all non-recursive calls.
            </summary>
    </member>
    <member name="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Name">
      <summary>
            Gets the name of this node.
            </summary>
    </member>
    <member name="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Parent">
      <summary>
            Gets the parent node.
            </summary>
    </member>
    <member name="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Profiler">
      <summary>
            Gets the profiler.
            </summary>
    </member>
    <member name="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Sum">
      <summary>
            Gets the total accumulated time of this node.
            </summary>
    </member>
    <member name="T:DigitalRune.Diagnostics.Profiler">
      <summary>
             Provides support for simple, non-hierarchical profiling. (Not available in Silverlight.)
             </summary>
    </member>
    <member name="M:DigitalRune.Diagnostics.Profiler.AddValue(System.String,System.Double)">
      <summary>
            Adds the value to the <see cref="T:DigitalRune.Diagnostics.ProfilerData" /> with the given name.
            </summary>
      <param name="name">The name.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:DigitalRune.Diagnostics.Profiler.ClearAll">
      <summary>
            Removes all profiler data.
            </summary>
    </member>
    <member name="P:DigitalRune.Diagnostics.Profiler.Data">
      <summary>
            Gets the profiler data for each thread.
            </summary>
    </member>
    <member name="M:DigitalRune.Diagnostics.Profiler.Dump">
      <summary>
            Returns a string that contains a table with all <see cref="T:DigitalRune.Diagnostics.ProfilerData" /> instances
            for the current thread.
            </summary>
      <returns>
            A string containing a table with all profiler data values for the current thread.
            </returns>
    </member>
    <member name="M:DigitalRune.Diagnostics.Profiler.Dump(System.Threading.Thread)">
      <summary>
            Returns a string that contains a table with all <see cref="T:DigitalRune.Diagnostics.ProfilerData" /> instances
            for the given thread.
            </summary>
      <param name="thread">The thread.</param>
      <returns>
            A string containing a table with all profiler data values for the given thread.
            </returns>
    </member>
    <member name="M:DigitalRune.Diagnostics.Profiler.DumpAll">
      <summary>
            Returns a string that contains all collected profiler data (for all threads). 
            </summary>
      <returns>
            A string containing all collected profiler data (for all threads). The string contains
            a table for each thread.
            </returns>
    </member>
    <member name="M:DigitalRune.Diagnostics.Profiler.Get">
      <summary>
            Gets the <see cref="T:DigitalRune.Diagnostics.ProfilerDataCollection" /> for the current thread.
            </summary>
      <returns>
            The <see cref="T:DigitalRune.Diagnostics.ProfilerDataCollection" /> for the current thread.
            </returns>
    </member>
    <member name="M:DigitalRune.Diagnostics.Profiler.Get(System.String)">
      <summary>
            Gets the <see cref="T:DigitalRune.Diagnostics.ProfilerData" /> with the given name for the current thread.
            </summary>
      <param name="name">The name of the profiler data.</param>
      <returns>
            The <see cref="T:DigitalRune.Diagnostics.ProfilerData" /> with the given name for the current thread.
            </returns>
    </member>
    <member name="M:DigitalRune.Diagnostics.Profiler.Get(System.Threading.Thread)">
      <summary>
            Gets the <see cref="T:DigitalRune.Diagnostics.ProfilerDataCollection" /> for the specified thread.
            </summary>
      <param name="thread">The thread.</param>
      <returns>
            The <see cref="T:DigitalRune.Diagnostics.ProfilerDataCollection" /> for the specified thread.
            </returns>
    </member>
    <member name="M:DigitalRune.Diagnostics.Profiler.Reset">
      <summary>
            Resets all <see cref="T:DigitalRune.Diagnostics.ProfilerData" /> for the current thread.
            </summary>
    </member>
    <member name="M:DigitalRune.Diagnostics.Profiler.Reset(System.String)">
      <summary>
            Resets the <see cref="T:DigitalRune.Diagnostics.ProfilerData" /> with the given name (only for the current thread).
            </summary>
      <param name="name">The name of the profiler data.</param>
    </member>
    <member name="M:DigitalRune.Diagnostics.Profiler.Reset(System.Threading.Thread)">
      <summary>
            Resets all <see cref="T:DigitalRune.Diagnostics.ProfilerData" /> for the given thread.
            </summary>
      <param name="thread">The thread.</param>
    </member>
    <member name="M:DigitalRune.Diagnostics.Profiler.ResetAll">
      <summary>
            Resets all <see cref="T:DigitalRune.Diagnostics.ProfilerData" /> for all threads.
            </summary>
    </member>
    <member name="M:DigitalRune.Diagnostics.Profiler.ResetAll(System.String)">
      <summary>
            Resets the <see cref="T:DigitalRune.Diagnostics.ProfilerData" /> with the given name for all threads.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:DigitalRune.Diagnostics.Profiler.SetFormat(System.String,System.Double,System.String)">
      <summary>
            Sets the formatting data for <see cref="T:DigitalRune.Diagnostics.ProfilerData" />.
            </summary>
      <param name="name">The name of the <see cref="T:DigitalRune.Diagnostics.ProfilerData" />.</param>
      <param name="scale">The scale.</param>
      <param name="description">The description.</param>
    </member>
    <member name="M:DigitalRune.Diagnostics.Profiler.Start(System.String)">
      <summary>
            Starts time measurement for the <see cref="T:DigitalRune.Diagnostics.ProfilerData" /> with the given name.
            </summary>
      <param name="name">The name of the <see cref="T:DigitalRune.Diagnostics.ProfilerData" />.</param>
    </member>
    <member name="M:DigitalRune.Diagnostics.Profiler.Stop(System.String)">
      <summary>
            Stops time measurement for the <see cref="T:DigitalRune.Diagnostics.ProfilerData" /> with the given name and
            records the elapsed time in seconds.
            </summary>
      <param name="name">The name of the <see cref="T:DigitalRune.Diagnostics.ProfilerData" />.</param>
    </member>
    <member name="T:DigitalRune.Diagnostics.ProfilerData">
      <summary>
            Stores profiler data.
            </summary>
    </member>
    <member name="P:DigitalRune.Diagnostics.ProfilerData.Average">
      <summary>
            Gets the average (arithmetic mean) of all measured values.
            </summary>
    </member>
    <member name="P:DigitalRune.Diagnostics.ProfilerData.Count">
      <summary>
            Gets the number of measured values.
            </summary>
    </member>
    <member name="P:DigitalRune.Diagnostics.ProfilerData.Last">
      <summary>
            Gets the last value that was measured.
            </summary>
    </member>
    <member name="P:DigitalRune.Diagnostics.ProfilerData.Maximum">
      <summary>
            Gets the maximum of all measured values.
            </summary>
    </member>
    <member name="P:DigitalRune.Diagnostics.ProfilerData.Minimum">
      <summary>
            Gets the minimum of all measured values.
            </summary>
    </member>
    <member name="P:DigitalRune.Diagnostics.ProfilerData.Name">
      <summary>
            Gets the name of the profiler data.
            </summary>
    </member>
    <member name="P:DigitalRune.Diagnostics.ProfilerData.Sum">
      <summary>
            Gets the sum of all measured values.
            </summary>
    </member>
    <member name="T:DigitalRune.Diagnostics.ProfilerDataCollection">
      <summary>
            Stores a collection of <see cref="T:DigitalRune.Diagnostics.ProfilerData" /> instances for one thread.
            </summary>
    </member>
    <member name="P:DigitalRune.Diagnostics.ProfilerDataCollection.ThreadId">
      <summary>
            Gets the thread ID.
            </summary>
    </member>
    <member name="P:DigitalRune.Diagnostics.ProfilerDataCollection.ThreadName">
      <summary>
            Gets the name of the thread.
            </summary>
    </member>
    <member name="T:DigitalRune.Linq.LinqHelper">
      <summary>
            Provides new extension methods for LINQ.
            </summary>
    </member>
    <member name="M:DigitalRune.Linq.LinqHelper.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>
            Performs the given action on each element in a sequence when it is enumerated.
            </summary>
      <param name="source">
            A sequence that contains the elements on which to perform <paramref name="action" />.
            </param>
      <param name="action">The action to execute on each element.</param>
      <typeparam name="T">The type of elements.</typeparam>
      <returns>The sequence of elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="action" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Linq.LinqHelper.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
      <summary>
            Performs the given action on each element (incorporating its index) in a sequence when it is 
            enumerated.
            </summary>
      <param name="source">
            A sequence that contains the elements on which to perform <paramref name="action" />.
            </param>
      <param name="action">
            The action to execute on each element; the second parameter of the function represents the 
            index of the element.
            </param>
      <typeparam name="T">The type of elements.</typeparam>
      <returns>The sequence of elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="action" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Linq.LinqHelper.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>
            Immediately performs the given action on each element in a sequence.
            </summary>
      <param name="source">
            A sequence that contains the elements on which to perform <paramref name="action" />.
            </param>
      <param name="action">The action to execute on each element.</param>
      <typeparam name="T">The type of elements.</typeparam>
      <returns>The sequence of elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Linq.LinqHelper.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
      <summary>
            Immediately performs the given action on each element (incorporating its index) in a 
            sequence.
            </summary>
      <param name="source">
            A sequence that contains the elements on which to perform <paramref name="action" />.
            </param>
      <param name="action">
            The action to execute on each element; the second parameter of the function represents the 
            index of the element.
            </param>
      <typeparam name="T">The type of elements.</typeparam>
      <returns>The sequence of elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Linq.LinqHelper.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the index of the first element in a sequence that satisfies the specified condition.
            </summary>
      <param name="source">A sequence of elements.</param>
      <param name="predicate">A predicate to test each element.</param>
      <typeparam name="T">The type of elements.</typeparam>
      <returns>
            The zero-based index of the first element in the sequence that passed test; -1 if no element
            passed the test.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Linq.LinqHelper.Return``1(``0)">
      <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> that returns a single element.
            </summary>
      <param name="value">The first and only element in the sequence.</param>
      <typeparam name="T">The type of the element.</typeparam>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that returns a single element.
            </returns>
    </member>
    <member name="T:DigitalRune.Linq.TreeHelper">
      <summary>
            Provides new extension methods for traversing trees using LINQ.
            </summary>
    </member>
    <member name="M:DigitalRune.Linq.TreeHelper.GetAncestors``1(``0,System.Func{``0,``0})">
      <summary>
            Gets the ancestors of a certain node.
            </summary>
      <param name="node">
            The reference node where to start the search. (The reference node will not be included in 
            the resulting enumeration.)
            </param>
      <param name="getParent">
        <para>
            A method that retrieves the parent object for a node of type <typeparamref name="T" />.
            </para>
        <para>
            The method should return <see langword="null" /> to indicate that a node does not have a
            parent. <see cref="M:DigitalRune.Linq.TreeHelper.GetAncestors``1(``0,System.Func{``0,``0})" /> guarantees that <paramref name="getParent" /> is never 
            called with <see langword="null" /> as parameter.
            </para>
      </param>
      <typeparam name="T">The type of node that is enumerated.</typeparam>
      <returns>The ancestors of <paramref name="node" /> (along the path from the node to the root).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="getParent" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Linq.TreeHelper.GetDepth``1(``0,System.Func{``0,``0})">
      <summary>
            Gets the depth of the specified node in a tree.
            </summary>
      <param name="node">The node.</param>
      <param name="getParent">
        <para>
            A method that retrieves the parent object for a node of type <typeparamref name="T" />.
            </para>
        <para>
            The method should return <see langword="null" /> to indicate that a node does not have a
            parent. <see cref="M:DigitalRune.Linq.TreeHelper.GetDepth``1(``0,System.Func{``0,``0})" /> guarantees that <paramref name="getParent" /> is never 
            called with <see langword="null" /> as parameter.
            </para>
      </param>
      <typeparam name="T">The type of tree node.</typeparam>
      <returns>The depth of the node.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="getParent" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Linq.TreeHelper.GetDescendants``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Gets the descendants of a given node using a depth-first search.
            </summary>
      <param name="node">
            The reference node where to start the search. (The reference node will not be included 
            in the enumeration.)
            </param>
      <param name="getChildren">
        <para>
            A method that retrieves the children of an object of type <typeparamref name="T" />. 
            </para>
        <para>
          <see cref="M:DigitalRune.Linq.TreeHelper.GetDescendants``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})" /> guarantees that 
            <paramref name="getChildren" /> is never called with <see langword="null" /> as parameter. The
            enumeration returned by <paramref name="getChildren" /> may contain <see langword="null" />.
            </para>
      </param>
      <typeparam name="T">The type of node that is enumerated.</typeparam>
      <returns>The descendants of <paramref name="node" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="getChildren" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Linq.TreeHelper.GetDescendants``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Boolean)">
      <summary>
            Gets the descendants of a given node using a depth-first search or a breadth-first 
            search.
            </summary>
      <param name="node">
            The reference node where to start the search. (The reference node will not be included in 
            the enumeration.)
            </param>
      <param name="getChildren">
        <para>
            A method that retrieves the children of an object of type <typeparamref name="T" />. 
            </para>
        <para>
          <see cref="M:DigitalRune.Linq.TreeHelper.GetDescendants``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Boolean)" /> guarantees that 
            <paramref name="getChildren" /> is never called with <see langword="null" /> as parameter. The
            enumeration returned by <paramref name="getChildren" /> may contain <see langword="null" />.
            </para>
      </param>
      <param name="depthFirst">
            If set to <see langword="true" /> then a depth-first search for descendants will be made; 
            otherwise a breadth-first search will be made.
            </param>
      <typeparam name="T">The type of node that is enumerated.</typeparam>
      <returns>The descendants of <paramref name="node" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="getChildren" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Linq.TreeHelper.GetHeight``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Gets the height of the specified tree or subtree.
            </summary>
      <param name="tree">The root of a tree or subtree.</param>
      <param name="getChildren">
        <para>
            A method that retrieves the children of an object of type <typeparamref name="T" />. 
            </para>
        <para>
          <see cref="M:DigitalRune.Linq.TreeHelper.GetHeight``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})" /> guarantees that <paramref name="getChildren" /> is never called 
            with <see langword="null" /> as parameter. The enumeration returned by 
            <paramref name="getChildren" /> may contain <see langword="null" />.
            </para>
      </param>
      <typeparam name="T">The type of tree node.</typeparam>
      <returns>The height of the tree or subtree.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tree" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Linq.TreeHelper.GetLeaves``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Gets the leaves of a given tree.
            </summary>
      <param name="node">The reference node where to start the search.</param>
      <param name="getChildren">
        <para>
            A method that retrieves the children of an object of type <typeparamref name="T" />.
            </para>
        <para>
          <see cref="M:DigitalRune.Linq.TreeHelper.GetLeaves``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})" /> guarantees that 
            <paramref name="getChildren" /> is never called with <see langword="null" /> as parameter. The
            enumeration returned by <paramref name="getChildren" /> may contain <see langword="null" />.
            </para>
      </param>
      <typeparam name="T">The type of node that is enumerated.</typeparam>
      <returns>The leaves of <paramref name="node" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="getChildren" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Linq.TreeHelper.GetRoot``1(``0,System.Func{``0,``0})">
      <summary>
            Gets the root of a tree.
            </summary>
      <param name="node">The reference node where to start the search.</param>
      <param name="getParent">
        <para>
            A method that retrieves the parent object for a node of type <typeparamref name="T" />.
            </para>
        <para>
            The method should return <see langword="null" /> to indicate that a node does not have a
            parent. <see cref="M:DigitalRune.Linq.TreeHelper.GetRoot``1(``0,System.Func{``0,``0})" /> guarantees that <paramref name="getParent" /> is never 
            called with <see langword="null" /> as parameter.
            </para>
      </param>
      <typeparam name="T">The type of node that is enumerated.</typeparam>
      <returns>The root node.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="getParent" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Linq.TreeHelper.GetSelfAndAncestors``1(``0,System.Func{``0,``0})">
      <summary>
            Gets the given node and its ancestors.
            </summary>
      <param name="node">
            The reference node where to start the search. (The reference node will be the first node in 
            the resulting enumeration.)
            </param>
      <param name="getParent">
        <para>
            A method that retrieves the parent object for a node of type <typeparamref name="T" />.
            </para>
        <para>
            The method should return <see langword="null" /> to indicate that a node does not have a
            parent. <see cref="M:DigitalRune.Linq.TreeHelper.GetSelfAndAncestors``1(``0,System.Func{``0,``0})" /> guarantees that <paramref name="getParent" /> is 
            never called with <see langword="null" /> as parameter.
            </para>
      </param>
      <typeparam name="T">The type of node that is enumerated.</typeparam>
      <returns>
            The <paramref name="node" /> and its ancestors (along the path from the node to the root).
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="getParent" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Linq.TreeHelper.GetSubtree``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Gets the subtree (the given node and all of its descendants) using a depth-first search.
            </summary>
      <param name="node">
            The reference node where to start the search. (The reference node will be the first 
            element in the enumeration.)
            </param>
      <param name="getChildren">
        <para>
            A method that retrieves the children of an object of type <typeparamref name="T" />. 
            </para>
        <para>
          <see cref="M:DigitalRune.Linq.TreeHelper.GetSubtree``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})" /> guarantees that 
            <paramref name="getChildren" /> is never called with <see langword="null" /> as parameter. The
            enumeration returned by <paramref name="getChildren" /> may contain <see langword="null" />.
            </para>
      </param>
      <typeparam name="T">The type of node that is enumerated.</typeparam>
      <returns>The subtree of <paramref name="node" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="getChildren" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Linq.TreeHelper.GetSubtree``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Boolean)">
      <summary>
            Gets the subtree (the given node and all of its descendants) using a depth-first search or a 
            breadth-first search.
            </summary>
      <param name="node">
            The reference node where to start the search. (The reference node will be the first 
            element in the enumeration.)
            </param>
      <param name="getChildren">
        <para>
            A method that retrieves the children of an object of type <typeparamref name="T" />. 
            </para>
        <para>
          <see cref="M:DigitalRune.Linq.TreeHelper.GetSubtree``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})" /> guarantees that 
            <paramref name="getChildren" /> is never called with <see langword="null" /> as parameter. The
            enumeration returned by <paramref name="getChildren" /> may contain <see langword="null" />.
            </para>
      </param>
      <param name="depthFirst">
            If set to <see langword="true" /> then a depth-first search for descendants will be made; 
            otherwise a breadth-first search will be made.
            </param>
      <typeparam name="T">The type of node that is enumerated.</typeparam>
      <returns>The subtree of <paramref name="node" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="getChildren" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Numeric">
      <summary>
            Provides methods for robust floating-point comparisons (for <see langword="float" /> and 
            <see langword="double" />).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.AreEqual(System.Double,System.Double)">
      <summary>
            Determines whether two values are equal (regarding the tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <returns>
        <see langword="true" /> if the specified values are equal (within the tolerance); 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.AreEqual(System.Double,System.Double,System.Double)">
      <summary>
            Determines whether two values are equal (regarding a specific tolerance).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if the specified values are equal (within the tolerance); 
            otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="epsilon" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.AreEqual(System.Single,System.Single)">
      <summary>
            Determines whether two values are equal (regarding the tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <returns>
        <see langword="true" /> if the specified values are equal (within the tolerance); 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.AreEqual(System.Single,System.Single,System.Single)">
      <summary>
            Determines whether two values are equal (regarding a specific tolerance).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if the specified values are equal (within the tolerance); 
            otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="epsilon" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.ClampToZero(System.Double)">
      <summary>
            Clamps near-zero values to zero.
            </summary>
      <param name="value">The value.</param>
      <returns>0 if the value is nearly zero (within the tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />) 
            or the original value otherwise.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.ClampToZero(System.Double,System.Double)">
      <summary>
            Clamps near-zero values to zero.
            </summary>
      <param name="value">The value.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
            0 if the value is nearly zero (within the tolerance <paramref name="epsilon" />)
            or the original value otherwise.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.ClampToZero(System.Single)">
      <summary>
            Clamps near-zero values to zero.
            </summary>
      <param name="value">The value.</param>
      <returns>0 if the value is nearly zero (within the tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />) 
            or the original value otherwise.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.ClampToZero(System.Single,System.Single)">
      <summary>
            Clamps near-zero values to zero.
            </summary>
      <param name="value">The value.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
            0 if the value is nearly zero (within the tolerance <paramref name="epsilon" />)
            or the original value otherwise.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.Compare(System.Double,System.Double)">
      <summary>
            Compares two double values (regarding the tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <returns>
        <c>-1</c> if value1 is less than value2, <c>+1</c> if value1 is greater than value2, and 
            <c>0</c> if value1 is equal to value2 (within the tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />).
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.Compare(System.Double,System.Double,System.Double)">
      <summary>
            Compares two double values (regarding a specific tolerance).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <param name="epsilon">The tolerance value for equality.</param>
      <returns>
        <c>-1</c> if value1 is less than value2, <c>+1</c> if value1 is greater than value2, and 
            <c>0</c> if value1 is equal to value2 (within the tolerance <paramref name="epsilon" />).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="epsilon" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.Compare(System.Single,System.Single)">
      <summary>
            Compares two float values (regarding the tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <returns>
        <c>-1</c> if value1 is less than value2, <c>+1</c> if value1 is greater than value2, and 
            <c>0</c> if value1 is equal to value2 (within the tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />).
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.Compare(System.Single,System.Single,System.Single)">
      <summary>
            Compares two float values (regarding a specific tolerance).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <param name="epsilon">The tolerance value for equality.</param>
      <returns>
        <c>-1</c> if value1 is less than value2, <c>+1</c> if value1 is greater than value2, and 
            <c>0</c> if value1 is equal to value2 (within the tolerance <paramref name="epsilon" />).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="epsilon" /> is negative or 0.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Numeric.EpsilonD">
      <summary>
            Gets or sets the tolerance value used for comparison of <see langword="double" /> values.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Numeric.EpsilonDSquared">
      <summary>
            Gets the squared tolerance value used for comparison of <see langword="double" /> values.
            (<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" /> * <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Numeric.EpsilonF">
      <summary>
            Gets or sets the tolerance value used for comparison of <see langword="float" /> values.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Numeric.EpsilonFSquared">
      <summary>
            Gets the squared tolerance value used for comparison of <see langword="float" /> values.
            (<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" /> * <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsFinite(System.Double)">
      <summary>
            Determines whether the specified value is finite.
            </summary>
      <param name="value">The value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is finite; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsFinite(System.Single)">
      <summary>
            Determines whether the specified value is finite.
            </summary>
      <param name="value">The value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is finite; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsFiniteOrNaN(System.Double)">
      <summary>
            Determines whether the specified value is finite or <see cref="F:System.Double.NaN" />.
            </summary>
      <param name="value">The value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is finite or <see cref="F:System.Double.NaN" />; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsFiniteOrNaN(System.Single)">
      <summary>
            Determines whether the specified value is finite or <see cref="F:System.Single.NaN" />.
            </summary>
      <param name="value">The value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is finite or <see cref="F:System.Single.NaN" />; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsGreater(System.Double,System.Double)">
      <summary>
            Determines whether a value is greater than another value (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> &gt; <paramref name="value2" /> and 
            the difference between <paramref name="value1" /> and <paramref name="value2" /> is greater 
            than or equal to the epsilon tolerance; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsGreater(System.Double,System.Double,System.Double)">
      <summary>
            Determines whether a value is greater than another value (regarding the specified tolerance).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> &gt; <paramref name="value2" /> and 
            the difference between <paramref name="value1" /> and <paramref name="value2" /> is greater 
            than or equal to the epsilon tolerance; 
            otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="epsilon" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsGreater(System.Single,System.Single)">
      <summary>
            Determines whether a value is greater than another value (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <returns>
        <see langword="true" /> if the difference between <paramref name="value1" /> and 
            <paramref name="value2" /> is greater than or equal to the epsilon tolerance and 
            <paramref name="value1" /> &gt; <paramref name="value2" />; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsGreater(System.Single,System.Single,System.Single)">
      <summary>
            Determines whether a value is greater than another value (regarding the specified tolerance).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> &gt; <paramref name="value2" /> and 
            the difference between <paramref name="value1" /> and <paramref name="value2" /> is greater 
            than or equal to the epsilon tolerance; 
            otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="epsilon" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsGreaterOrEqual(System.Double,System.Double)">
      <summary>
            Determines whether a value is greater than or equal to another value (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> ≥ <paramref name="value2" /> or their 
            difference is less than the epsilon tolerance; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsGreaterOrEqual(System.Double,System.Double,System.Double)">
      <summary>
            Determines whether a value is greater than or equal to another value (regarding the 
            specified tolerance).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> ≥ <paramref name="value2" /> or their 
            difference is less than the epsilon tolerance; otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="epsilon" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsGreaterOrEqual(System.Single,System.Single)">
      <summary>
            Determines whether a value is greater than or equal to another value (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> ≥ <paramref name="value2" /> or their 
            difference is less than the epsilon tolerance; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsGreaterOrEqual(System.Single,System.Single,System.Single)">
      <summary>
            Determines whether a value is greater than or equal to another value (regarding the 
            specified tolerance).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> ≥ <paramref name="value2" /> or their 
            difference is less than the epsilon tolerance; otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="epsilon" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsLess(System.Double,System.Double)">
      <summary>
            Determines whether a value is less than another value (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> &lt; <paramref name="value2" /> and 
            the difference between <paramref name="value1" /> and <paramref name="value2" /> is greater 
            than or equal to the epsilon tolerance; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsLess(System.Double,System.Double,System.Double)">
      <summary>
            Determines whether a value is less than another value (regarding the specified tolerance).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> &lt; <paramref name="value2" /> and 
            the difference between <paramref name="value1" /> and <paramref name="value2" /> is greater 
            than or equal to the epsilon tolerance; otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="epsilon" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsLess(System.Single,System.Single)">
      <summary>
            Determines whether a value is less than another value (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> &lt; <paramref name="value2" /> and 
            the difference between <paramref name="value1" /> and <paramref name="value2" /> is greater 
            than or equal to the epsilon tolerance; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsLess(System.Single,System.Single,System.Single)">
      <summary>
            Determines whether a value is less than another value (regarding the specified tolerance).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> &lt; <paramref name="value2" /> and 
            the difference between <paramref name="value1" /> and <paramref name="value2" /> is greater 
            than or equal to the epsilon tolerance; otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="epsilon" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsLessOrEqual(System.Double,System.Double)">
      <summary>
            Determines whether a value is less than or equal to another value (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> ≤ <paramref name="value2" /> or their 
            difference is less than the epsilon tolerance; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsLessOrEqual(System.Double,System.Double,System.Double)">
      <summary>
            Determines whether a value is less than or equal to another value (regarding the specified 
            tolerance).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> ≤ <paramref name="value2" /> or their 
            difference is less than the epsilon tolerance; otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="epsilon" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsLessOrEqual(System.Single,System.Single)">
      <summary>
            Determines whether a value is less than or equal to another value (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> ≤ <paramref name="value2" /> or their 
            difference is less than the epsilon tolerance; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsLessOrEqual(System.Single,System.Single,System.Single)">
      <summary>
            Determines whether a value is less than or equal to another value (regarding the specified tolerance).
            </summary>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> ≤ <paramref name="value2" /> or their 
            difference is less than the epsilon tolerance; otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="epsilon" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsNaN(System.Double)">
      <summary>
            Returns a value indicating whether the specified number evaluates to not a number 
            (<see cref="F:System.Double.NaN" />).
            </summary>
      <param name="d">A double-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="d" /> evaluates to not a number 
            (<see cref="F:System.Double.NaN" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsNaN(System.Single)">
      <summary>
            Returns a value indicating whether the specified number evaluates to not a number 
            (<see cref="F:System.Double.NaN" />).
            </summary>
      <param name="f">A double-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="f" /> evaluates to not a number 
            (<see cref="F:System.Double.NaN" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsNegative(System.Double)">
      <summary>
            Determines whether the specified value is negative.
            </summary>
      <param name="value">The value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is negative; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsNegative(System.Single)">
      <summary>
            Determines whether the specified value is negative.
            </summary>
      <param name="value">The value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is negative; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsNegativeFinite(System.Double)">
      <summary>
            Determines whether the specified value is negative finite.
            </summary>
      <param name="value">The value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a negative finite number; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsNegativeFinite(System.Single)">
      <summary>
            Determines whether the specified value is negative finite.
            </summary>
      <param name="value">The value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a negative finite number; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsPositive(System.Double)">
      <summary>
            Determines whether the specified value is positive.
            </summary>
      <param name="value">The value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is positive; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsPositive(System.Single)">
      <summary>
            Determines whether the specified value is positive.
            </summary>
      <param name="value">The value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is positive; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsPositiveFinite(System.Double)">
      <summary>
            Determines whether the specified value is positive finite.
            </summary>
      <param name="value">The value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a positive finite number; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsPositiveFinite(System.Single)">
      <summary>
            Determines whether the specified value is positive finite.
            </summary>
      <param name="value">The value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a positive finite number; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsZero(System.Double)">
      <summary>
            Determines whether a value is zero (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />).
            </summary>
      <param name="value">The value to test.</param>
      <returns>
        <see langword="true" /> if the specified value is zero (within the tolerance); 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsZero(System.Double,System.Double)">
      <summary>
            Determines whether a value is zero (regarding a specific tolerance).
            </summary>
      <param name="value">The value to test.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if the specified value is zero (within the tolerance); 
            otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="epsilon" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsZero(System.Single)">
      <summary>
            Determines whether a value is zero (regarding the tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />).
            </summary>
      <param name="value">The value to test.</param>
      <returns>
        <see langword="true" /> if the specified value is zero (within the tolerance); 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsZero(System.Single,System.Single)">
      <summary>
            Determines whether a value is zero (regarding a specific tolerance).
            </summary>
      <param name="value">The value to test.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if the specified value is zero (within the tolerance); 
            otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="epsilon" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsZeroOrNegativeFinite(System.Double)">
      <summary>
            Determines whether the specified value is 0 or negative finite.
            </summary>
      <param name="value">The value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is 0 or a negative finite number; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsZeroOrNegativeFinite(System.Single)">
      <summary>
            Determines whether the specified value is 0 or negative finite.
            </summary>
      <param name="value">The value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is 0 or a negative finite number; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsZeroOrPositiveFinite(System.Double)">
      <summary>
            Determines whether the specified value is 0 or positive finite.
            </summary>
      <param name="value">The value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is 0 or a positive finite number; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Numeric.IsZeroOrPositiveFinite(System.Single)">
      <summary>
            Determines whether the specified value is 0 or positive finite.
            </summary>
      <param name="value">The value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is 0 or a positive finite number; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Text.AppendNumberOptions">
      <summary>
            Options for <see cref="T:System.Text.StringBuilder" /> extension methods.
            </summary>
    </member>
    <member name="F:DigitalRune.Text.AppendNumberOptions.None">
      <summary>
             Normal format.
            </summary>
    </member>
    <member name="F:DigitalRune.Text.AppendNumberOptions.PositiveSign">
      <summary>
             Added "+" sign for positive value.
            </summary>
    </member>
    <member name="F:DigitalRune.Text.AppendNumberOptions.NumberGroup">
      <summary>
             Insert number group separation characters. In use, added "," for every 3 digits.
            </summary>
    </member>
    <member name="T:DigitalRune.Text.StringBuilderExtensions">
      <summary>
            Static class for string builder extension methods.
            </summary>
    </member>
    <member name="M:DigitalRune.Text.StringBuilderExtensions.Append(System.Text.StringBuilder,System.Text.StringBuilder)">
      <summary>
            Appends a copy of a string builder to the end of the string builder.
            </summary>
      <param name="builder">The string builder.</param>
      <param name="text">
            The text that is appended to the end of <paramref name="builder" />.
            </param>
    </member>
    <member name="M:DigitalRune.Text.StringBuilderExtensions.AppendNumber(System.Text.StringBuilder,System.Int32)">
      <summary>
            Converts an integer number to a string and adds it to string builder.
            </summary>
      <param name="builder">The string builder.</param>
      <param name="number">The number.</param>
    </member>
    <member name="M:DigitalRune.Text.StringBuilderExtensions.AppendNumber(System.Text.StringBuilder,System.Int32,DigitalRune.Text.AppendNumberOptions)">
      <summary>
            Converts an integer number to a string and adds it to the string builder.
            </summary>
      <param name="builder">The string builder.</param>
      <param name="number">The number.</param>
      <param name="options">The format options.</param>
    </member>
    <member name="M:DigitalRune.Text.StringBuilderExtensions.AppendNumber(System.Text.StringBuilder,System.Single)">
      <summary>
            Converts a float number to a string and adds it to the string builder.
            </summary>
      <param name="builder">The string builder.</param>
      <param name="number">The number.</param>
    </member>
    <member name="M:DigitalRune.Text.StringBuilderExtensions.AppendNumber(System.Text.StringBuilder,System.Single,DigitalRune.Text.AppendNumberOptions)">
      <summary>
            Converts a float number to a string and adds it to the string builder.
            </summary>
      <param name="builder">The string builder.</param>
      <param name="number">The number.</param>
      <param name="options">The format options.</param>
    </member>
    <member name="M:DigitalRune.Text.StringBuilderExtensions.AppendNumber(System.Text.StringBuilder,System.Single,System.Int32,DigitalRune.Text.AppendNumberOptions)">
      <summary>
            Converts a float number to a string and adds it to the string builder.
            </summary>
      <param name="builder">The string builder.</param>
      <param name="number">The number.</param>
      <param name="decimalCount">The number of decimal digits to show.</param>
      <param name="options">The format options.</param>
    </member>
    <member name="T:DigitalRune.Text.StringHelper">
      <summary>
            Contains additional string methods.
            </summary>
    </member>
    <member name="M:DigitalRune.Text.StringHelper.ComputeMatch(System.String,System.String)">
      <summary>
            Computes a value that indicates the match between two strings.
            </summary>
      <param name="stringA">The first string.</param>
      <param name="stringB">The second string.</param>
      <returns>
            If the strings have nothing in common 0 is returned. If the strings are identical 1 is
            returned. Otherwise a value between 0 and 1 is returned that indicates how similar the
            strings are.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Text.StringHelper.SplitTextAndNumber(System.String,System.String@,System.Int32@)">
      <summary>
            Splits a string that has an integer number as suffix (e.g. "text123") into its components.
            </summary>
      <param name="str">
            A string that has an positive integer number as suffix. The suffix is optional. Examples: "text", 
            "text123".
            </param>
      <param name="text">
            The text before the number suffix. "" if <paramref name="str" /> is <see langword="null" /> or
            empty.
            </param>
      <param name="number">
            The positive integer number. -1 if <paramref name="str" /> does not contain a suffix.
            </param>
    </member>
    <member name="T:DigitalRune.Threading.ITaskScheduler">
      <summary>
            Defines a task scheduler.
            </summary>
    </member>
    <member name="M:DigitalRune.Threading.ITaskScheduler.Schedule(DigitalRune.Threading.Task)">
      <summary>
            Schedules a task for execution.
            </summary>
      <param name="task">The task to schedule.</param>
    </member>
    <member name="T:DigitalRune.Threading.IWork">
      <summary>
            Represents a piece of work which can be executed in parallel.
            </summary>
    </member>
    <member name="M:DigitalRune.Threading.IWork.DoWork">
      <summary>
            Executes the work.
            </summary>
    </member>
    <member name="P:DigitalRune.Threading.IWork.Options">
      <summary>
            Gets the options specifying how this work may be executed.
            </summary>
    </member>
    <member name="T:DigitalRune.Threading.Parallel">
      <summary>
            Provides support for parallel execution of tasks.
            </summary>
    </member>
    <member name="M:DigitalRune.Threading.Parallel.Do(DigitalRune.Threading.IWork,DigitalRune.Threading.IWork)">
      <summary>
            Executes the given work items potentially in parallel with each other.
            This method will block until all work is completed.
            </summary>
      <param name="a">Work to execute.</param>
      <param name="b">Work to execute.</param>
      <exception cref="T:System.ArgumentNullException">
            Either <paramref name="a" /> or <paramref name="b" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Threading.Parallel.Do(DigitalRune.Threading.IWork[])">
      <summary>
            Executes the given work items potentially in parallel with each other.
            This method will block until all work is completed.
            </summary>
      <param name="work">The work to execute.</param>
      <exception cref="T:System.ArgumentNullException">
            One of the parameters is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Threading.Parallel.Do(System.Action,System.Action)">
      <summary>
            Executes the given work items potentially in parallel with each other.
            This method will block until all work is completed.
            </summary>
      <param name="action1">The first piece of work to execute.</param>
      <param name="action2">The second piece of work to execute.</param>
      <exception cref="T:System.ArgumentNullException">
            Either <paramref name="action1" /> or <paramref name="action2" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Threading.Parallel.Do(System.Action[])">
      <summary>
            Executes the given work items potentially in parallel with each other.
            This method will block until all work is completed.
            </summary>
      <param name="actions">The work to execute.</param>
      <exception cref="T:System.ArgumentNullException">
            One of the parameters is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Threading.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})">
      <summary>
            Executes a for loop where each iteration can potentially occur in parallel with others.
            </summary>
      <param name="startInclusive">The index (inclusive) at which to start iterating.</param>
      <param name="endExclusive">The index (exclusive) at which to end iterating.</param>
      <param name="body">
            The method to execute at each iteration. The current index is supplied as the parameter.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Threading.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32},System.Int32)">
      <summary>
            Executes a for loop where each iteration can potentially occur in parallel with others. 
            </summary>
      <param name="startInclusive">The index (inclusive) at which to start iterating.</param>
      <param name="endExclusive">The index (exclusive) at which to end iterating.</param>
      <param name="body">
            The method to execute at each iteration. The current index is supplied as the parameter.
            </param>
      <param name="stride">The number of iterations that each processor takes at a time.</param>
    </member>
    <member name="M:DigitalRune.Threading.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>
            Executes a for-each loop where each iteration can potentially occur in parallel with others.
            </summary>
      <param name="collection">The enumerable data source.</param>
      <param name="action">
            The method to execute at each iteration. The item to process is supplied as the parameter.
            </param>
      <typeparam name="T">The type of item to iterate over.</typeparam>
      <exception cref="T:System.ArgumentNullException">
            Either <paramref name="collection" /> or <paramref name="action" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Threading.Parallel.ProcessorAffinity">
      <summary>
            Gets or sets the processor affinity of the worker threads.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The specified array is empty or contains invalid values.
            </exception>
    </member>
    <member name="M:DigitalRune.Threading.Parallel.RunCallbacks">
      <summary>
            Executes all task callbacks on a single thread.
            </summary>
    </member>
    <member name="P:DigitalRune.Threading.Parallel.Scheduler">
      <summary>
            Gets or sets the task scheduler.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Threading.Parallel.Start(DigitalRune.Threading.IWork)">
      <summary>
            Creates and starts a task to execute the given work.
            </summary>
      <param name="work">The work to execute in parallel.</param>
      <returns>A task which represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="work" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Threading.Parallel.Start(DigitalRune.Threading.IWork,System.Action)">
      <summary>
            Creates and starts a task to execute the given work.
            </summary>
      <param name="work">The work to execute in parallel.</param>
      <param name="completionCallback">
            A method which will be called in <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks" /> once this task has completed.
            </param>
      <returns>A task which represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentException">
            Invalid number of maximum threads set in <see cref="P:DigitalRune.Threading.IWork.Options" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="work" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Threading.Parallel.Start(System.Action)">
      <summary>
            Creates and starts a task to execute the given work.
            </summary>
      <param name="action">The work to execute in parallel.</param>
      <returns>A task which represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Threading.Parallel.Start(System.Action,DigitalRune.Threading.WorkOptions)">
      <summary>
            Creates and starts a task to execute the given work.
            </summary>
      <param name="action">The work to execute in parallel.</param>
      <param name="options">The work options to use with this action.</param>
      <returns>A task which represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Threading.Parallel.Start(System.Action,DigitalRune.Threading.WorkOptions,System.Action)">
      <summary>
            Creates and starts a task to execute the given work.
            </summary>
      <param name="action">The work to execute in parallel.</param>
      <param name="options">The work options to use with this action.</param>
      <param name="completionCallback">
            A method which will be called in <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks" /> once this task has completed.
            </param>
      <returns>A task which represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentException">
            Invalid number of maximum threads set in <see cref="P:DigitalRune.Threading.IWork.Options" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Threading.Parallel.Start(System.Action,System.Action)">
      <summary>
            Creates and starts a task to execute the given work.
            </summary>
      <param name="action">The work to execute in parallel.</param>
      <param name="completionCallback">
            A method which will be called in <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks" /> once this task has completed.
            </param>
      <returns>A task which represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Threading.Parallel.Start``1(System.Func{``0})">
      <summary>
            Creates and starts a task which executes the given function and stores the result for later 
            retrieval.
            </summary>
      <param name="function">The function to execute in parallel.</param>
      <typeparam name="T">The type of result.</typeparam>
      <returns>A <see cref="T:DigitalRune.Threading.Task`1" /> which stores the result of the function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Threading.Parallel.Start``1(System.Func{``0},DigitalRune.Threading.WorkOptions)">
      <summary>
            Creates an starts a task which executes the given function and stores the result for later 
            retrieval.
            </summary>
      <param name="function">The function to execute in parallel.</param>
      <param name="options">The work options to use with this action.</param>
      <typeparam name="T">The type of result the function returns.</typeparam>
      <returns>A <see cref="T:DigitalRune.Threading.Task`1" /> which stores the result of the function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Threading.Parallel.Start``1(System.Func{``0},DigitalRune.Threading.WorkOptions,System.Action)">
      <summary>
            Creates and starts a task which executes the given function and stores the result for later 
            retrieval.
            </summary>
      <param name="function">The function to execute in parallel.</param>
      <param name="options">The work options to use with this action.</param>
      <param name="completionCallback">
            A method which will be called in <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks" /> once this task has completed.
            </param>
      <typeparam name="T">The type of result the function returns.</typeparam>
      <returns>A <see cref="T:DigitalRune.Threading.Task`1" /> which stores the result of the function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            Invalid number of maximum threads set in <see cref="P:DigitalRune.Threading.IWork.Options" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Threading.Parallel.Start``1(System.Func{``0},System.Action)">
      <summary>
            Creates and starts a task which executes the given function and stores the result for later 
            retrieval.
            </summary>
      <param name="function">The function to execute in parallel.</param>
      <param name="completionCallback">
            A method which will be called in <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks" /> once this task has completed.
            </param>
      <typeparam name="T">The type of result the function returns.</typeparam>
      <returns>A <see cref="T:DigitalRune.Threading.Task`1" /> which stores the result of the function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Threading.Parallel.StartBackground(DigitalRune.Threading.IWork)">
      <summary>
            Starts a task in a secondary worker thread. Intended for long running, blocking work such as
            I/O.
            </summary>
      <param name="work">The work to execute.</param>
      <returns>A task which represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="work" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Threading.Parallel.StartBackground(DigitalRune.Threading.IWork,System.Action)">
      <summary>
            Starts a task in a secondary worker thread. Intended for long running, blocking work such as
            I/O.
            </summary>
      <param name="work">The work to execute.</param>
      <param name="completionCallback">
            A method which will be called in <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks" /> once this task has completed.
            </param>
      <returns>A task which represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="work" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            Invalid number of maximum threads set in <see cref="P:DigitalRune.Threading.IWork.Options" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Threading.Parallel.StartBackground(System.Action)">
      <summary>
            Starts a task in a secondary worker thread. Intended for long running, blocking work such as
            I/O.
            </summary>
      <param name="action">The work to execute.</param>
      <returns>A task which represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Threading.Parallel.StartBackground(System.Action,System.Action)">
      <summary>
            Starts a task in a secondary worker thread. Intended for long running, blocking, work
            such as I/O.
            </summary>
      <param name="action">The work to execute.</param>
      <param name="completionCallback">
            A method which will be called in <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks" /> once this task has completed.
            </param>
      <returns>A task which represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Threading.Task">
      <summary>
            Represents an asynchronous operation.
            </summary>
    </member>
    <member name="P:DigitalRune.Threading.Task.Exceptions">
      <summary>
            Gets an array containing any exceptions thrown by this task.
            </summary>
    </member>
    <member name="P:DigitalRune.Threading.Task.IsComplete">
      <summary>
            Gets a value indicating whether the task has completed.
            </summary>
    </member>
    <member name="M:DigitalRune.Threading.Task.Wait">
      <summary>
            Waits for the task to complete execution.
            </summary>
      <exception cref="T:DigitalRune.Threading.TaskException">
            The task or a child task has thrown an exception.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The method is called from within the same task. A task cannot wait on itself.
            </exception>
    </member>
    <member name="T:DigitalRune.Threading.Task`1">
      <summary>
            Represents an asynchronous operation that can return a value.
            </summary>
      <typeparam name="T">The type of result produced by the asynchronous operation.</typeparam>
    </member>
    <member name="P:DigitalRune.Threading.Task`1.Exceptions">
      <summary>
            Gets an array containing any exceptions thrown by this task.
            </summary>
    </member>
    <member name="M:DigitalRune.Threading.Task`1.GetResult">
      <summary>
            Gets the result. (Blocks the calling thread until the asynchronous operation has completed 
            execution. This can only be called once!)
            </summary>
      <returns>The result of the asynchronous operation.</returns>
      <exception cref="T:DigitalRune.Threading.TaskException">
            The task or a child task has thrown an exception.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The result of the <see cref="T:DigitalRune.Threading.Task`1" /> has already been retrieved. The method 
            <see cref="M:DigitalRune.Threading.Task`1.GetResult" /> can only be called once.
            </exception>
    </member>
    <member name="P:DigitalRune.Threading.Task`1.IsComplete">
      <summary>
            Gets a value which indicates if this task has completed.
            </summary>
    </member>
    <member name="T:DigitalRune.Threading.TaskException">
      <summary>
            Occurs when an unhandled exception is thrown within a <see cref="T:DigitalRune.Threading.Task" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Threading.TaskException.#ctor(System.Exception[])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Threading.TaskException" /> class.
            </summary>
      <param name="innerExceptions">The unhandled exceptions thrown by the task.</param>
    </member>
    <member name="M:DigitalRune.Threading.TaskException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Threading.TaskException" /> class.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the
            exception being thrown.
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or 
            destination.
            </param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is <see langword="null" />.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:DigitalRune.Threading.TaskException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with
            information about the exception.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the
            exception being thrown.
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or
            destination.
            </param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Threading.TaskException.InnerExceptions">
      <summary>
            Gets an array containing any unhandled exceptions that were thrown by the task.
            </summary>
    </member>
    <member name="T:DigitalRune.Threading.WorkOptions">
      <summary>
            Defines how an <see cref="T:DigitalRune.Threading.IWork" /> instance can be executed.
            </summary>
    </member>
    <member name="F:DigitalRune.Threading.WorkOptions.Default">
      <summary>
            Defines the default options.
            </summary>
    </member>
    <member name="P:DigitalRune.Threading.WorkOptions.DetachFromParent">
      <summary>
            Gets or sets a value indicating whether the work will be created detached from its parent. 
            </summary>
    </member>
    <member name="P:DigitalRune.Threading.WorkOptions.MaximumThreads">
      <summary>
            Gets or sets the maximum number of threads which can concurrently execute this work.
            </summary>
    </member>
    <member name="P:DigitalRune.Threading.WorkOptions.QueueFIFO">
      <summary>
            Gets or sets a value indicating whether this work should be queued in a first-in-first-out 
            order.
            </summary>
    </member>
    <member name="T:DigitalRune.Threading.WorkStealingScheduler">
      <summary>
            A task scheduler that supports "work stealing" to balance tasks across multiple worker 
            threads.
            </summary>
    </member>
    <member name="M:DigitalRune.Threading.WorkStealingScheduler.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:DigitalRune.Threading.WorkStealingScheduler" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Threading.WorkStealingScheduler.#ctor(System.Int32)">
      <summary>
            Creates a new instance of the <see cref="T:DigitalRune.Threading.WorkStealingScheduler" /> class.
            </summary>
      <param name="numThreads">The number of threads to create.</param>
    </member>
    <member name="M:DigitalRune.Threading.WorkStealingScheduler.Schedule(DigitalRune.Threading.Task)">
      <summary>
            Schedules a task for execution.
            </summary>
      <param name="task">The task to schedule.</param>
    </member>
    <member name="T:DigitalRune.Undo.IUndoableOperation">
      <summary>
            Represents an operation that supports Undo/Redo.
            </summary>
    </member>
    <member name="P:DigitalRune.Undo.IUndoableOperation.Description">
      <summary>
            Gets the description of the operation.
            </summary>
    </member>
    <member name="M:DigitalRune.Undo.IUndoableOperation.Do">
      <summary>
            Performs/Redoes operation.
            </summary>
    </member>
    <member name="M:DigitalRune.Undo.IUndoableOperation.Undo">
      <summary>
            Undoes operation.
            </summary>
    </member>
    <member name="T:DigitalRune.Undo.UndoBuffer">
      <summary>
            Implements an undo/redo buffer.
            </summary>
    </member>
    <member name="M:DigitalRune.Undo.UndoBuffer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Undo.UndoBuffer" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Undo.UndoBuffer.AcceptChanges">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:DigitalRune.Undo.UndoBuffer" /> accepts changes.
            </summary>
    </member>
    <member name="M:DigitalRune.Undo.UndoBuffer.Add(DigitalRune.Undo.IUndoableOperation)">
      <summary>
            Adds an operation to the undo buffer.
            </summary>
      <param name="operation">The operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operation" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Undo.UndoBuffer.BeginUndoGroup">
      <summary>
            Begins a new undo group.
            </summary>
    </member>
    <member name="P:DigitalRune.Undo.UndoBuffer.CanRedo">
      <summary>
            Gets a value indicating whether there are operations on the redo stack.
            </summary>
    </member>
    <member name="P:DigitalRune.Undo.UndoBuffer.CanUndo">
      <summary>
            Gets a value indicating whether there are operations on the undo stack.
            </summary>
    </member>
    <member name="M:DigitalRune.Undo.UndoBuffer.ClearAll">
      <summary>
            Clears the undo buffer.
            </summary>
    </member>
    <member name="M:DigitalRune.Undo.UndoBuffer.EndUndoGroup(System.Object)">
      <summary>
            Ends an undo group and puts the group of operations onto the <see cref="T:DigitalRune.Undo.UndoBuffer" />.
            </summary>
      <param name="groupDescription">
            The description of the undo group. See <see cref="P:DigitalRune.Undo.IUndoableOperation.Description" /> for a
            more detailed description. (The parameter is ignored if this is a nested undo group.)
            </param>
      <exception cref="T:System.InvalidOperationException">
            There are no undo groups. (<see cref="M:DigitalRune.Undo.UndoBuffer.BeginUndoGroup" /> has not been called.)
            </exception>
    </member>
    <member name="P:DigitalRune.Undo.UndoBuffer.IsUndoGroupOpen">
      <summary>
            Gets a value indicating whether an undo group is open.
            </summary>
    </member>
    <member name="M:DigitalRune.Undo.UndoBuffer.OnOperationRedone">
      <summary>
            Raises the <see cref="E:DigitalRune.Undo.UndoBuffer.OperationRedone" /> event.
            </summary>
    </member>
    <member name="M:DigitalRune.Undo.UndoBuffer.OnOperationUndone">
      <summary>
            Raises the <see cref="E:DigitalRune.Undo.UndoBuffer.OperationUndone" /> event.
            </summary>
    </member>
    <member name="M:DigitalRune.Undo.UndoBuffer.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Undo.UndoBuffer.PropertyChanged" /> event.
            </summary>
      <param name="eventArgs">
            The <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> describing the property that has changed.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eventArgs" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="E:DigitalRune.Undo.UndoBuffer.OperationRedone">
      <summary>
            Occurs after an operation is redone.
            </summary>
    </member>
    <member name="E:DigitalRune.Undo.UndoBuffer.OperationUndone">
      <summary>
            Occurs after an operation is undone.
            </summary>
    </member>
    <member name="E:DigitalRune.Undo.UndoBuffer.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="M:DigitalRune.Undo.UndoBuffer.Redo">
      <summary>
            Redoes the last undone operation.
            </summary>
    </member>
    <member name="P:DigitalRune.Undo.UndoBuffer.RedoStack">
      <summary>
            Gets the redo stack.
            </summary>
    </member>
    <member name="P:DigitalRune.Undo.UndoBuffer.SizeLimit">
      <summary>
            Gets or sets the max number of undo steps stored in the undo buffer.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Undo.UndoBuffer.Undo">
      <summary>
            Undoes the last operation.
            </summary>
    </member>
    <member name="P:DigitalRune.Undo.UndoBuffer.UndoStack">
      <summary>
            Gets the undo stack.
            </summary>
    </member>
  </members>
</doc>