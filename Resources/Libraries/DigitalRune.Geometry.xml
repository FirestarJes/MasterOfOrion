<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>DigitalRune.Geometry</name>
  </assembly>
  <members>
    <member name="T:DigitalRune.Geometry.DirectionalLookupTableF`1">
      <summary>
            Stores data that is accessed using a direction vector instead of indices. (Single-precision)
            </summary>
      <typeparam name="T">The type of data stored in the lookup table.</typeparam>
    </member>
    <member name="M:DigitalRune.Geometry.DirectionalLookupTableF`1.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.DirectionalLookupTableF`1" /> class.
            </summary>
      <param name="width">The width of the cube map faces.</param>
    </member>
    <member name="M:DigitalRune.Geometry.DirectionalLookupTableF`1.GetSampleDirections">
      <summary>
            Gets the sample directions.
            </summary>
      <returns>The sample directions.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.DirectionalLookupTableF`1.Item(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets or sets the data associated with the specified direction.
            </summary>
    </member>
    <member name="T:DigitalRune.Geometry.GeometricObject">
      <summary>
            Defines an object that has a <see cref="P:DigitalRune.Geometry.GeometricObject.Shape" /> and a <see cref="P:DigitalRune.Geometry.GeometricObject.Pose" /> (position and 
            orientation). (Default implementation of <see cref="T:DigitalRune.Geometry.IGeometricObject" />.)
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.GeometricObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.GeometricObject" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.GeometricObject.#ctor(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.GeometricObject" /> class with a shape.
            </summary>
      <param name="shape">
            The shape (must not be <see langword="null" />). See property <see cref="P:DigitalRune.Geometry.GeometricObject.Shape" /> for more 
            details.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="shape" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.GeometricObject.#ctor(DigitalRune.Geometry.Shapes.Shape,DigitalRune.Geometry.Pose)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.GeometricObject" /> class with shape and pose
            (position and orientation).
            </summary>
      <param name="shape">
            The shape (must not be <see langword="null" />). See property <see cref="P:DigitalRune.Geometry.GeometricObject.Shape" /> for more 
            details.
            </param>
      <param name="pose">The pose (position and orientation).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="shape" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.GeometricObject.#ctor(DigitalRune.Geometry.Shapes.Shape,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.GeometricObject" /> class with shape and scale.
            </summary>
      <param name="shape">
            The shape (must not be <see langword="null" />). See property <see cref="P:DigitalRune.Geometry.GeometricObject.Shape" /> for more
            details.
            </param>
      <param name="scale">The scale.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="shape" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.GeometricObject.#ctor(DigitalRune.Geometry.Shapes.Shape,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.GeometricObject" /> class with shape, scale and 
            pose (position and orientation).
            </summary>
      <param name="shape">
            The shape (must not be <see langword="null" />). See property <see cref="P:DigitalRune.Geometry.GeometricObject.Shape" /> for more
            details.
            </param>
      <param name="scale">The scale.</param>
      <param name="pose">The pose (position and orientation).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="shape" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.GeometricObject.Aabb">
      <summary>
            Gets the axis-aligned bounding box (AABB).
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.GeometricObject.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Geometry.GeometricObject" /> that is a clone (deep copy) of the current 
            instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Geometry.GeometricObject" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometricObject.CloneCore(DigitalRune.Geometry.GeometricObject)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.GeometricObject" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.GeometricObject.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Geometry.GeometricObject" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometricObject.OnPoseChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Geometry.GeometricObject.PoseChanged" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:System.EventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="M:DigitalRune.Geometry.GeometricObject.OnShapeChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Geometry.GeometricObject.ShapeChanged" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="P:DigitalRune.Geometry.GeometricObject.Pose">
      <summary>
            Gets or sets the pose (position and orientation).
            </summary>
    </member>
    <member name="E:DigitalRune.Geometry.GeometricObject.PoseChanged">
      <summary>
            Occurs when the <see cref="P:DigitalRune.Geometry.IGeometricObject.Pose" /> was changed.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.GeometricObject.Scale">
      <summary>
            Gets or sets the scale.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.GeometricObject.Shape">
      <summary>
            Gets or sets the shape.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="E:DigitalRune.Geometry.GeometricObject.ShapeChanged">
      <summary>
            Occurs when the <see cref="P:DigitalRune.Geometry.IGeometricObject.Shape" /> or <see cref="P:DigitalRune.Geometry.IGeometricObject.Scale" /> was changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.GeometricObject.System#ICloneable#Clone">
      <summary>
            Creates a new object that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new object that is a clone (deep copy) of this instance.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.GeometryException">
      <summary>
            The exception that is thrown when an error in the geometry library occurs.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.GeometryException" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.GeometryException" /> class with serialized 
            data.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the 
            exception being thrown.
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or 
            destination.
            </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0). 
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The info parameter is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.GeometryException" /> class with a specified 
            error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.GeometryException" /> class with a specified 
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">
            The exception that is the cause of the current exception, or <see langword="null" /> if no 
            inner exception is specified.
            </param>
    </member>
    <member name="T:DigitalRune.Geometry.GeometryHelper">
      <summary>
            Provides helper methods for various geometry tasks.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.ArePointsOnOppositeSides(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Determines whether two points P and Q are on opposite sides of a plane. The plane is
            determined by three points (A, B, C).
            </summary>
      <param name="pointP">The point P.</param>
      <param name="pointQ">The point Q.</param>
      <param name="planePointA">The plane point A.</param>
      <param name="planePointB">The plane point B.</param>
      <param name="planePointC">The plane point C.</param>
      <returns>
        <see langword="true" /> if P and Q are on opposite sides; <see langword="false" /> if they are
            on the same side; and <see langword="null" /> if the point is on the plane (within a 
            numerical tolerance) or if the case is degenerate (A, B, C does not form a valid triangle).
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.ComputeBoundingBox(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Geometry.Pose@)">
      <summary>
            Computes the minimum box that contains the given points.
            </summary>
      <param name="points">The points.</param>
      <param name="extent">The box extent (the size in x, y and z).</param>
      <param name="pose">The pose of the box.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="points" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="points" /> is empty.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.ComputeBoundingCapsule(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Single@,System.Single@,DigitalRune.Geometry.Pose@)">
      <summary>
            Computes a tight-fitting capsule that contains the given points.
            </summary>
      <param name="points">The points.</param>
      <param name="radius">The radius of the capsule.</param>
      <param name="height">The height of the capsule.</param>
      <param name="pose">The pose of the capsule.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="points" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="points" /> is empty.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.ComputeBoundingSphere(System.Collections.Generic.IEnumerable{DigitalRune.Mathematics.Algebra.Vector3F},System.Single@,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Computes the minimum sphere that contains the given points.
            </summary>
      <param name="points">The points.</param>
      <param name="radius">The radius of the sphere.</param>
      <param name="center">The center of the sphere.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="points" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="points" /> is empty.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.ComputeCircumscribedSphere(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,System.Single@,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Computes a sphere where all given points touch the surface.
            </summary>
      <param name="point0">The first point.</param>
      <param name="point1">The second point.</param>
      <param name="point2">The third point.</param>
      <param name="point3">The fourth point.</param>
      <param name="radius">The sphere radius.</param>
      <param name="center">The sphere center.</param>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.ComputeCircumscribedSphere(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,System.Single@,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Computes a sphere where all given points touch the surface.
            </summary>
      <param name="point0">The first point.</param>
      <param name="point1">The second point.</param>
      <param name="point2">The third point.</param>
      <param name="radius">The sphere radius.</param>
      <param name="center">The sphere center.</param>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.ComputeCircumscribedSphere(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,System.Single@,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Computes a sphere where all given points touch the surface.
            </summary>
      <param name="point0">The first point.</param>
      <param name="point1">The second point.</param>
      <param name="radius">The sphere radius.</param>
      <param name="center">The sphere center.</param>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.CreateBoundingShape(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F})">
      <summary>
            Computes a minimum bounding shape that contains all given points.
            </summary>
      <param name="points">The points.</param>
      <returns>A minimum bounding shape that contains all given points.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="points" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="points" /> is empty.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.CreateConvexHull(System.Collections.Generic.IEnumerable{DigitalRune.Mathematics.Algebra.Vector3F})">
      <summary>
            Creates a convex hull mesh for a set of points.
            </summary>
      <param name="points">The points.</param>
      <returns>
            The mesh of the convex hull or <see langword="null" /> if the point list
            is <see langword="null" /> or empty.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.CreateConvexHull(System.Collections.Generic.IEnumerable{DigitalRune.Mathematics.Algebra.Vector3F},System.Int32,System.Single)">
      <summary>
            Creates a convex hull mesh for a set of points.
            </summary>
      <param name="points">The points.</param>
      <param name="vertexLimit">
            The vertex limit. Must be greater than 0. Common values are 32 or 64.
            </param>
      <param name="skinWidth">
            The skin width. Common values are 0.01 or 0.001.
            </param>
      <returns>
            The mesh of the convex hull or <see langword="null" /> if the point list is 
            <see langword="null" /> or empty.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.CreateIcosphere(System.Int32,System.Boolean)">
      <summary>
            Creates a sphere (or hemisphere) by successively subdividing an icosahedron.
            </summary>
      <param name="subdivisions">The number of subdivisions. See remarks.</param>
      <param name="hemisphere">
            If set to <see langword="true" /> only the upper half (positive y) of the sphere is created;
            otherwise, the full sphere is created.
            </param>
      <returns>The triangle mesh of the sphere (or hemisphere).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="subdivisions" /> is negative.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hemisphere" /> is <see langword="true" />, but <paramref name="subdivisions" />
            is less than 1. At least 1 subdivision is required to create a hemisphere.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.ExtractPlanes(DigitalRune.Mathematics.Algebra.Matrix44F,System.Collections.Generic.IList{DigitalRune.Geometry.Shapes.Plane},System.Boolean)">
      <summary>
            Extracts the viewing frustum planes of a world-view-projection matrix. 
            </summary>
      <param name="projection">The world-view-projection matrix (DirectX standard).</param>
      <param name="planes">
            IN: An empty list of planes.
            OUT: The planes that define the shape. The plane normals are pointing outwards.
            </param>
      <param name="normalize">
        <see langword="true" /> if the planes should be normalized; otherwise 
            <see langword="false" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="planes" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.ExtractPlanes(Microsoft.Xna.Framework.Matrix,System.Collections.Generic.IList{DigitalRune.Geometry.Shapes.Plane},System.Boolean)">
      <summary>
            Extracts the viewing frustum planes of a world-view-projection matrix. 
            (Only available in the XNA-compatible build.)
            </summary>
      <param name="projection">The projection matrix (DirectX standard).</param>
      <param name="planes">
            IN: An empty list of planes.
            OUT: The planes that define the shape. The plane normals are pointing outwards.
            </param>
      <param name="normalize">
        <see langword="true" /> if the planes should be normalized; otherwise 
            <see langword="false" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="planes" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.GetBarycentricFromPoint(DigitalRune.Geometry.Shapes.Triangle,DigitalRune.Mathematics.Algebra.Vector3F,System.Single@,System.Single@,System.Single@)">
      <summary>
            Gets the barycentric coordinates of a point and a triangle.
            </summary>
      <param name="triangle">The triangle.</param>
      <param name="point">The point.</param>
      <param name="u">The barycentric coordinate u.</param>
      <param name="v">The barycentric coordinate v.</param>
      <param name="w">The barycentric coordinate w.</param>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.GetClosestPoint(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Gets the point on or in an axis-aligned bounding box (AABB) that is closest to a given 
            point.
            </summary>
      <param name="aabb">The AABB.</param>
      <param name="point">The point.</param>
      <param name="pointOnAabb">
            The point on or in <paramref name="aabb" /> that is closest to <paramref name="point" />.
            </param>
      <returns>
        <see langword="true" /> if the <paramref name="aabb" /> and <paramref name="point" /> have 
            contact (<paramref name="pointOnAabb" /> is identical to <paramref name="point" />); 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.GetClosestPoint(DigitalRune.Geometry.Shapes.Line,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Gets the closest point of a line to a point.
            </summary>
      <param name="point">The point.</param>
      <param name="line">The line.</param>
      <param name="closestPointOnLine">
            The point on the line that is closest to <paramref name="point" />.
            </param>
      <returns>
        <see langword="true" /> if the <paramref name="point" /> is on the line.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.GetClosestPoint(DigitalRune.Geometry.Shapes.Plane,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Gets the point on a plane surface that is closest to a given point.
            </summary>
      <param name="point">The point position.</param>
      <param name="plane">The plane.</param>
      <param name="pointOnPlane">
            The point on the surface of the plane that is closest to <paramref name="point" />.
            </param>
      <returns>
        <see langword="true" /> if the point lies in the plane (<paramref name="pointOnPlane" /> and 
            <paramref name="point" /> are numerically identical); otherwise <see langword="false" /> if 
            the point is either above or below the plane.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.GetClosestPoint(DigitalRune.Geometry.Shapes.Triangle,DigitalRune.Mathematics.Algebra.Vector3F,System.Single@,System.Single@,System.Single@)">
      <summary>
            Gets the barycentric coordinates (<paramref name="u" />, <paramref name="v" />,
            <paramref name="w" /> of the point in a triangle which is closest to
            the given <paramref name="point" />).
            </summary>
      <param name="triangle">The triangle.</param>
      <param name="point">The point.</param>
      <param name="u">The barycentric coordinate u.</param>
      <param name="v">The barycentric coordinate v.</param>
      <param name="w">The barycentric coordinate w.</param>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.GetClosestPoints(DigitalRune.Geometry.Shapes.Line,DigitalRune.Geometry.Shapes.Line,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Gets the closest points of two lines.
            </summary>
      <param name="line0">The first line.</param>
      <param name="line1">The second line.</param>
      <param name="point0">
            The point on <paramref name="line0" /> that is closest to <paramref name="line1" />.
            </param>
      <param name="point1">
            The point on <paramref name="line1" /> that is closest to <paramref name="line0" />.
            </param>
      <returns>
        <see langword="true" /> if the lines are touching (<paramref name="point0" /> and 
            <paramref name="point1" /> are identical); otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.GetClosestPoints(DigitalRune.Geometry.Shapes.LineSegment,DigitalRune.Geometry.Shapes.Line,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Gets the closest points of a line and a line segment.
            </summary>
      <param name="line">The line.</param>
      <param name="segment">The line segment.</param>
      <param name="pointOnLine">
            The point on <paramref name="line" /> that is closest to <paramref name="segment" />.
            </param>
      <param name="pointOnSegment">
            The point on <paramref name="segment" /> that is closest to <paramref name="line" />.
            </param>
      <returns>
        <see langword="true" /> if the line and the line segment are touching 
            (<paramref name="pointOnLine" /> and <paramref name="pointOnSegment" /> are identical); 
            otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.GetClosestPoints(DigitalRune.Geometry.Shapes.LineSegment,DigitalRune.Geometry.Shapes.LineSegment,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Gets the closest points of two line segments.
            </summary>
      <param name="segment0">The first line segment.</param>
      <param name="segment1">The second line segment.</param>
      <param name="point0">
            The point on <paramref name="segment0" /> that is closest to <paramref name="segment1" />.
            </param>
      <param name="point1">
            The point on <paramref name="segment1" /> that is closest to <paramref name="segment0" />.
            </param>
      <returns>
        <see langword="true" /> if the line segments are touching (<paramref name="point0" /> and 
            <paramref name="point1" /> are identical); otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.GetClosestPoints(DigitalRune.Geometry.Shapes.LineSegment,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Gets the closest point of a line segment to a point.
            </summary>
      <param name="point">The point.</param>
      <param name="lineSegment">The line segment.</param>
      <param name="closestPointOnLineSegment">
            The point on the line segment that is closest to <paramref name="point" />.</param>
      <returns>
        <see langword="true" /> if the <paramref name="point" /> is on the line segment; otherwise 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.GetClosestPoints(DigitalRune.Geometry.Shapes.Plane,DigitalRune.Geometry.Shapes.Line,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Gets the closest points of a line and a plane.
            </summary>
      <param name="plane">The plane.</param>
      <param name="line">The line.</param>
      <param name="pointOnPlane">
            The point on <paramref name="plane" /> that is closest to <paramref name="line" />.
            </param>
      <param name="pointOnLine">
            The point on <paramref name="line" /> that is closest to <paramref name="plane" />.
            </param>
      <returns>
        <see langword="true" /> if the line and the plane are touching 
            (<paramref name="pointOnLine" /> and <paramref name="pointOnPlane" /> are identical); 
            otherwise <see langword="false" /></returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.GetClosestPoints(DigitalRune.Geometry.Shapes.Plane,DigitalRune.Geometry.Shapes.LineSegment,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Gets the closest points of a line and a plane.
            </summary>
      <param name="plane">The plane.</param>
      <param name="lineSegment">The line segment.</param>
      <param name="pointOnPlane">
            The point on <paramref name="plane" /> that is closest to <paramref name="lineSegment" />.
            </param>
      <param name="pointOnLineSegment">
            The point on <paramref name="lineSegment" /> that is closest to <paramref name="plane" />.
            </param>
      <returns>
        <see langword="true" /> if the line segment and the plane are touching 
            (<paramref name="pointOnLineSegment" /> and <paramref name="pointOnPlane" /> are identical);
            otherwise <see langword="false" /></returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.GetContact(DigitalRune.Geometry.Shapes.Ray,DigitalRune.Geometry.Shapes.Triangle,System.Boolean,System.Single@)">
      <summary>
            Computes the ray vs. triangle contact.
            </summary>
      <param name="triangle">The triangle.</param>
      <param name="isTwoSided">
            if set to <see langword="true" /> the triangle is treated as a two-sided triangle. Ray
            contacts with the back-side of a one-sided triangle are not reported.
            </param>
      <param name="ray">The ray.</param>
      <param name="hitDistance">
            The hit distance. This is the distance on the ray from the ray origin to the contact point.
            </param>
      <returns>
        <see langword="true" /> if the ray hits the front side of the triangle;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.GetDistance(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Aabb)">
      <summary>
            Computes the distance between the two axis-aligned bounding boxes (AABBs).
            </summary>
      <param name="aabbA">The first AABB.</param>
      <param name="aabbB">The second AABB.</param>
      <returns>
            The distance between the two AABBs. 0 if the AABB are touching or intersecting.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.GetDistance(DigitalRune.Geometry.Shapes.Plane,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets the distance of a point to a plane surface.
            </summary>
      <param name="point">The point.</param>
      <param name="plane">The plane.</param>
      <returns>
            The distance; this value is positive if the point is in the positive half-space 
            (separation), otherwise negative (penetration).
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.GetIntersection(DigitalRune.Geometry.Shapes.Plane,DigitalRune.Geometry.Shapes.Plane,DigitalRune.Geometry.Shapes.Plane)">
      <summary>
            Gets the intersection point of three planes.
            </summary>
      <param name="planeA">The first plane.</param>
      <param name="planeB">The second plane.</param>
      <param name="planeC">The third plane.</param>
      <returns>
            The point that touches all three planes. (<see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" />, 
            <see cref="F:System.Single.NaN" />) is returned if there is no unique intersection point, for example,
            when two planes are parallel or the planes intersect in a line.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.GetPointFromBarycentric(DigitalRune.Geometry.Shapes.Triangle,System.Single,System.Single,System.Single)">
      <summary>
            Gets the point on the triangle defined by the given barycentric coordinates.
            </summary>
      <param name="triangle">The triangle.</param>
      <param name="u">The barycentric coordinate u.</param>
      <param name="v">The barycentric coordinate v.</param>
      <param name="w">The barycentric coordinate w.</param>
      <returns>
            The point computes as 
              <paramref name="u" /> * <see cref="F:DigitalRune.Geometry.Shapes.Triangle.Vertex0" /> 
              + <paramref name="v" /> * <see cref="F:DigitalRune.Geometry.Shapes.Triangle.Vertex1" /> 
              + <paramref name="w" /> * <see cref="F:DigitalRune.Geometry.Shapes.Triangle.Vertex2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.GetVolume(DigitalRune.Geometry.Meshes.ITriangleMesh)">
      <summary>
            Gets the enclosed volume of a triangle mesh.
            </summary>
      <param name="triangleMesh">The triangle mesh.</param>
      <returns>
            The enclosed volume of the given triangle mesh.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="triangleMesh" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.HaveContact(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Aabb)">
      <summary>
            Determines whether two axis-aligned bounding boxes (AABBs) overlap.
            </summary>
      <param name="aabbA">The first axis-aligned bounding box (AABB).</param>
      <param name="aabbB">The second axis-aligned bounding box (AABB).</param>
      <returns>
        <see langword="true" /> if the AABBs overlap; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.HaveContact(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Determines whether a given AABB is hit by a moving AABB.
            </summary>
      <param name="aabbA">The axis-aligned bounding box.</param>
      <param name="aabbB">The moving axis-aligned bounding box.</param>
      <param name="movementB">
            The movement vector of <paramref name="aabbB" />. <paramref name="aabbB" /> is given at its
            start position. The movement vector is added to the start position of 
            <paramref name="aabbB" /> to define its end position. 
            </param>
      <returns>
        <see langword="true" /> if the moving AABB (<paramref name="aabbB" />) overlaps the static
            AABB (<paramref name="aabbA" />) at any time during its movement.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.HaveContact(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Ray)">
      <summary>
            Determines whether the given axis-aligned bounding box (AABB) and ray overlap.
            </summary>
      <param name="aabb">The axis-aligned bounding box (AABB).</param>
      <param name="ray">The ray.</param>
      <returns>
        <see langword="true" /> if the AABB and the ray have a contact; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.HaveContact(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Ray,System.Single)">
      <summary>
            Determines whether the given axis-aligned bounding box (AABB) and ray overlap.
            </summary>
      <param name="aabb">The axis-aligned bounding box (AABB).</param>
      <param name="ray">The ray.</param>
      <param name="epsilon">
            A small epsilon value by which the AABB is extended to avoid missing contacts because of
            numerical problems. (Especially in ray vs. triangle mesh tests, we do not want to miss
            collisions between triangle.)
            </param>
      <returns>
        <see langword="true" /> if the AABB and the ray have a contact; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.HaveContact(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Determines whether the axis-aligned bounding box (AABB) contains or touches the given point.
            </summary>
      <param name="aabb">The axis-aligned bounding box (AABB).</param>
      <param name="point">The point.</param>
      <returns>
        <see langword="true" /> if AABB and the point have contact; otherwise 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.HaveContact(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,System.Boolean)">
      <summary>
            Determines whether the axis-aligned bounding box (AABB) and a box have contact.
            </summary>
      <param name="aabb">The axis-aligned bounding box (AABB).</param>
      <param name="boxExtent">The box extent (the widths in x, y, and z).</param>
      <param name="boxPose">The pose of the box in the space of the AABB.</param>
      <param name="makeEdgeTests">
            If set to <see langword="true" /> the 9 edge-edge tests of the separating-axis-test (SAT) are 
            performed; otherwise, the edge-edge tests are left out and the returned value is 
            conservative, which means that a contact can be reported even if there is no contact.
            </param>
      <returns>
        <see langword="true" /> if the AABB and the box are touching or penetrating; otherwise, 
            <see langword="false" /> if the object are separated.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.HaveContact(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Determines whether the specified point is inside the box.
            </summary>
      <param name="boxExtent">The box extent (the widths in x, y, and z).</param>
      <param name="point">The point (in the local space of the box).</param>
      <returns>
        <see langword="true" /> if the specified point is inside; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.HaveContact(System.Single,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Determines whether the specified point is inside the sphere.
            </summary>
      <param name="sphereRadius">The sphere radius.</param>
      <param name="point">The point (in the local space of the sphere).</param>
      <returns>
        <see langword="true" /> if the specified point is inside; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.IsInFront(DigitalRune.Geometry.Shapes.Triangle,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Determines whether the point is in front of the triangle.
            </summary>
      <param name="triangle">The triangle.</param>
      <param name="point">The point.</param>
      <returns>
            A value greater than 0 if the point is in front. A value less than 0 if the point is on the
            back-side.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.GeometryHelper.IsOver(DigitalRune.Geometry.Shapes.Triangle,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Determines whether the projection of a point (into the triangle plane) is inside the given
            triangle.
            </summary>
      <param name="triangle">The triangle.</param>
      <param name="point">The point.</param>
      <returns>
        <see langword="true" /> if the orthogonal projection of <paramref name="point" /> is inside 
            the triangle; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.IGeometricObject">
      <summary>
            Defines an object that has a <see cref="P:DigitalRune.Geometry.IGeometricObject.Shape" /> and a <see cref="P:DigitalRune.Geometry.IGeometricObject.Pose" /> (position and 
            orientation).
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.IGeometricObject.Aabb">
      <summary>
            Gets the axis-aligned bounding box (AABB).
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.IGeometricObject.Pose">
      <summary>
            Gets the pose (position and orientation).
            </summary>
    </member>
    <member name="E:DigitalRune.Geometry.IGeometricObject.PoseChanged">
      <summary>
            Occurs when the <see cref="P:DigitalRune.Geometry.IGeometricObject.Pose" /> was changed.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.IGeometricObject.Scale">
      <summary>
            Gets the scale.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.IGeometricObject.Shape">
      <summary>
            Gets the shape.
            </summary>
    </member>
    <member name="E:DigitalRune.Geometry.IGeometricObject.ShapeChanged">
      <summary>
            Occurs when the <see cref="P:DigitalRune.Geometry.IGeometricObject.Shape" /> or <see cref="P:DigitalRune.Geometry.IGeometricObject.Scale" /> was changed.
            </summary>
    </member>
    <member name="T:DigitalRune.Geometry.Pose">
      <summary>
            A pose defines the position and orientation of a shape in world space (or the parent 
            coordinate space).
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.#ctor(DigitalRune.Mathematics.Algebra.Matrix33F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Pose" /> class from orientation.
            </summary>
      <param name="orientation">The orientation.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.#ctor(DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Pose" /> class from orientation.
            </summary>
      <param name="orientation">The orientation.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.#ctor(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Pose" /> class from position.
            </summary>
      <param name="position">The position.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Matrix33F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Pose" /> class from position and orientation.
            </summary>
      <param name="position">The position.</param>
      <param name="orientation">The orientation.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Pose" /> class from position and orientation.
            </summary>
      <param name="position">The position.</param>
      <param name="orientation">The orientation.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.Equals(DigitalRune.Geometry.Pose)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and
            represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.FromMatrix(DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Creates a <see cref="T:DigitalRune.Geometry.Pose" /> from a matrix that contains a translation and a rotation.
            </summary>
      <param name="poseMatrix">The pose matrix.</param>
      <returns>A pose that represents the same transformation as the 4x4-matrix.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.FromMatrix(Microsoft.Xna.Framework.Matrix)">
      <summary>
            Creates a <see cref="T:DigitalRune.Geometry.Pose" /> from a <see cref="T:Microsoft.Xna.Framework.Matrix" /> (XNA Framework) that contains a 
            translation and a rotation. (Only available in the XNA-compatible build.)
            </summary>
      <param name="poseMatrix">The pose matrix.</param>
      <returns>A pose that represents the same transformation as the 4x4-matrix.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Pose.HasRotation">
      <summary>
            Gets a value indicating whether the orientation is not the default rotation.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Pose.HasTranslation">
      <summary>
            Gets a value indicating whether the position is not 0.
            </summary>
    </member>
    <member name="F:DigitalRune.Geometry.Pose.Identity">
      <summary>
            A pose with no translation and no rotation.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.Interpolate(DigitalRune.Geometry.Pose,DigitalRune.Geometry.Pose,System.Single)">
      <summary>
            Interpolates two poses.
            </summary>
      <param name="startPose">The start pose.</param>
      <param name="endPose">The end pose.</param>
      <param name="parameter">
            The interpolation parameter. If the value is 0, the <paramref name="startPose" /> is
            returned. If the value is 1, the <paramref name="endPose" /> is returned. For values between
            0 and 1 an interpolated pose is returned.
            </param>
      <returns>
            An interpolated pose.
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Pose.Inverse">
      <summary>
            Gets the inverse of this pose.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.Invert">
      <summary>
            Inverts the pose.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.IsValid(DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Determines whether the specified matrix is a valid pose matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>
        <see langword="true" /> if the specified matrix is a valid pose matrix; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.Multiply(DigitalRune.Geometry.Pose,DigitalRune.Geometry.Pose)">
      <summary>
            Multiplies two poses.
            </summary>
      <param name="p1">The first pose p1.</param>
      <param name="p2">The second pose p2.</param>
      <returns>The multiplication of p1 and p2: p1 * p2.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.Multiply(DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Multiplies the pose with a vector.
            </summary>
      <param name="pose">The pose.</param>
      <param name="vector">The vector.</param>
      <returns>The transformed vector.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.op_Equality(DigitalRune.Geometry.Pose,DigitalRune.Geometry.Pose)">
      <summary>
            Compares two <see cref="T:DigitalRune.Geometry.Pose" />s to determine whether they are the same.
            </summary>
      <param name="pose1">The first pose.</param>
      <param name="pose2">The second pose.</param>
      <returns>
        <see langword="true" /> if the poses are equal; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.op_Implicit(DigitalRune.Geometry.Pose)~Microsoft.Xna.Framework.Matrix">
      <summary>
            Converts a pose to a 4x4 transformation matrix (XNA Framework). (Only available in the 
            XNA-compatible build.)
            </summary>
      <param name="pose">The pose.</param>
      <returns>
            A 4x4-matrix that represents the same transformation as the pose.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.op_Implicit(DigitalRune.Geometry.Pose)~DigitalRune.Mathematics.Algebra.Matrix44F">
      <summary>
            Converts a pose to a 4x4 transformation matrix.
            </summary>
      <param name="pose">The pose.</param>
      <returns>
            A 4x4-matrix that represents the same transformation as the pose.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.op_Inequality(DigitalRune.Geometry.Pose,DigitalRune.Geometry.Pose)">
      <summary>
            Compares two <see cref="T:DigitalRune.Geometry.Pose" />s to determine whether they are different.
            </summary>
      <param name="pose1">The first pose.</param>
      <param name="pose2">The second pose.</param>
      <returns>
        <see langword="true" /> if the poses are different; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.op_Multiply(DigitalRune.Geometry.Pose,DigitalRune.Geometry.Pose)">
      <summary>
            Multiplies two poses.
            </summary>
      <param name="p1">The first pose p1.</param>
      <param name="p2">The second pose p2.</param>
      <returns>The product of p1 and p2: p1 * p2.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.op_Multiply(DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Multiplies the pose with a vector.
            </summary>
      <param name="pose">The pose.</param>
      <param name="vector">The vector.</param>
      <returns>The transformed vector.</returns>
    </member>
    <member name="F:DigitalRune.Geometry.Pose.Orientation">
      <summary>
            The orientation.
            </summary>
    </member>
    <member name="F:DigitalRune.Geometry.Pose.Position">
      <summary>
            The position.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.ToLocalDirection(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Converts a direction vector from world space (or the parent space for nested coordinate 
            spaces) to local space.
            </summary>
      <param name="worldDirection">
            The direction vector in world space (or the parent space for nested coordinate spaces).
            </param>
      <returns>The direction in local space.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.ToLocalPosition(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Converts a direction vector from world space (or the parent space for nested coordinate 
            spaces) to local space.
            </summary>
      <param name="worldPosition">
            The position vector in world space (or the parent space for nested coordinate spaces).
            </param>
      <returns>The position in local space.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.ToMatrix44F">
      <summary>
            Converts this pose to a 4x4 transformation matrix.
            </summary>
      <returns>
            A 4x4-matrix that represents the same transformation as the pose.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.ToString">
      <summary>
            Returns the string representation of this pose.
            </summary>
      <returns>
            The string representation of this pose.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of this pose using the specified culture-specific format
            information.
            </summary>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of this pose.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.ToWorldDirection(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Converts a direction vector from local space to world space (or the parent space for nested 
            coordinate spaces).
            </summary>
      <param name="localDirection">The local direction.</param>
      <returns>
            The direction in world space (or the parent space for nested coordinate spaces).
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.ToWorldPosition(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Converts a position vector from local space to world space (or the parent space for nested 
            coordinate spaces).
            </summary>
      <param name="localPosition">The local position.</param>
      <returns>
            The position in world space (or the parent space for nested coordinate spaces).
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Pose.ToXna">
      <summary>
            Converts a pose to a 4x4 transformation matrix (XNA Framework). (Only available in the 
            XNA-compatible build.)
            </summary>
      <returns>
            A 4x4-matrix that represents the same transformation as the pose.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.CollisionAlgorithmMatrix">
      <summary>
            A matrix which assigns a <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> to each pair of <see cref="T:DigitalRune.Geometry.Shapes.Shape" /> 
            types.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionAlgorithmMatrix.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.CollisionAlgorithmMatrix" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionAlgorithmMatrix.Item(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Gets or sets the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> for the specified collision objects.
            </summary>
      <param name="objectA">The first collision object.</param>
      <param name="objectB">The second collision object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            No <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> is registered for the given shape pair.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionAlgorithmMatrix.Item(DigitalRune.Geometry.Collisions.ContactSet)">
      <summary>
            Gets or sets the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> for the pair of collision objects.
            </summary>
      <param name="pair">A contact set containing a pair of collision objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pair" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            No <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> is registered for the given shape pair.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionAlgorithmMatrix.Item(DigitalRune.Geometry.IGeometricObject,DigitalRune.Geometry.IGeometricObject)">
      <summary>
            Gets or sets the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> for the specified geometric objects.
            </summary>
      <param name="geometricObjectA">The first geometric object.</param>
      <param name="geometricObjectB">The second geometric object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometricObjectA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometricObjectB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            No <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> is registered for the given shape pair.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionAlgorithmMatrix.Item(DigitalRune.Geometry.Shapes.Shape,DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Gets or sets the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> for the specified shape types.
            </summary>
      <param name="shapeA">The first shape.</param>
      <param name="shapeB">The second shape.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="shapeA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="shapeB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            No <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> is registered for the given shape pair.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionAlgorithmMatrix.Item(System.Type,System.Type)">
      <summary>
            Gets or sets the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> for the specified
            shape types.
            </summary>
      <param name="typeA">The first shape type.</param>
      <param name="typeB">The second shape type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            No <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> is registered for the given shape pair.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.CollisionDetection">
      <summary>
            Provides methods and settings for collision detection.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionDetection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.CollisionDetection" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionDetection.AlgorithmMatrix">
      <summary>
            Gets the collision algorithm matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionDetection.CollisionFilter">
      <summary>
            Gets or sets the collision filter for contact queries.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionDetection.ContactFilter">
      <summary>
            Gets or sets the contact filter.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionDetection.ContactPositionTolerance">
      <summary>
            Gets or sets the contact position tolerance.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionDetection.ContinuousCollisionDetectionMode">
      <summary>
            Gets or sets the mode of the continuous collision detection.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionDetection.Epsilon">
      <summary>
            Gets or sets the collision epsilon (numerical tolerance value).
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionDetection.FullContactSetPerFrame">
      <summary>
            Gets or sets a value indicating whether the full contact set should be found per frame.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionDetection.GetClosestPoints(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Computes the closest points between two <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />s.
            </summary>
      <param name="objectA">The first collision object.</param>
      <param name="objectB">The second collision object.</param>
      <returns>
            The <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" /> with the closest-point information. The 
            <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />will have exactly 1 <see cref="T:DigitalRune.Geometry.Collisions.Contact" /> (describing the
            closest-point pair).
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionDetection.GetContacts(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Computes the contacts between two <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />s.
            </summary>
      <param name="objectA">The first collision object.</param>
      <param name="objectB">The second collision object.</param>
      <returns>
            A <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" /> describing the contact information if <paramref name="objectA" />
            and <paramref name="objectB" /> are intersecting; otherwise, <see langword="null" /> if the
            objects are separated.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionDetection.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
      <summary>
            Gets the time of impact between two moving objects.
            </summary>
      <param name="objectA">The object A.</param>
      <param name="targetPoseA">The target pose of A.</param>
      <param name="objectB">The object B.</param>
      <param name="targetPoseB">The target pose of B.</param>
      <param name="allowedPenetration">
            The allowed penetration. A positive allowed penetration value makes sure that the objects 
            have a measurable contact at the time of impact.
            </param>
      <returns>The time of impact in the range [0, 1].</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> or <paramref name="objectB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionDetection.HaveAabbContact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Returns <see langword="true" /> if the axis-aligned bounding boxes (AABBs) of two
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />s are in contact.
            </summary>
      <param name="objectA">The first collision object.</param>
      <param name="objectB">The second collision object.</param>
      <returns>
        <see langword="true" /> if the objects' AABBs are touching or intersecting; otherwise
            <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionDetection.HaveContact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Returns <see langword="true" /> if two <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />s are in contact.
            </summary>
      <param name="objectA">The first collision object.</param>
      <param name="objectB">The second collision object.</param>
      <returns>
        <see langword="true" /> if the object are touching or intersecting; otherwise 
            <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionDetection.UpdateClosestPoints(DigitalRune.Geometry.Collisions.ContactSet,System.Single)">
      <summary>
            Updates the closest-point information in the given contact set.
            </summary>
      <param name="contactSet">
            The contact set containing the last known closest-point information.
            </param>
      <param name="deltaTime">
            The time step size in seconds. (The elapsed simulation time since 
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetection.UpdateClosestPoints(DigitalRune.Geometry.Collisions.ContactSet,System.Single)" /> or <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetection.UpdateContacts(DigitalRune.Geometry.Collisions.ContactSet,System.Single)" /> was last called for this
            contact set.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contactSet" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionDetection.UpdateContacts(DigitalRune.Geometry.Collisions.ContactSet,System.Single)">
      <summary>
            Updates the contact information in the given contact set.
            </summary>
      <param name="contactSet">The contact set containing the last known contacts.</param>
      <param name="deltaTime">
            The time step size in seconds. (The elapsed simulation time since 
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetection.UpdateClosestPoints(DigitalRune.Geometry.Collisions.ContactSet,System.Single)" /> or <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetection.UpdateContacts(DigitalRune.Geometry.Collisions.ContactSet,System.Single)" /> was last called for this
            contact set.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contactSet" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.CollisionDomain">
      <summary>
            A collision domain that manages collision objects.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain" /> class.
            </summary>
      <param name="collisionDetection">
            The collision detection instance that defines the settings (tolerance values,
            collision algorithm matrix, etc.) that this collision domain should use.
            </param>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionDomain.BroadPhase">
      <summary>
            Gets or sets the <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1" /> that is used for the broad phase of
            the collision detection.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionDomain.CollisionDetection">
      <summary>
            Gets the collision detection service.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionDomain.CollisionObjects">
      <summary>
            Gets a collection of collision objects that are managed in this collision domain.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionDomain.ContactSets">
      <summary>
            Gets a collection with all contacts found in the collision domain.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionDomain.EnableMultithreading">
      <summary>
            Gets or sets a value indicating whether multithreading is enabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.GetContactObjects(DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Gets all <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />s that have contact with the given object.
            </summary>
      <param name="collisionObject">The collision object.</param>
      <returns>
            All <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />s that have contact with 
            <paramref name="collisionObject" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.GetContacts(DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Gets all contacts of the given <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />.
            </summary>
      <param name="collisionObject">The collision object.</param>
      <returns>
            All <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />s where <paramref name="collisionObject" /> is involved.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collisionObject" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.GetContacts(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Gets the contacts for the given <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" /> pair.
            </summary>
      <param name="objectA">The first collision object.</param>
      <param name="objectB">The second collision object.</param>
      <returns>
            A <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" /> describing the contact information if <paramref name="objectA" />
            and <paramref name="objectB" /> are intersecting; otherwise, <see langword="null" /> if the
            objects are separated.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.HasContact(DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Determines whether the specified collision object has contact with any other object in the 
            domain.
            </summary>
      <param name="collisionObject">The collision object.</param>
      <returns>
        <see langword="true" /> if the specified collision object touches or penetrates another 
            object in the collision domain; otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collisionObject" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.HaveContact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Determines whether two <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />s have contact.
            </summary>
      <param name="objectA">The first collision object.</param>
      <param name="objectB">The second collision object.</param>
      <returns>
        <see langword="true" /> if the objects are touching or penetrating; otherwise 
            <see langword="false" /> if the objects are separated.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Updates the collision domain and computes the new contact information for a given collision
            object.
            </summary>
      <param name="collisionObject">The collision object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collisionObject" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collisionObject" /> is not in this <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.Single)">
      <summary>
            Updates the collision domain and computes the new contact information.
            </summary>
      <param name="deltaTime">
            The simulation time that has elapsed since the last update in seconds. (The size of the time
            step.)
            </param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.TimeSpan)">
      <summary>
            Updates the collision domain and computes the new contact information.
            </summary>
      <param name="deltaTime">
            The simulation time that has elapsed since the last update. (The size of the time step.)
            </param>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.CollisionFilter">
      <summary>
            A basic collision filter supporting pairwise filtering and collision groups.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionFilter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.CollisionFilter" /> class for max. 32 
            different collision groups.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionFilter.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.CollisionFilter" /> class for the given
            max. number of collision groups.
            </summary>
      <param name="maxNumberOfGroups">
            The maximum number of groups (see <see cref="P:DigitalRune.Geometry.Collisions.CollisionFilter.MaxNumberOfGroups" />).
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxNumberOfGroups" /> is negative.
            </exception>
    </member>
    <member name="E:DigitalRune.Geometry.Collisions.CollisionFilter.Changed">
      <summary>
            Occurs when the filter rules were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionFilter.Filter(DigitalRune.Collections.Pair{DigitalRune.Geometry.Collisions.CollisionObject})">
      <summary>
            Determines whether the given <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />s can collide.
            </summary>
      <param name="pair">The pair of collision objects.</param>
      <returns>
        <see langword="true" /> if the pair of collision objects can collide; otherwise, 
            <see langword="false" /> if the objects cannot collide.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionFilter.Get(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Returns <see langword="true" /> if collisions between two <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />s are
            enabled (without testing collision groups).
            </summary>
      <param name="objectA">The first collision object.</param>
      <param name="objectB">The second collision object.</param>
      <returns>
        <see langword="true" /> if collisions between the given <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" /> pair 
            are enabled; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionFilter.Get(System.Int32)">
      <summary>
            Returns <see langword="true" /> if collisions with the given collision group are enabled.
            </summary>
      <param name="collisionGroup">The collision group.</param>
      <returns>
        <see langword="true" /> if collisions with the given collision group are enabled; otherwise 
            <see langword="false" />.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="collisionGroup" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionFilter.Get(System.Int32,System.Int32)">
      <summary>
            Returns <see langword="true" /> if collisions between two collision groups are enabled.
            </summary>
      <param name="groupA">The first collision group.</param>
      <param name="groupB">The second collision group.</param>
      <returns>
        <see langword="true" /> if collisions with the between <paramref name="groupA" /> and 
            <paramref name="groupB" /> are enabled; otherwise <see langword="false" />.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="groupA" /> or <paramref name="groupB" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionFilter.MaxNumberOfGroups">
      <summary>
            The maximum number of supported collision groups.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionFilter.OnChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Geometry.Collisions.CollisionFilter.Changed" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:System.EventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionFilter.Reset">
      <summary>
            Resets this filter. All collisions will be enabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionFilter.Set(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject,System.Boolean)">
      <summary>
            Enables or disables collisions between the given <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />s.
            </summary>
      <param name="objectA">The first collision object.</param>
      <param name="objectB">The second collision object.</param>
      <param name="collisionsEnabled">
            If set to <see langword="true" /> collisions between <paramref name="objectA" /> and 
            <paramref name="objectB" /> are enabled. Use <see langword="false" /> to disable collisions.
            </param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionFilter.Set(System.Int32,System.Boolean)">
      <summary>
            Enables or disables collisions with the given collision group.
            </summary>
      <param name="collisionGroup">The collision group.</param>
      <param name="collisionsEnabled">
            If set to <see langword="true" /> collisions for object in the given group are enabled. Use 
            <see langword="false" /> to disable collisions.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collisionGroup" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionFilter.Set(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Enables or disables collisions between a pair of collision groups.
            </summary>
      <param name="groupA">The first collision group.</param>
      <param name="groupB">The second collision group.</param>
      <param name="collisionsEnabled">
            If set to <see langword="true" /> collisions between objects in <paramref name="groupA" /> and 
            objects in <paramref name="groupB" /> are enabled. Use <see langword="false" /> to disable 
            collisions.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="groupA" /> is out of range.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="groupB" /> is out of range.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.CollisionObject">
      <summary>
            Represents an object which can collide with other objects.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionObject.#ctor(DigitalRune.Geometry.IGeometricObject)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" /> class with the given
            geometric object.
            </summary>
      <param name="geometricObject">
            The geometric object (see property <see cref="P:DigitalRune.Geometry.Collisions.CollisionObject.GeometricObject" />).
            </param>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionObject.CollisionGroup">
      <summary>
            Gets or sets the collision group ID.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionObject.Domain">
      <summary>
            Gets the <see cref="P:DigitalRune.Geometry.Collisions.CollisionObject.Domain" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionObject.Enabled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" /> is enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionObject.GeometricObject">
      <summary>
            Gets or sets the geometric object.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionObject.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionObject.Type">
      <summary>
            Gets or sets the collision object type.
            </summary>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.CollisionObjectCollection">
      <summary>
            Represents a collection of <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionObjectCollection.ClearItems">
      <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.CollisionObjectCollection.EnableLookupTable">
      <summary>
            Gets or sets a value indicating whether the internal lookup table is enabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionObjectCollection.Get(DigitalRune.Geometry.IGeometricObject)">
      <summary>
            Gets the collision object for the specified geometric object.
            </summary>
      <param name="geometricObject">The <see cref="T:DigitalRune.Geometry.IGeometricObject" />.</param>
      <returns>
            The <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" /> of <paramref name="geometricObject" />, or 
            <see langword="null" /> if the collision domain does not contain a 
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" /> for <paramref name="geometricObject" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometricObject" /> is <see langword="true" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionObjectCollection.InsertItem(System.Int32,DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
      <param name="item">The object to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. The collection does not allow 
            <see langword="null" /> values. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowNull" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. The collection does not 
            allow duplicate items. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowDuplicates" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionObjectCollection.RemoveItem(System.Int32)">
      <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or <paramref name="index" /> is equal to or 
            greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.CollisionObjectCollection.SetItem(System.Int32,DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. The collection does not allow 
            <see langword="null" /> values. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowNull" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. The collection does not 
            allow duplicate items. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowDuplicates" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.CollisionObjectType">
      <summary>
            Defines the type of collision object.
            </summary>
    </member>
    <member name="F:DigitalRune.Geometry.Collisions.CollisionObjectType.Default">
      <summary>
            A normal collision object. When this type of collision object collides with another 
            collision object of type <see cref="F:DigitalRune.Geometry.Collisions.CollisionObjectType.Default" />, the full contact details (contact points, 
            normal vectors, penetration depths, etc.) are computed and stored in the 
            <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />s.
            </summary>
    </member>
    <member name="F:DigitalRune.Geometry.Collisions.CollisionObjectType.Trigger">
      <summary>
            A collision object that is used as a trigger and does not need contact details. When this 
            type of collision object collides with another collision object, contact details (contact 
            points, normal vectors, penetration depths, etc.) will be omitted. The flag 
            <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.HaveContact" /> will be set in the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />s for this 
            object. But the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />s will not contain any <see cref="T:DigitalRune.Geometry.Collisions.Contact" />s. Use
            trigger collision objects instead of default collision objects to improve performance  if
            contact details are not required.
            </summary>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.CollisionQueryType">
      <summary>
            The type of collision query.
            </summary>
    </member>
    <member name="F:DigitalRune.Geometry.Collisions.CollisionQueryType.Boolean">
      <summary>
            A boolean ("have contact") query. The result of a boolean query is either 
            <see langword="true" /> to indicate contact or <see langword="false" /> to indicate 
            separation.
            </summary>
    </member>
    <member name="F:DigitalRune.Geometry.Collisions.CollisionQueryType.Contacts">
      <summary>
            A collision query that computes detailed contact information. Contact information is only 
            computed for objects in contact, not for separated objects.
            </summary>
    </member>
    <member name="F:DigitalRune.Geometry.Collisions.CollisionQueryType.ClosestPoints">
      <summary>
            Searching for 1 pair of closest points. The closest-points information is computed for 
            separated objects and for objects in contact.
            </summary>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Contact">
      <summary>
            Describes a contact (or the closest points) of two objects.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Contact.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Geometry.Collisions.Contact" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Geometry.Collisions.Contact" /> class.
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.Contact.FeatureA">
      <summary>
            Gets or sets the index of the shape feature of object A that was hit.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.Contact.FeatureB">
      <summary>
            Gets or sets the index of the shape feature of object B that was hit.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.Contact.IsRayHit">
      <summary>
            Gets a value indicating whether this contact is a hit by a ray.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.Contact.Lifetime">
      <summary>
            Gets or sets the lifetime of this contact (in seconds).
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.Contact.Normal">
      <summary>
            Gets or sets the normalized contact normal (pointing from object A to object B; in world space).
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.Contact.PenetrationDepth">
      <summary>
            Gets or sets the penetration depth.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.Contact.Position">
      <summary>
            Gets or sets the contact position (in world space).
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.Contact.PositionALocal">
      <summary>
            Gets or sets the contact position on object A in the local space of object A.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.Contact.PositionAWorld">
      <summary>
            Gets the contact position on object A (in world space).
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.Contact.PositionBLocal">
      <summary>
            Gets or sets the contact position on object B in the local space of object B.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.Contact.PositionBWorld">
      <summary>
            Gets the contact position on object B (in world space).
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.Contact.Swapped">
      <summary>
            Gets a copy of the contact where the collision objects are swapped.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Contact.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.Contact.UserData">
      <summary>
            Gets or sets the user data.
            </summary>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.ContactReducer">
      <summary>
            Removes contacts if a <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" /> contains more than 4 <see cref="T:DigitalRune.Geometry.Collisions.Contact" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactReducer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.ContactReducer" /> class</summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactReducer.Filter(DigitalRune.Geometry.Collisions.ContactSet)">
      <summary>
            Filters the specified contact set.
            </summary>
      <param name="contactSet">The contact set.</param>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.ContactSet">
      <summary>
            A collection of <see cref="T:DigitalRune.Geometry.Collisions.Contact" />s that describe the contact points or closest points
            between to collision objects.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSet.Add(DigitalRune.Geometry.Collisions.Contact)">
      <summary>
            Adds a <see cref="T:DigitalRune.Geometry.Collisions.Contact" /> to the end of the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />.
            </summary>
      <param name="contact">
            The contact to add to the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />.
            </param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSet.AsReadOnly">
      <summary>
            Returns a read-only <see cref="T:System.Collections.Generic.IList`1" /> wrapper for the current <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />.
            </summary>
      <returns>
            A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that acts as a read-only wrapper around the current
            <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />. 
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSet.Clear">
      <summary>
            Removes all <see cref="T:DigitalRune.Geometry.Collisions.Contact" />s from the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSet.Contains(DigitalRune.Geometry.Collisions.Contact)">
      <summary>
            Determines whether the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" /> contains a specific <see cref="T:DigitalRune.Geometry.Collisions.Contact" />.
            </summary>
      <param name="contact">The contact to locate in the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="contact" /> is found in the 
            <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSet.CopyTo(DigitalRune.Geometry.Collisions.Contact[],System.Int32)">
      <summary>
            Copies the <see cref="T:DigitalRune.Geometry.Collisions.Contact" />s of the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" /> to an <see cref="T:System.Array" />,
            starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the 
            <see cref="T:DigitalRune.Geometry.Collisions.Contact" />s copied from this <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />. The <see cref="T:System.Array" />
            must have zero-based indexing.
            </param>
      <param name="arrayIndex">
            The zero-based index in <paramref name="array" /> at which copying begins.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional. Or <paramref name="arrayIndex" /> is equal to 
            or greater than the length of <paramref name="array" />. Or the number of contacts in the 
            source <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" /> is greater than the available space from 
            <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />. Or 
            type <see cref="T:DigitalRune.Geometry.Collisions.Contact" /> cannot be cast automatically to the type of the destination 
            <paramref name="array" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.ContactSet.Count">
      <summary>
            Gets the number of <see cref="T:DigitalRune.Geometry.Collisions.Contact" />s contained in the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSet.Create(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <param name="objectA">The object A.</param>
      <param name="objectB">The object B.</param>
      <returns>A new or reusable instance of the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" /> class.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="objectA" /> and <paramref name="objectB" /> are the same.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSet.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.ContactSet.HaveContact">
      <summary>
            Gets or sets a value indicating whether <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectA" /> 
            and <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectB" /> are in contact.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSet.IndexOf(DigitalRune.Geometry.Collisions.Contact)">
      <summary>
            Determines the index of a specific <see cref="T:DigitalRune.Geometry.Collisions.Contact" /> in the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />.
            </summary>
      <param name="contact">The contact to locate in the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />.</param>
      <returns>
            The index of <paramref name="contact" /> if found in the contact set; otherwise, -1.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSet.Insert(System.Int32,DigitalRune.Geometry.Collisions.Contact)">
      <summary>
            Inserts an <see cref="T:DigitalRune.Geometry.Collisions.Contact" /> in the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" /> at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="contact" /> should be inserted.
            </param>
      <param name="contact">The contact to insert into the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.ContactSet.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:DigitalRune.Geometry.Collisions.Contact" /> at the specified index.
            </summary>
      <param name="index">The zero-based index of the contact to get or set.</param>
      <exception cref="T:System.NullReferenceException">
            This <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" /> is empty.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or equal to or greater than <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.Count" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectA">
      <summary>
            Gets collision object A.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectB">
      <summary>
            Gets collision object B.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSet.Remove(DigitalRune.Geometry.Collisions.Contact)">
      <summary>
            Removes the first occurrence of a specific <see cref="T:DigitalRune.Geometry.Collisions.Contact" /> from the 
            <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />.
            </summary>
      <param name="contact">The contact to remove from the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="contact" /> was successfully removed from the 
            <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />; otherwise, <see langword="false" />. This method also returns 
            <see langword="false" /> if <paramref name="contact" /> is not found in the original 
            <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSet.RemoveAt(System.Int32)">
      <summary>
            Removes the <see cref="T:DigitalRune.Geometry.Collisions.Contact" /> at the specified index.
            </summary>
      <param name="index">The zero-based index of the contact to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSet.Reset(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Resets this contact set to default values. 
            </summary>
      <param name="objectA">The first collision object.</param>
      <param name="objectB">The second collision object.</param>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.ContactSet.Swapped">
      <summary>
            Gets a copy of the contact set where <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectA" /> and <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectB" />
            are swapped.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.ContactSet.System#Collections#Generic#ICollection{DigitalRune#Geometry#Collisions#Contact}#IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSet.System#Collections#Generic#IEnumerable{DigitalRune#Geometry#Collisions#Contact}#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSet.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the <see cref="T:DigitalRune.Geometry.Collisions.Contact" />s of the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" /> to an <see cref="T:System.Array" />,
            starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the 
            <see cref="T:DigitalRune.Geometry.Collisions.Contact" />s copied from this <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />. The <see cref="T:System.Array" />
            must have zero-based indexing.
            </param>
      <param name="index">
            The zero-based index in <paramref name="array" /> at which copying begins.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional. Or <paramref name="index" /> is equal to 
            or greater than the length of <paramref name="array" />. Or the number of contacts in the 
            source <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" /> is greater than the available space from 
            <paramref name="index" /> to the end of the destination <paramref name="array" />. Or 
            type <see cref="T:DigitalRune.Geometry.Collisions.Contact" /> cannot be cast automatically to the type of the destination 
            <paramref name="array" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.ContactSet.System#Collections#ICollection#IsSynchronized">
      <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized 
            (thread safe).
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.ContactSet.System#Collections#ICollection#SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSet.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSet.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.ContactSetCollection">
      <summary>
            A collection of <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.ContactSetCollection" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.#ctor(System.Collections.Generic.IEnumerable{DigitalRune.Geometry.Collisions.ContactSet})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.ContactSetCollection" /> class with the given
            contact sets.
            </summary>
      <param name="contactSets">
            The contact sets which are initially added to the collection.
            </param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Add(DigitalRune.Geometry.Collisions.ContactSet)">
      <summary>
            Adds the specified contact set.
            </summary>
      <param name="contactSet">The contact set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contactSet" /> is already contained in the collection.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contactSet" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Contains(DigitalRune.Collections.Pair{DigitalRune.Geometry.Collisions.CollisionObject})">
      <summary>
            Determines whether the collection contains a contact set for the given pair of
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />s.
            </summary>
      <param name="collisionObjectPair">The collision object pair.</param>
      <returns>
        <see langword="true" /> if the collection contains a contact set with contacts between
            the given pair of objects; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Contains(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Determines whether the collection contains a contact set for the given pair of 
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />s.
            </summary>
      <param name="objectA">The first collision object.</param>
      <param name="objectB">The second collision object.</param>
      <returns>
        <see langword="true" /> if the collection contains a contact set with contacts between 
            <paramref name="objectA" /> and <paramref name="objectB" />; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Contains(DigitalRune.Geometry.Collisions.ContactSet)">
      <summary>
            Determines whether the collection contains a specific <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />.
            </summary>
      <param name="item">The <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" /> to locate in the collection.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is found; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.CopyTo(DigitalRune.Geometry.Collisions.ContactSet[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting 
            at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from 
            <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
      <param name="arrayIndex">
            The zero-based index in <paramref name="array" /> at which copying begins.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional. Or <paramref name="arrayIndex" /> is equal to 
            or greater than the length of <paramref name="array" />. Or the number of elements in the 
            source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from 
            <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.ContactSetCollection.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.GetContacts(DigitalRune.Collections.Pair{DigitalRune.Geometry.Collisions.CollisionObject})">
      <summary>
            Gets the contact set with the contacts between two <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />s.
            </summary>
      <param name="collisionObjectPair">The collision object pair.</param>
      <returns>
        <para>
            A <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" /> with contacts between the given pair of objects. 
            The collision objects in the returned <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />
            can be swapped! See <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" /> for more information on <i>swapped contact
            sets</i>.
            </para>
        <para>
            If the collection does not contain a suitable <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />,
            <see langword="null" /> is returned.
            </para>
      </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.GetContacts(DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Gets the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />s for a given <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />.
            </summary>
      <param name="collisionObject">The collision object.</param>
      <returns>
            All <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />s where <paramref name="collisionObject" /> is involved.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.GetContacts(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Gets the contact set with the contacts between two <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />s.
            </summary>
      <param name="objectA">The first collision object.</param>
      <param name="objectB">The second collision object.</param>
      <returns>
        <para>
            A <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" /> with contacts between <paramref name="objectA" /> and 
            <paramref name="objectB" />. The collision objects in the returned <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />
            can be swapped! See <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" /> for more information on <i>swapped contact 
            sets</i>.
            </para>
        <para>
            If the collection does not contain a suitable <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />, 
            <see langword="null" /> is returned. 
            </para>
      </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.ContactSetCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Remove(DigitalRune.Collections.Pair{DigitalRune.Geometry.Collisions.CollisionObject})">
      <summary>
            Removes the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" /> for the given pair of <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />s.
            </summary>
      <param name="collisionObjectPair">The collision object pair.</param>
      <returns>
        <see langword="true" /> if item was successfully removed; otherwise, <see langword="false" />.
            This method also returns <see langword="false" /> if item is not found.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Remove(DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Removes the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />s for the given collision object.
            </summary>
      <param name="collisionObject">The collision object.</param>
      <returns>
        <see langword="true" /> if an item was successfully removed; otherwise, 
            <see langword="false" />. This method also returns <see langword="false" /> if item is not 
            found.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Remove(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Removes the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" /> for the given pair of <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />s.
            </summary>
      <param name="objectA">The first collision object.</param>
      <param name="objectB">The second collision object.</param>
      <returns>
        <see langword="true" /> if item was successfully removed; otherwise, <see langword="false" />. 
            This method also returns <see langword="false" /> if item is not found.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Remove(DigitalRune.Geometry.Collisions.ContactSet)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> if item was successfully removed from the 
            <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />. This method also returns 
            <see langword="false" /> if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.System#Collections#Generic#IEnumerable{DigitalRune#Geometry#Collisions#ContactSet}#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.ToArray">
      <summary>
            Copies the contact sets of the collection to a new array.
            </summary>
      <returns>
            An array containing the contact sets.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.TryGet(DigitalRune.Collections.Pair{DigitalRune.Geometry.Collisions.CollisionObject},DigitalRune.Geometry.Collisions.ContactSet@)">
      <summary>
            Gets the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" /> for the given pair of <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />s.
            </summary>
      <param name="collisionObjectPair">The collision object pair.</param>
      <param name="contactSet">
            When this method returns, contains the contact set with contacts between the given 
            collision object pair, if such a contact set exists
            in the collection - otherwise, <see langword="null" />.
            </param>
      <returns>
        <see langword="true" /> if the <see cref="T:DigitalRune.Geometry.Collisions.ContactSetCollection" /> contains a <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />
            for the specified pair of <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />s.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.TryGet(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.ContactSet@)">
      <summary>
            Gets the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" /> for the given pair of <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />s.
            </summary>
      <param name="objectA">The first collision object.</param>
      <param name="objectB">The second collision object.</param>
      <param name="contactSet">
            When this method returns, contains the contact set with contacts between 
            <paramref name="objectA" /> and <paramref name="objectB" />, if such a contact set exists
            in the collection - otherwise, <see langword="null" />.
            </param>
      <returns>
        <see langword="true" /> if the <see cref="T:DigitalRune.Geometry.Collisions.ContactSetCollection" /> contains a <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" />
            for the specified pair of <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />s.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.ContinuousCollisionDetectionMode">
      <summary>
            Defines the mode of the continuous collision detection.
            </summary>
    </member>
    <member name="F:DigitalRune.Geometry.Collisions.ContinuousCollisionDetectionMode.Full">
      <summary>
            The continuous collision detection considers the linear and the rotational movement of the 
            objects involved. (Slower, but more accurate.)
            </summary>
    </member>
    <member name="F:DigitalRune.Geometry.Collisions.ContinuousCollisionDetectionMode.Linear">
      <summary>
            The continuous collision detection considers only the linear movement of the objects 
            involved. The rotational movement is ignored. (Faster, but less accurate.)
            </summary>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.ICollisionFilter">
      <summary>
            Represents a configurable collision filter supporting pairwise filtering and collision groups.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ICollisionFilter.Get(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Returns <see langword="true" /> if collisions between two <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />s are
            enabled (without testing collision groups).
            </summary>
      <param name="objectA">The first collision object.</param>
      <param name="objectB">The second collision object.</param>
      <returns>
        <see langword="true" /> if collisions between the given <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" /> pair 
            are enabled; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ICollisionFilter.Get(System.Int32)">
      <summary>
            Returns <see langword="true" /> if collisions with the given collision group are enabled.
            </summary>
      <param name="collisionGroup">The collision group.</param>
      <returns>
        <see langword="true" /> if collisions with the given collision group are enabled; otherwise 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ICollisionFilter.Get(System.Int32,System.Int32)">
      <summary>
            Returns <see langword="true" /> if collisions between two collision groups are enabled.
            </summary>
      <param name="groupA">The first collision group.</param>
      <param name="groupB">The second collision group.</param>
      <returns>
        <see langword="true" /> if collisions with the between <paramref name="groupA" /> and 
            <paramref name="groupB" /> are enabled; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ICollisionFilter.Set(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject,System.Boolean)">
      <summary>
            Enables or disables collisions between the given <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject" />s.
            </summary>
      <param name="objectA">The first collision object.</param>
      <param name="objectB">The second collision object.</param>
      <param name="collisionsEnabled">
            If set to <see langword="true" /> collisions between <paramref name="objectA" /> and 
            <paramref name="objectB" /> are enabled. Use <see langword="false" /> to disable collisions.
            </param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ICollisionFilter.Set(System.Int32,System.Boolean)">
      <summary>
            Enables or disables collisions with the given collision group.
            </summary>
      <param name="collisionGroup">The collision group.</param>
      <param name="collisionsEnabled">
            If set to <see langword="true" /> collisions for object in the given group are enabled. Use 
            <see langword="false" /> to disable collisions.
            </param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.ICollisionFilter.Set(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Enables or disables collisions between a pair of collision groups.
            </summary>
      <param name="groupA">The first collision group.</param>
      <param name="groupB">The second collision group.</param>
      <param name="collisionsEnabled">
            If set to <see langword="true" /> collisions between objects in <paramref name="groupA" /> and 
            objects in <paramref name="groupB" /> are enabled. Use <see langword="false" /> to disable 
            collisions.
            </param>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.IContactFilter">
      <summary>
            A filter which processes contacts in a contact set.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.IContactFilter.Filter(DigitalRune.Geometry.Collisions.ContactSet)">
      <summary>
            Filters the specified contact set.
            </summary>
      <param name="contactSet">The contact set.</param>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.BoxBoxAlgorithm">
      <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.BoxShape" /> vs. <see cref="T:DigitalRune.Geometry.Shapes.BoxShape" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.BoxBoxAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.BoxBoxAlgorithm" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.BoxBoxAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contactSet" /> does not contain two <see cref="T:DigitalRune.Geometry.Shapes.BoxShape" />es.
            </exception>
      <exception cref="T:DigitalRune.Geometry.GeometryException">
        <paramref name="type" /> is set to <see cref="F:DigitalRune.Geometry.Collisions.CollisionQueryType.ClosestPoints" />. This 
            collision algorithm cannot handle closest-point queries. Use <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.Gjk" /> instead.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.BoxSphereAlgorithm">
      <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.BoxShape" /> vs. 
            <see cref="T:DigitalRune.Geometry.Shapes.SphereShape" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.BoxSphereAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.BoxSphereAlgorithm" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.BoxSphereAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contactSet" /> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.BoxShape" /> and a 
            <see cref="T:DigitalRune.Geometry.Shapes.SphereShape" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm">
      <summary>
            A collision algorithm computes contact information or closest-point information for 
            collision objects with certain shapes.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collisionDetection" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm.CollisionDetection">
      <summary>
            Gets the collision detection service.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm.GetClosestPoints(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Gets the closest points of two collision objects.
            </summary>
      <param name="objectA">The collision object A.</param>
      <param name="objectB">The collision object B.</param>
      <returns>The contact set with the closest points.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm.GetContacts(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Gets the contact information of two possibly touching collision objects.
            </summary>
      <param name="objectA">The collision object A.</param>
      <param name="objectB">The collision object B.</param>
      <returns>The contact set.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
      <summary>
            Gets the time of impact between two moving objects.
            </summary>
      <param name="objectA">The object A.</param>
      <param name="targetPoseA">The target pose of A.</param>
      <param name="objectB">The object B.</param>
      <param name="targetPoseB">The target pose of B.</param>
      <param name="allowedPenetration">
            The allowed penetration. A positive allowed penetration value makes sure that the objects 
            have a measurable contact at the time of impact.
            </param>
      <returns>The time of impact in the range [0, 1].</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> or <paramref name="objectB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm.HaveContact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Determines whether two collision objects are in contact.
            </summary>
      <param name="objectA">The collision object A.</param>
      <param name="objectB">The collision object B.</param>
      <returns>
        <see langword="true" /> if the objects are touching (or penetrating); otherwise 
            <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm.UpdateClosestPoints(DigitalRune.Geometry.Collisions.ContactSet,System.Single)">
      <summary>
            Performs a collision query to update the closest-point information in the contact set.
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="deltaTime">
            The time step size in seconds. (The elapsed simulation time since the contact set was
            updated the last time.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contactSet" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm.UpdateContacts(DigitalRune.Geometry.Collisions.ContactSet,System.Single)">
      <summary>
            Performs a collision query to update the contact information in the contact set.
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="deltaTime">
            The time step size in seconds. (The elapsed simulation time since the contact set was
            updated the last time.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contactSet" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.CombinedCollisionAlgorithm">
      <summary>
            This collision algorithm combines 2 other algorithms: One is used for penetrating objects,
            the other is used for closest-point queries of separated objects.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CombinedCollisionAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection,DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm,DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CombinedCollisionAlgorithm" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
      <param name="closestPointsAlgorithm">The closest points algorithm.</param>
      <param name="contactAlgorithm">The contact algorithm.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="closestPointsAlgorithm" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contactAlgorithm" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CombinedCollisionAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CombinedCollisionAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
      <summary>
            Gets the time of impact between two moving objects.
            </summary>
      <param name="objectA">The object A.</param>
      <param name="targetPoseA">The target pose of A.</param>
      <param name="objectB">The object B.</param>
      <param name="targetPoseB">The target pose of B.</param>
      <param name="allowedPenetration">
            The allowed penetration. A positive allowed penetration value makes sure that the objects 
            have a measurable contact at the time of impact.
            </param>
      <returns>The time of impact in the range [0, 1].</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> or <paramref name="objectB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.CompositeShapeAlgorithm">
      <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape" /> vs. any other 
            <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CompositeShapeAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CompositeShapeAlgorithm" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CompositeShapeAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contactSet" /> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape" />.
            </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="contactSet" /> contains a <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape" /> with a non-uniform
            scaling. One of its children has a local rotation. Computing collisions for composite shapes 
            with non-uniform scaling and rotated children is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CompositeShapeAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
      <summary>
            Gets the time of impact between two moving objects.
            </summary>
      <param name="objectA">The object A.</param>
      <param name="targetPoseA">The target pose of A.</param>
      <param name="objectB">The object B.</param>
      <param name="targetPoseB">The target pose of B.</param>
      <param name="allowedPenetration">
            The allowed penetration. A positive allowed penetration value makes sure that the objects 
            have a measurable contact at the time of impact.
            </param>
      <returns>The time of impact in the range [0, 1].</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> or <paramref name="objectB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            Neither <paramref name="objectA" /> nor <paramref name="objectB" /> is a 
            <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.Gjk">
      <summary>
            The Gilbert-Johnson-Keerthi (GJK) algorithm for computing closest points of convex objects.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.Gjk.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.Gjk" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.Gjk.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contactSet" /> does not contain two <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape" />s.
            </exception>
      <exception cref="T:DigitalRune.Geometry.GeometryException">
        <paramref name="type" /> is set to <see cref="F:DigitalRune.Geometry.Collisions.CollisionQueryType.Contacts" />. This collision 
            algorithm cannot handle contact queries. Use <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.MinkowskiPortalRefinement" /> 
            instead.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.HeightFieldAlgorithm">
      <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.HeightField" /> vs. any other 
            <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.HeightFieldAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.HeightFieldAlgorithm" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.HeightFieldAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contactSet" /> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.HeightField" />.
            </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="contactSet" /> contains a <see cref="T:DigitalRune.Geometry.Shapes.HeightField" /> with a negative scaling.
            Computing collisions for height fields with a negative scaling is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.HeightFieldAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
      <summary>
            Gets the time of impact between two moving objects.
            </summary>
      <param name="objectA">The object A.</param>
      <param name="targetPoseA">The target pose of A.</param>
      <param name="objectB">The object B.</param>
      <param name="targetPoseB">The target pose of B.</param>
      <param name="allowedPenetration">The allowed penetration. A positive allowed penetration value makes sure that the objects
            have a measurable contact at the time of impact.</param>
      <returns>The time of impact in the range [0, 1].</returns>
      <exception cref="T:System.ArgumentException">
            Neither <paramref name="objectA" /> nor <paramref name="objectB" /> contains a 
            <see cref="T:DigitalRune.Geometry.Shapes.HeightField" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> or <paramref name="objectB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="objectA" /> or <paramref name="objectB" /> contains a 
            <see cref="T:DigitalRune.Geometry.Shapes.HeightField" /> with a negative scaling. Computing collisions for height fields 
            with a negative scaling is not supported.
            </exception>
    </member>
    <member name="F:DigitalRune.Geometry.Collisions.Algorithms.HeightFieldAlgorithm.WeldingLimit">
      <summary>
            This value determines when contact welding should be performed.
            </summary>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.InfiniteShapeAlgorithm">
      <summary>
            A dummy collision algorithm which always reports a collision but no contact points
            or closest-points. This is the opposite of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.NoCollisionAlgorithm" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.InfiniteShapeAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.InfiniteShapeAlgorithm" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.InfiniteShapeAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.InfiniteShapeAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
      <summary>
            Gets the time of impact between two moving objects.
            </summary>
      <param name="objectA">The object A.</param>
      <param name="targetPoseA">The target pose of A.</param>
      <param name="objectB">The object B.</param>
      <param name="targetPoseB">The target pose of B.</param>
      <param name="allowedPenetration">
            The allowed penetration. A positive allowed penetration value makes sure that the objects 
            have a measurable contact at the time of impact.
            </param>
      <returns>The time of impact in the range [0, 1].</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> or <paramref name="objectB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.LineAlgorithm">
      <summary>
            Computes collision queries between <see cref="T:DigitalRune.Geometry.Shapes.LineShape" />s and other primitives.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.LineAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.LineAlgorithm" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.LineAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contactSet" /> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.Line" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.MinkowskiPortalRefinement">
      <summary>
            The Minkowski Portal Refinement (MPR) algorithm for computing contacts between convex objects.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.MinkowskiPortalRefinement.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.MinkowskiPortalRefinement" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.MinkowskiPortalRefinement.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contactSet" /> does not contain two <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape" />s.
            </exception>
      <exception cref="T:DigitalRune.Geometry.GeometryException">
        <paramref name="type" /> is set to <see cref="F:DigitalRune.Geometry.Collisions.CollisionQueryType.ClosestPoints" />. This 
            collision algorithm cannot handle closest-point queries. Use <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.Gjk" /> instead.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.NoCollisionAlgorithm">
      <summary>
            A dummy collision algorithm which always reports NO collision and NO closest points.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.NoCollisionAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.NoCollisionAlgorithm" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.NoCollisionAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.NoCollisionAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
      <summary>
            Gets the time of impact between two moving objects.
            </summary>
      <param name="objectA">The object A.</param>
      <param name="targetPoseA">The target pose of A.</param>
      <param name="objectB">The object B.</param>
      <param name="targetPoseB">The target pose of B.</param>
      <param name="allowedPenetration">The allowed penetration. A positive allowed penetration value makes sure that the objects
            have a measurable contact at the time of impact.</param>
      <returns>The time of impact in the range [0, 1].</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> or <paramref name="objectB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.PlaneBoxAlgorithm">
      <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape" /> vs. 
            <see cref="T:DigitalRune.Geometry.Shapes.BoxShape" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.PlaneBoxAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.PlaneBoxAlgorithm" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.PlaneBoxAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contactSet" /> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape" /> and a 
            <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.PlaneBoxAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
      <summary>
            Gets the time of impact between two moving objects.
            </summary>
      <param name="objectA">The object A.</param>
      <param name="targetPoseA">The target pose of A.</param>
      <param name="objectB">The object B.</param>
      <param name="targetPoseB">The target pose of B.</param>
      <param name="allowedPenetration">
            The allowed penetration. A positive allowed penetration value makes sure that the objects 
            have a measurable contact at the time of impact.
            </param>
      <returns>The time of impact in the range [0, 1].</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> or <paramref name="objectB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.PlaneConvexAlgorithm">
      <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape" /> vs. 
            <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.PlaneConvexAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.PlaneConvexAlgorithm" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.PlaneConvexAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contactSet" /> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape" /> and a 
            <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.PlaneConvexAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
      <summary>
            Gets the time of impact between two moving objects.
            </summary>
      <param name="objectA">The object A.</param>
      <param name="targetPoseA">The target pose of A.</param>
      <param name="objectB">The object B.</param>
      <param name="targetPoseB">The target pose of B.</param>
      <param name="allowedPenetration">
            The allowed penetration. A positive allowed penetration value makes sure that the objects 
            have a measurable contact at the time of impact.
            </param>
      <returns>The time of impact in the range [0, 1].</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> or <paramref name="objectB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.PlaneRayAlgorithm">
      <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.RayShape" /> vs. <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.PlaneRayAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.PlaneRayAlgorithm" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.PlaneRayAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contactSet" /> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape" /> and a 
            <see cref="T:DigitalRune.Geometry.Shapes.RayShape" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.PlaneSphereAlgorithm">
      <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.SphereShape" /> vs. 
            <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.PlaneSphereAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.PlaneSphereAlgorithm" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.PlaneSphereAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contactSet" /> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape" /> and 
            <see cref="T:DigitalRune.Geometry.Shapes.SphereShape" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.PlaneSphereAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
      <summary>
            Gets the time of impact between two moving objects.
            </summary>
      <param name="objectA">The object A.</param>
      <param name="targetPoseA">The target pose of A.</param>
      <param name="objectB">The object B.</param>
      <param name="targetPoseB">The target pose of B.</param>
      <param name="allowedPenetration">
            The allowed penetration. A positive allowed penetration value makes sure that the objects 
            have a measurable contact at the time of impact.
            </param>
      <returns>The time of impact in the range [0, 1].</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> or <paramref name="objectB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.RayBoxAlgorithm">
      <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.RayShape" /> vs. 
            <see cref="T:DigitalRune.Geometry.Shapes.BoxShape" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayBoxAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.RayBoxAlgorithm" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayBoxAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contactSet" /> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.RayShape" /> and a 
            <see cref="T:DigitalRune.Geometry.Shapes.BoxShape" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.RayCompositeAlgorithm">
      <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.RayShape" /> vs. 
            <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayCompositeAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.RayCompositeAlgorithm" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayCompositeAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayCompositeAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
      <summary>
            Gets the time of impact between two moving objects.
            </summary>
      <param name="objectA">The object A.</param>
      <param name="targetPoseA">The target pose of A.</param>
      <param name="objectB">The object B.</param>
      <param name="targetPoseB">The target pose of B.</param>
      <param name="allowedPenetration">
            The allowed penetration. A positive allowed penetration value makes sure that the objects 
            have a measurable contact at the time of impact.
            </param>
      <returns>The time of impact in the range [0, 1].</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> or <paramref name="objectB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.RayConvexAlgorithm">
      <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.RayShape" /> vs. 
            <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayConvexAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.RayConvexAlgorithm" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayConvexAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contactSet" /> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.RayShape" /> and a 
            <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.RayHeightFieldAlgorithm">
      <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.RayShape" /> vs. 
            <see cref="T:DigitalRune.Geometry.Shapes.HeightField" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayHeightFieldAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.RayHeightFieldAlgorithm" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayHeightFieldAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayHeightFieldAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
      <summary>
            Gets the time of impact between two moving objects.
            </summary>
      <param name="objectA">The object A.</param>
      <param name="targetPoseA">The target pose of A.</param>
      <param name="objectB">The object B.</param>
      <param name="targetPoseB">The target pose of B.</param>
      <param name="allowedPenetration">
            The allowed penetration. A positive allowed penetration value makes sure that the objects 
            have a measurable contact at the time of impact.
            </param>
      <returns>The time of impact in the range [0, 1].</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> or <paramref name="objectB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.RaySphereAlgorithm">
      <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.RayShape" /> vs. 
            <see cref="T:DigitalRune.Geometry.Shapes.SphereShape" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RaySphereAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.RaySphereAlgorithm" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RaySphereAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contactSet" /> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.RayShape" /> and a 
            <see cref="T:DigitalRune.Geometry.Shapes.SphereShape" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.RayTriangleAlgorithm">
      <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.RayShape" /> vs. 
            <see cref="T:DigitalRune.Geometry.Shapes.TriangleShape" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayTriangleAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.RayTriangleAlgorithm" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayTriangleAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contactSet" /> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.RayShape" /> and a 
            <see cref="T:DigitalRune.Geometry.Shapes.Triangle" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.RayTriangleMeshAlgorithm">
      <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.RayShape" /> vs. 
            <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayTriangleMeshAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.RayTriangleMeshAlgorithm" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayTriangleMeshAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayTriangleMeshAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
      <summary>
            Gets the time of impact between two moving objects.
            </summary>
      <param name="objectA">The object A.</param>
      <param name="targetPoseA">The target pose of A.</param>
      <param name="objectB">The object B.</param>
      <param name="targetPoseB">The target pose of B.</param>
      <param name="allowedPenetration">
            The allowed penetration. A positive allowed penetration value makes sure that the objects 
            have a measurable contact at the time of impact.
            </param>
      <returns>The time of impact in the range [0, 1].</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> or <paramref name="objectB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.SphereSphereAlgorithm">
      <summary>
            Computes contact or closest-point information for two <see cref="T:DigitalRune.Geometry.Shapes.SphereShape" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.SphereSphereAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.SphereSphereAlgorithm" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.SphereSphereAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contactSet" /> does not contain two <see cref="T:DigitalRune.Geometry.Shapes.SphereShape" /> shapes.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.TransformedShapeAlgorithm">
      <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.TransformedShape" /> vs. any other 
            <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.TransformedShapeAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.TransformedShapeAlgorithm" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.TransformedShapeAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contactSet" /> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.TransformedShape" />.
            </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="contactSet" /> contains a <see cref="T:DigitalRune.Geometry.Shapes.TransformedShape" /> with a local 
            rotation and a non-uniform scaling. Computing collisions for transformed shapes with local 
            rotations and non-uniform scaling is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.TransformedShapeAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
      <summary>
            Gets the time of impact between two moving objects.
            </summary>
      <param name="objectA">The object A.</param>
      <param name="targetPoseA">The target pose of A.</param>
      <param name="objectB">The object B.</param>
      <param name="targetPoseB">The target pose of B.</param>
      <param name="allowedPenetration">
            The allowed penetration. A positive allowed penetration value makes sure that the objects 
            have a measurable contact at the time of impact.
            </param>
      <returns>The time of impact in the range [0, 1].</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> or <paramref name="objectB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            Neither <paramref name="objectA" /> nor <paramref name="objectB" /> is a 
            <see cref="T:DigitalRune.Geometry.Shapes.TransformedShape" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Collisions.Algorithms.TriangleMeshAlgorithm">
      <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape" /> vs. any 
            other <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.TriangleMeshAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.TriangleMeshAlgorithm" /> class.
            </summary>
      <param name="collisionDetection">The collision detection service.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.TriangleMeshAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
      <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm" /> instances!
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="type">The type of collision query.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contactSet" /> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Collisions.Algorithms.TriangleMeshAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
      <summary>
            Gets the time of impact between two moving objects.
            </summary>
      <param name="objectA">The object A.</param>
      <param name="targetPoseA">The target pose of A.</param>
      <param name="objectB">The object B.</param>
      <param name="targetPoseB">The target pose of B.</param>
      <param name="allowedPenetration">
            The allowed penetration. A positive allowed penetration value makes sure that the objects 
            have a measurable contact at the time of impact.
            </param>
      <returns>The time of impact in the range [0, 1].</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> or <paramref name="objectB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            Neither <paramref name="objectA" /> nor <paramref name="objectB" /> is a 
            <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape" />.
            </exception>
    </member>
    <member name="F:DigitalRune.Geometry.Collisions.Algorithms.TriangleMeshAlgorithm.WeldingLimit">
      <summary>
            This value determines when contact welding should be performed.
            </summary>
    </member>
    <member name="T:DigitalRune.Geometry.Meshes.ConvexDecomposition">
      <summary>
            Performs an approximate convex decomposition of an input mesh. (Not available on these
            platforms: Silverlight, Windows Phone 7, Xbox 360)
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.ConvexDecomposition.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.ConvexDecomposition" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.AllowedConcavity">
      <summary>
            Gets or sets the allowed concavity.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.ConvexDecomposition.CancelAsync">
      <summary>
            Cancels the current asynchronous decomposition process.
            </summary>
    </member>
    <member name="E:DigitalRune.Geometry.Meshes.ConvexDecomposition.Completed">
      <summary>
            Occurs when an asynchronous decomposition (see <see cref="M:DigitalRune.Geometry.Meshes.ConvexDecomposition.DecomposeAsync(DigitalRune.Geometry.Meshes.ITriangleMesh)" />) has completed.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.ConvexDecomposition.Decompose(DigitalRune.Geometry.Meshes.ITriangleMesh)">
      <summary>
            Decomposes the specified mesh.
            </summary>
      <param name="mesh">The mesh.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.ConvexDecomposition.DecomposeAsync(DigitalRune.Geometry.Meshes.ITriangleMesh)">
      <summary>
            Decomposes the specified mesh (asynchronously).
            </summary>
      <param name="mesh">The mesh.</param>
      <exception cref="T:System.InvalidOperationException">
            Convex decomposition is already in progress.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.Decomposition">
      <summary>
            Gets the convex decomposition of the mesh.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.IntermediateVertexLimit">
      <summary>
            Gets or sets the maximal of number vertices per convex part during the decomposition 
            process.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than 4.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.IsBusy">
      <summary>
            Gets or sets a value indicating whether the decomposition is in progress.
            </summary>
    </member>
    <member name="E:DigitalRune.Geometry.Meshes.ConvexDecomposition.ProgressChanged">
      <summary>
            Event raised when the progress was changed.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.SampleTriangleCenters">
      <summary>
            Gets or sets a value indicating whether triangle centers are used for concavity computation.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.SampleTriangleVertices">
      <summary>
            Gets or sets a value indicating whether triangle vertices are used for concavity
            computation.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.SkinWidth">
      <summary>
            Gets or sets the width of the skin of each convex part.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.SmallIslandBoost">
      <summary>
            Gets or sets the small island boost factor.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.VertexLimit">
      <summary>
            Gets or sets the maximal number of vertices per convex part in the final result.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than 4.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Meshes.DcelEdge">
      <summary>
            Edge data structure for a Doubly-Connected Edge List (DCEL).
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.DcelEdge.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.DcelEdge" /> class</summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.DcelEdge.Face">
      <summary>
            Gets or sets the face for which this edge is part of the boundary.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.DcelEdge.Next">
      <summary>
            Gets or sets the next edge (for the same face).
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.DcelEdge.Origin">
      <summary>
            Gets or sets the vertex where the edge starts.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.DcelEdge.Previous">
      <summary>
            Gets or sets the previous edge (for the same face).
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.DcelEdge.Tag">
      <summary>
            Gets or sets an integer flag that can be used by algorithms that operate on the 
            <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.DcelEdge.Twin">
      <summary>
            Gets or sets the twin edge.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.DcelEdge.UserData">
      <summary>
            Gets or sets user-defined data.
            </summary>
    </member>
    <member name="T:DigitalRune.Geometry.Meshes.DcelFace">
      <summary>
            Face data structure for a Doubly-Connected Edge List (DCEL).
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.DcelFace.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.DcelFace" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.DcelFace.#ctor(DigitalRune.Geometry.Meshes.DcelEdge)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.DcelFace" /> class from a given edge.
            </summary>
      <param name="boundary">An edge of the outer boundary.</param>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.DcelFace.Boundary">
      <summary>
            Gets or sets an edge of the outer boundary.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.DcelFace.Holes">
      <summary>
            Gets or sets a list with one edge of the boundary for each hole; <see langword="null" /> if
            there are no holes.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.DcelFace.Tag">
      <summary>
            Gets or sets an integer flag that can be used by algorithms that operate on the 
            <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.DcelFace.UserData">
      <summary>
            Gets or sets user-defined data.
            </summary>
    </member>
    <member name="T:DigitalRune.Geometry.Meshes.DcelMesh">
      <summary>
            A mesh represented by a Doubly-Connected Edge List (DCEL).
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh" /> class</summary>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.AreTagsEqualTo(System.Int32)">
      <summary>
            Gets a value indicating whether the tags of all components in the mesh are equal to the
            given tag value.
            </summary>
      <param name="tag">The reference tag value.</param>
      <returns>
        <see langword="true" /> if the tags of all components are equal to <paramref name="tag" />;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.Contains(DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
      <summary>
            Determines whether the specified point is contained in the mesh. (This method assumes that
            the mesh is a convex polyhedron.)
            </summary>
      <param name="point">The point.</param>
      <param name="epsilon">
            The epsilon tolerance. A point counts as "contained" if the distance to the mesh surface
            is less than this value. Use a small positive value, e.g. 0.001f, for numerical robustness.
            </param>
      <returns>
        <see langword="true" /> if the specified point is contained; otherwise, <see langword="false" />.
            (The result is undefined if the mesh is not a convex polyhedron.)
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.CreateCube">
      <summary>
            Creates a mesh for unit cube.
            </summary>
      <returns>The DCEL mesh that represent a unit cube.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.CutConvex(DigitalRune.Geometry.Shapes.Plane)">
      <summary>
            Cuts mesh with a plane.
            </summary>
      <param name="plane">The plane.</param>
      <returns>
            The mesh where the parts above the plane are removed. A new face is inserted at the cut.
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.DcelMesh.Dirty">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh" /> is dirty.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.DcelMesh.Edges">
      <summary>
            Gets the edges (as a read-only list).
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.DcelMesh.Faces">
      <summary>
            Gets the faces (as a read-only list).
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.FromTriangleMesh(DigitalRune.Geometry.Meshes.ITriangleMesh)">
      <summary>
            Converts the given <see cref="T:DigitalRune.Geometry.Meshes.ITriangleMesh" /> to a <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh" />.
            </summary>
      <param name="mesh">The triangle mesh.</param>
      <returns>
            The <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mesh" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.FromTriangleMesh(DigitalRune.Geometry.Meshes.TriangleMesh)">
      <summary>
            Converts the given <see cref="T:DigitalRune.Geometry.Meshes.ITriangleMesh" /> to a <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh" />.
            </summary>
      <param name="mesh">The triangle mesh.</param>
      <returns>
            The <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mesh" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mesh" /> has no vertices or vertex indices.
            </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="mesh" /> consists of several unconnected components or sub-meshes.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.GetAabb">
      <summary>
            Gets the axis-aligned bounding box of this mesh.
            </summary>
      <returns>
            The AABB of this mesh.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.IsClosed">
      <summary>
            Determines whether this mesh is a closed mesh.
            </summary>
      <returns>
        <see langword="true" /> if this instance is a closed mesh; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.IsConvex">
      <summary>
            Determines whether this mesh is a convex mesh.
            </summary>
      <returns>
        <see langword="true" /> if this mesh is a convex mesh; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.IsConvex(System.Single)">
      <summary>
            Determines whether this mesh is a convex mesh using a specific tolerance.
            </summary>
      <param name="epsilon">
            The epsilon tolerance value. Numerical errors within this tolerance are accepted. This value 
            is automatically scaled with the mesh size. Recommended values are 0.001 or 0.0001. 
            </param>
      <returns>
        <see langword="true" /> if this mesh is a convex mesh; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.IsTriangleMesh">
      <summary>
            Determines whether the mesh is a valid triangle mesh.
            </summary>
      <returns>
        <see langword="true" /> if the mesh is a valid triangle mesh; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.IsValid">
      <summary>
            Determines whether this instance is a valid mesh.
            </summary>
      <returns>
        <see langword="true" /> if this instance is valid; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.IsValid(System.String@)">
      <summary>
            Determines whether this instance is a valid mesh and returns an error description.
            </summary>
      <param name="errorDescription">
            The error description or <see langword="null" /> if the mesh is valid.
            </param>
      <returns>
        <see langword="true" /> if this instance is valid; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.ResetTags">
      <summary>
            Resets the tags in the DCEL data. (Tags are set to 0.)
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.ToTriangleMesh">
      <summary>
            Converts this mesh to a <see cref="T:DigitalRune.Geometry.Meshes.TriangleMesh" />.
            </summary>
      <returns>A triangle mesh that represents the same mesh.</returns>
      <exception cref="T:DigitalRune.Geometry.GeometryException">The DCEL mesh is invalid.</exception>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.DcelMesh.Vertex">
      <summary>
            Gets or sets the vertex.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.DcelMesh.Vertices">
      <summary>
            Gets the vertices (as a read-only list).
            </summary>
    </member>
    <member name="T:DigitalRune.Geometry.Meshes.DcelVertex">
      <summary>
            Vertex data structure for a Doubly-Connected Edge List (DCEL).
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.DcelVertex.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.DcelVertex" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.DcelVertex.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Meshes.DcelEdge)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.DcelVertex" /> class with a given position and
            edge.
            </summary>
      <param name="position">The position.</param>
      <param name="edge">The edge.</param>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.DcelVertex.Edge">
      <summary>
            Gets or sets an outgoing edge.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.DcelVertex.Position">
      <summary>
            Gets or sets the coordinates of the vertex.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.DcelVertex.Tag">
      <summary>
            Gets or sets an integer flag that can be used by algorithms that operate on the 
            <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.DcelVertex.UserData">
      <summary>
            Gets or sets user-defined data.
            </summary>
    </member>
    <member name="T:DigitalRune.Geometry.Meshes.ITriangleMesh">
      <summary>
            Represents a triangle mesh.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.ITriangleMesh.GetTriangle(System.Int32)">
      <summary>
            Gets the triangle with the given index.
            </summary>
      <param name="index">The index.</param>
      <returns>The triangle with the given index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.ITriangleMesh.NumberOfTriangles">
      <summary>
            Gets the number of triangles.
            </summary>
    </member>
    <member name="T:DigitalRune.Geometry.Meshes.TriangleMesh">
      <summary>
            Provides a simple <see cref="T:DigitalRune.Geometry.Meshes.ITriangleMesh" /> implementation using vertex and index lists.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.TriangleMesh" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.TriangleMesh" /> class with the specified 
            initial capacity.
            </summary>
      <param name="verticesCapacity">
            The number of vertices that the new triangle mesh can initially store.
            </param>
      <param name="indicesCapacity">
            The number of indices that the new triangle mesh can initially store.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="verticesCapacity" /> or <paramref name="indicesCapacity" /> is less than 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.Add(DigitalRune.Geometry.Meshes.ITriangleMesh)">
      <summary>
            Adds the triangles of the specified mesh (without vertex welding).
            </summary>
      <param name="mesh">The mesh.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.Add(DigitalRune.Geometry.Meshes.ITriangleMesh,System.Boolean)">
      <summary>
            Adds the triangles of the specified mesh.
            </summary>
      <param name="mesh">The mesh.</param>
      <param name="weldVerticesBruteForce">
            If set to <see langword="true" />, vertex welding is performed. A brute-force method is used
            for welding which can be very slow for large triangle meshes. For large meshes it is 
            recommended to call <see cref="M:DigitalRune.Geometry.Meshes.TriangleMesh.WeldVertices" /> after all triangles have been added.
            </param>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.Add(DigitalRune.Geometry.Shapes.Triangle)">
      <summary>
            Adds the triangle (without vertex welding).
            </summary>
      <param name="triangle">The triangle.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.Add(DigitalRune.Geometry.Shapes.Triangle,System.Boolean)">
      <summary>
            Adds the triangle.
            </summary>
      <param name="triangle">The triangle.</param>
      <param name="weldVerticesBruteForce">
            If set to <see langword="true" />, vertex welding is performed. A brute-force method is used
            for welding which can be very slow for large triangle meshes. For large meshes it is 
            recommended to call <see cref="M:DigitalRune.Geometry.Meshes.TriangleMesh.WeldVertices" /> after all triangles have been added.
            </param>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.Add(DigitalRune.Geometry.Shapes.Triangle,System.Boolean,System.Single,System.Boolean)">
      <summary>
            Adds the triangle.
            </summary>
      <param name="triangle">The triangle.</param>
      <param name="weldVerticesBruteForce">
            If set to <see langword="true" />, vertex welding is performed. A brute-force method is used
            for welding which can be very slow for large triangle meshes. For large meshes it is 
            recommended to call <see cref="M:DigitalRune.Geometry.Meshes.TriangleMesh.WeldVertices" /> after all triangles have been added.
            </param>
      <param name="vertexPositionTolerance">
            The vertex position tolerance. If the vertex positions are within this range, they are 
            treated as identical vertices. This value is used for vertex welding and to decide
            if a triangle is degenerate. 
            </param>
      <param name="removeDegenerateTriangles">
            If set to <see langword="true" /> degenerate triangles will not be added to the mesh.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="vertexPositionTolerance" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Geometry.Meshes.TriangleMesh" /> that is a copy of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Geometry.Meshes.TriangleMesh" /> that is a copy of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.ComputeNormals(System.Boolean,System.Single)">
      <summary>
            Computes the mesh normals.
            </summary>
      <param name="useWeightedAverage">
            If set to <see langword="true" /> the influence of each triangle normal is weighted by the 
            triangle area; otherwise, all triangle normals have the same weight.
            </param>
      <param name="angleLimit">
            The angle limit in radians. Normals are only merged if the angle between the triangle
            normals is equal to or less than the angle limit. Set this value to -1 to disable the angle
            limit (all normals of one vertex are merged). 
            </param>
      <returns>
            If no angle limit is used (angle limit is -1), an array with one normal per vertex is 
            returned. If an angle limit is used, an array with one normal per index is used.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.FromModel(Microsoft.Xna.Framework.Graphics.Model)">
      <summary>
            Creates a triangle mesh from an XNA <see cref="T:Microsoft.Xna.Framework.Graphics.Model" />. 
            (Only available in the XNA-compatible build, except Silverlight.)
            </summary>
      <param name="model">The XNA model.</param>
      <returns>
            A triangle mesh containing all triangles of the specified model.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.GetTriangle(System.Int32)">
      <summary>
            Gets the triangle with the given index.
            </summary>
      <param name="index">The index.</param>
      <returns>The triangle with the given index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is out of range.
            </exception>
      <exception cref="T:DigitalRune.Geometry.GeometryException">
            Either <see cref="P:DigitalRune.Geometry.Meshes.TriangleMesh.Vertices" /> or <see cref="P:DigitalRune.Geometry.Meshes.TriangleMesh.Indices" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.TriangleMesh.Indices">
      <summary>
            Gets or sets the indices.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.TriangleMesh.NumberOfTriangles">
      <summary>
            Gets the number of triangles.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.ReverseWindingOrder">
      <summary>
            Changes the winding order of all triangles.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.System#ICloneable#Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.TriangleMesh.Tag">
      <summary>
            Gets or sets custom information.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.Transform(DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Transforms all vertices by the given matrix.
            </summary>
      <param name="matrix">The transformation matrix.</param>
    </member>
    <member name="P:DigitalRune.Geometry.Meshes.TriangleMesh.Vertices">
      <summary>
            Gets or sets the vertices.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.WeldVertices">
      <summary>
            Removes duplicate vertices.
            </summary>
      <returns>
            The number of removed vertices.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.WeldVertices(System.Single)">
      <summary>
            Removes duplicate vertices.
            </summary>
      <param name="vertexPositionTolerance">
            The vertex position tolerance. If the distance between two vertices is less than this value,
            the vertices are merged.
            </param>
      <returns>The number of removed vertices.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="vertexPositionTolerance" /> is negative or 0.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Meshes.VertexAdjacency">
      <summary>
            Stores the adjacency lists for the vertices of a mesh. (For internal use only.)
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Meshes.VertexAdjacency.#ctor(DigitalRune.Geometry.Meshes.DcelMesh)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.VertexAdjacency" /> class.
            </summary>
      <param name="mesh">The mesh for which the adjacency information is built.</param>
      <exception cref="T:System.NotSupportedException">
            Too many vertices in convex hull. Max. 65534 vertices in convex hull are supported.
            </exception>
    </member>
    <member name="F:DigitalRune.Geometry.Meshes.VertexAdjacency.ListIndices">
      <summary>
            The start indices of the adjacency list of a given vertex.
            </summary>
    </member>
    <member name="F:DigitalRune.Geometry.Meshes.VertexAdjacency.Lists">
      <summary>
            The adjacency lists of all vertices stored in a single array.
            </summary>
    </member>
    <member name="T:DigitalRune.Geometry.Partitioning.AabbTree`1">
      <summary>
            Represents a bounding volume tree using axis-aligned bounding boxes (AABBs).
            </summary>
      <typeparam name="T">The type of item in the spatial partition.</typeparam>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Partitioning.AabbTree`1" /> class</summary>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.AabbTree`1.BottomUpBuildThreshold">
      <summary>
            Gets or sets the threshold that determines when a bottom-up tree build method is used.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.CloneCore(DigitalRune.Geometry.Partitioning.BasePartition{`0})">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" />.
            </summary>
      <param name="sourcePartition">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" /> derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.GetClosestPointCandidates(DigitalRune.Geometry.Shapes.Aabb,System.Single,System.Func{`0,System.Single})">
      <summary>
            Gets all items that are candidates for the smallest closest-point distance to a given
            axis-aligned bounding box (AABB).
            </summary>
      <param name="aabb">The axis-aligned bounding box (AABB).</param>
      <param name="maxDistanceSquared">
            The allowed squared distance between two points. (This an optional parameter that is used 
            internally to improve performance. The <paramref name="callback" /> might still be called 
            with an item that has a distance greater than <c>Math.Sqrt(maxDistanceSquared)</c>! So use 
            this parameter with care. To check all items, set the parameter to 
            <see cref="F:System.Single.PositiveInfinity" />.)
            </param>
      <param name="callback">
            The callback that is called with each found candidate item. The method must compute the
            closest-point on the candidate item and return the squared closest-point distance.
            </param>
      <returns>
            The squared closest-point distance found during the search. -1 if the search was aborted or 
            the search space is empty.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.GetClosestPointCandidates(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,System.Func{`0,`0,System.Single})">
      <summary>
            Gets all items that are candidates for the smallest closest-point distance to items in a
            given partition.
            </summary>
      <param name="scale">The scale of this spatial partition.</param>
      <param name="pose">The pose of this spatial partition.</param>
      <param name="otherPartition">The other spatial partition to test against.</param>
      <param name="otherScale">The scale of the <paramref name="otherPartition" />.</param>
      <param name="otherPose">
            The pose of the <paramref name="otherPartition" /> relative to this spatial partition.
            </param>
      <param name="callback">
            The callback that is called with each found candidate item. The method must compute the
            closest-point on the candidate item and return the squared closest-point distance.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartition" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.GetOverlaps(DigitalRune.Geometry.Partitioning.ISpatialPartition{`0})">
      <summary>
            Gets overlaps between all items of this spatial partition and the items of another spatial
            partition.
            </summary>
      <param name="otherPartition">The spatial partition to test against.</param>
      <returns>
            All pairwise overlaps between items of this spatial partition and
            <paramref name="otherPartition" />. In each returned <see cref="T:DigitalRune.Collections.Pair`1" /> the first item 
            (see <see cref="P:DigitalRune.Collections.Pair`1.First" />) is from this partition and the second item (see
            <see cref="P:DigitalRune.Collections.Pair`1.Second" />) is from <paramref name="otherPartition" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartition" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.GetOverlaps(DigitalRune.Geometry.Shapes.Aabb)">
      <summary>
            Gets the items that touch the given AABB.
            </summary>
      <param name="aabb">The axis-aligned bounding box.</param>
      <returns>All items that touch the given AABB.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.GetOverlaps(DigitalRune.Geometry.Shapes.Ray)">
      <summary>
            Gets the items that touch the given ray.
            </summary>
      <param name="ray">The ray.</param>
      <returns>All items that are hit by the ray.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.GetOverlaps(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Gets overlaps between all items of this spatial partition and the items of another spatial 
            partition.
            </summary>
      <param name="scale">The scale of this spatial partition.</param>
      <param name="pose">The pose of this spatial partition.</param>
      <param name="otherPartition">The other spatial partition to test against.</param>
      <param name="otherScale">The scale of the <paramref name="otherPartition" />.</param>
      <param name="otherPose">The pose of the <paramref name="otherPartition" />.</param>
      <returns>
            All pairwise overlaps between items of this spatial partition and 
            <paramref name="otherPartition" />. In each returned <see cref="T:DigitalRune.Collections.Pair`1" /> the first item
            (see <see cref="P:DigitalRune.Collections.Pair`1.First" />) is from this partition and the second item (see 
            <see cref="P:DigitalRune.Collections.Pair`1.Second" />) is from <paramref name="otherPartition" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartition" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1">
      <summary>
            Builds a bounding volume tree using axis-aligned bounding boxes (AABBs), which adapts
            automatically when items are added, moved, or removed.
            </summary>
      <typeparam name="T">The type of item in the spatial partition.</typeparam>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1" /> class</summary>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.BottomUpBuildThreshold">
      <summary>
            Gets or sets the threshold that determines when a bottom-up tree build method is used.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.CloneCore(DigitalRune.Geometry.Partitioning.BasePartition{`0})">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" />.
            </summary>
      <param name="sourcePartition">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" /> derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.GetClosestPointCandidates(DigitalRune.Geometry.Shapes.Aabb,System.Single,System.Func{`0,System.Single})">
      <summary>
            Gets all items that are candidates for the smallest closest-point distance to a given
            axis-aligned bounding box (AABB).
            </summary>
      <param name="aabb">The axis-aligned bounding box (AABB).</param>
      <param name="maxDistanceSquared">
            The allowed squared distance between two points. (This an optional parameter that is used 
            internally to improve performance. The <paramref name="callback" /> might still be called 
            with an item that has a distance greater than <c>Math.Sqrt(maxDistanceSquared)</c>! So use 
            this parameter with care. To check all items, set the parameter to 
            <see cref="F:System.Single.PositiveInfinity" />.)
            </param>
      <param name="callback">
            The callback that is called with each found candidate item. The method must compute the
            closest-point on the candidate item and return the squared closest-point distance.
            </param>
      <returns>
            The squared closest-point distance found during the search. -1 if the search was aborted or 
            the search space is empty.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.GetClosestPointCandidates(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,System.Func{`0,`0,System.Single})">
      <summary>
            Gets all items that are candidates for the smallest closest-point distance to items in a
            given partition.
            </summary>
      <param name="scale">The scale of this spatial partition.</param>
      <param name="pose">The pose of this spatial partition.</param>
      <param name="otherPartition">The other spatial partition to test against.</param>
      <param name="otherScale">The scale of the <paramref name="otherPartition" />.</param>
      <param name="otherPose">
            The pose of the <paramref name="otherPartition" /> relative to this spatial partition.
            </param>
      <param name="callback">
            The callback that is called with each found candidate item. The method must compute the
            closest-point on the candidate item and return the squared closest-point distance.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartition" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.GetOverlaps(DigitalRune.Geometry.Partitioning.ISpatialPartition{`0})">
      <summary>
            Gets overlaps between all items of this spatial partition and the items of another spatial
            partition.
            </summary>
      <param name="otherPartition">The spatial partition to test against.</param>
      <returns>
            All pairwise overlaps between items of this spatial partition and
            <paramref name="otherPartition" />. In each returned <see cref="T:DigitalRune.Collections.Pair`1" /> the first item 
            (see <see cref="P:DigitalRune.Collections.Pair`1.First" />) is from this partition and the second item (see
            <see cref="P:DigitalRune.Collections.Pair`1.Second" />) is from <paramref name="otherPartition" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartition" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.GetOverlaps(DigitalRune.Geometry.Shapes.Aabb)">
      <summary>
            Gets the items that touch the given AABB.
            </summary>
      <param name="aabb">The axis-aligned bounding box.</param>
      <returns>All items that touch the given AABB.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.GetOverlaps(DigitalRune.Geometry.Shapes.Ray)">
      <summary>
            Gets the items that touch the given ray.
            </summary>
      <param name="ray">The ray.</param>
      <returns>All items that are hit by the ray.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.GetOverlaps(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Gets overlaps between all items of this spatial partition and the items of another spatial 
            partition.
            </summary>
      <param name="scale">The scale of this spatial partition.</param>
      <param name="pose">The pose of this spatial partition.</param>
      <param name="otherPartition">The other spatial partition to test against.</param>
      <param name="otherScale">The scale of the <paramref name="otherPartition" />.</param>
      <param name="otherPose">The pose of the <paramref name="otherPartition" />.</param>
      <returns>
            All pairwise overlaps between items of this spatial partition and 
            <paramref name="otherPartition" />. In each returned <see cref="T:DigitalRune.Collections.Pair`1" /> the first item
            (see <see cref="P:DigitalRune.Collections.Pair`1.First" />) is from this partition and the second item (see 
            <see cref="P:DigitalRune.Collections.Pair`1.Second" />) is from <paramref name="otherPartition" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartition" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Partitioning.BasePartition`1">
      <summary>
            Provides basic functionality of an <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1" />. (For internal use 
            only.)
            </summary>
      <typeparam name="T">The type of items in the spatial partition.</typeparam>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.BasePartition`1.Aabb">
      <summary>
            Gets the axis-aligned bounding box (AABB) that contains all items.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Add(`0)">
      <summary>
            Adds an item to the <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Clear">
      <summary>
            Removes all items from the <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" /> that is a clone (deep copy) of the current
            instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Geometry.GeometricObject" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.CloneCore(DigitalRune.Geometry.Partitioning.BasePartition{`0})">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" />.
            </summary>
      <param name="sourcePartition">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Contains(`0)">
      <summary>
            Determines whether the <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is found in the 
            <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting 
            at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from 
            <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
      <param name="arrayIndex">
            The zero-based index in <paramref name="array" /> at which copying begins.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
            </exception>
      <exception cref="T:System.ArgumentException">
            One of the following conditions:
            <list type="bullet"><item><description><paramref name="array" /> is multidimensional.
            </description></item><item><description><paramref name="arrayIndex" /> is equal to or greater than the length of 
            <paramref name="array" />.
            </description></item><item><description>
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the 
            available space from <paramref name="arrayIndex" /> to the end of the destination 
            <paramref name="array" />.
            </description></item><item><description>
            Type <typeparamref name="T" /> cannot be cast automatically to the type of the destination 
            <paramref name="array" />.
            </description></item></list></exception>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.BasePartition`1.Count">
      <summary>
            Gets the number of items contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.BasePartition`1.EnableSelfOverlaps">
      <summary>
            Gets or sets a value indicating whether self overlaps are computed.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.BasePartition`1.Filter">
      <summary>
            Gets or sets the filter that is used to filter overlaps of two items.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.BasePartition`1.GetAabbForItem">
      <summary>
            Gets or sets the method that computes the <see cref="T:DigitalRune.Geometry.Shapes.Aabb" /> of an item.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A enumerator that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.GetOverlaps">
      <summary>
            Gets overlaps of all items contained in this spatial partition.
            </summary>
      <returns>
            All pairs of overlapping items of this spatial partition.
            </returns>
      <exception cref="T:DigitalRune.Geometry.GeometryException">
        <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.EnableSelfOverlaps" /> is <see langword="false" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.GetOverlaps(DigitalRune.Geometry.Partitioning.ISpatialPartition{`0})">
      <summary>
            Gets overlaps between all items of this spatial partition and the items of another spatial
            partition.
            </summary>
      <param name="otherPartition">The spatial partition to test against.</param>
      <returns>
            All pairwise overlaps between items of this spatial partition and
            <paramref name="otherPartition" />. In each returned <see cref="T:DigitalRune.Collections.Pair`1" /> the first item 
            (see <see cref="P:DigitalRune.Collections.Pair`1.First" />) is from this partition and the second item (see
            <see cref="P:DigitalRune.Collections.Pair`1.Second" />) is from <paramref name="otherPartition" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartition" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.GetOverlaps(DigitalRune.Geometry.Shapes.Aabb)">
      <summary>
            Gets the items that touch the given AABB.
            </summary>
      <param name="aabb">The axis-aligned bounding box.</param>
      <returns>All items that touch the given AABB.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.GetOverlaps(DigitalRune.Geometry.Shapes.Ray)">
      <summary>
            Gets the items that touch the given ray.
            </summary>
      <param name="ray">The ray.</param>
      <returns>All items that are hit by the ray.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.GetOverlaps(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Gets overlaps between all items of this spatial partition and the items of another spatial 
            partition.
            </summary>
      <param name="scale">The scale of this spatial partition.</param>
      <param name="pose">The pose of this spatial partition.</param>
      <param name="otherPartition">The other spatial partition to test against.</param>
      <param name="otherScale">The scale of the <paramref name="otherPartition" />.</param>
      <param name="otherPose">The pose of the <paramref name="otherPartition" />.</param>
      <returns>
            All pairwise overlaps between items of this spatial partition and 
            <paramref name="otherPartition" />. In each returned <see cref="T:DigitalRune.Collections.Pair`1" /> the first item
            (see <see cref="P:DigitalRune.Collections.Pair`1.First" />) is from this partition and the second item (see 
            <see cref="P:DigitalRune.Collections.Pair`1.Second" />) is from <paramref name="otherPartition" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartition" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.GetOverlaps(`0)">
      <summary>
            Gets the items that touch the given item.
            </summary>
      <param name="item">
            The item. (Whether the given item must be a part of the spatial partition or whether it can
            be an external object depends on the <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.GetAabbForItem" /> callback. The 
            <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.GetAabbForItem" /> must be able to compute the AABB for the given item.)
            </param>
      <returns>All items that touch the given item.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Invalidate">
      <summary>
            Invalidates the cached spatial information of all items in the spatial partition.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Invalidate(`0)">
      <summary>
            Invalidates the cached spatial information of the specified item.
            </summary>
      <param name="item">The item that has moved or changed its shape.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Remove(`0)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" />.
            </summary>
      <param name="item">
            The object to remove from the <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" />.
            </param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> was successfully removed from the 
            <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" />; otherwise, <see langword="false" />. This method also 
            returns <see langword="false" /> if <paramref name="item" /> is not found in the original 
            <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.BasePartition`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.System#ICloneable#Clone">
      <summary>
            Creates a new object that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new object that is a clone (deep copy) of this instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Update(System.Boolean)">
      <summary>
            Updates the internal structure of this <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1" />.
            </summary>
      <param name="forceRebuild">
            If set to <see langword="true" /> the internal structure will be rebuilt from scratch. If set 
            to <see langword="false" /> the spatial partition can decide to rebuild everything or refit 
            only the invalidated parts.
            </param>
      <exception cref="T:DigitalRune.Geometry.GeometryException">
            Cannot update spatial partition. The property <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.GetAabbForItem" /> is not set.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree">
      <summary>
            Represents a compressed and optimized bounding volume tree using axis-aligned bounding boxes 
            (AABBs).
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Aabb">
      <summary>
            Gets the axis-aligned bounding box (AABB) that contains all items.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Add(System.Int32)">
      <summary>
            Adds an item to the <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.BottomUpBuildThreshold">
      <summary>
            Gets or sets the threshold that determines when a bottom-up tree build method is used.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Clear">
      <summary>
            Removes all items from the <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree" /> that is a clone (deep copy) of the current
            instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Geometry.GeometricObject" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Contains(System.Int32)">
      <summary>
            Determines whether the <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is found in the 
            <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.CopyTo(System.Int32[],System.Int32)">
      <summary>
            Copies the elements of the tree to an <see cref="T:System.Array" />, starting at a particular 
            <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from 
            <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree" />. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
      <param name="arrayIndex">
            The zero-based index in <paramref name="array" /> at which copying begins.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional. Or <paramref name="arrayIndex" /> is equal to 
            or greater than the length of <paramref name="array" />. Or the number of elements in the 
            source <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree" /> is greater than the available space from 
            <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Count">
      <summary>
            Gets the number of items contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.EnableSelfOverlaps">
      <summary>
            Gets or sets a value indicating whether self overlaps are computed.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Filter">
      <summary>
            Gets or sets the filter that is used to filter overlaps of two items.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetAabbForItem">
      <summary>
            Gets or sets the method that computes the <see cref="T:DigitalRune.Geometry.Shapes.Aabb" /> of an item.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetClosestPointCandidates(DigitalRune.Geometry.Shapes.Aabb,System.Single,System.Func{System.Int32,System.Single})">
      <summary>
            Gets all items that are candidates for the smallest closest-point distance to a given
            axis-aligned bounding box (AABB).
            </summary>
      <param name="aabb">The axis-aligned bounding box (AABB).</param>
      <param name="maxDistanceSquared">
            The allowed squared distance between two points. (This an optional parameter that is used 
            internally to improve performance. The <paramref name="callback" /> might still be called 
            with an item that has a distance greater than <c>Math.Sqrt(maxDistanceSquared)</c>! So use 
            this parameter with care. To check all items, set the parameter to 
            <see cref="F:System.Single.PositiveInfinity" />.)
            </param>
      <param name="callback">
            The callback that is called with each found candidate item. The method must compute the
            closest-point on the candidate item and return the squared closest-point distance.
            </param>
      <returns>
            The squared closest-point distance found during the search. -1 if the search was aborted or 
            the search space is empty.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetClosestPointCandidates(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{System.Int32},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,System.Func{System.Int32,System.Int32,System.Single})">
      <summary>
            Gets all items that are candidates for the smallest closest-point distance to items in a
            given partition.
            </summary>
      <param name="scale">The scale of this spatial partition.</param>
      <param name="pose">The pose of this spatial partition.</param>
      <param name="otherPartition">The other spatial partition to test against.</param>
      <param name="otherScale">The scale of the <paramref name="otherPartition" />.</param>
      <param name="otherPose">
            The pose of the <paramref name="otherPartition" /> relative to this spatial partition.
            </param>
      <param name="callback">
            The callback that is called with each found candidate item. The method must compute the
            closest-point on the candidate item and return the squared closest-point distance.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartition" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetOverlaps">
      <summary>
            Gets overlaps of all items contained in this spatial partition.
            </summary>
      <returns>
            All pairs of overlapping items of this spatial partition.
            </returns>
      <exception cref="T:DigitalRune.Geometry.GeometryException">
        <see cref="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.EnableSelfOverlaps" /> is <see langword="false" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetOverlaps(DigitalRune.Geometry.Partitioning.ISpatialPartition{System.Int32})">
      <summary>
            Gets overlaps between all items of this spatial partition and the items of another spatial
            partition.
            </summary>
      <param name="otherPartition">The spatial partition to test against.</param>
      <returns>
            All pairwise overlaps between items of this spatial partition and
            <paramref name="otherPartition" />. In each returned <see cref="T:DigitalRune.Collections.Pair`1" /> the first item 
            (see <see cref="P:DigitalRune.Collections.Pair`1.First" />) is from this partition and the second item (see
            <see cref="P:DigitalRune.Collections.Pair`1.Second" />) is from <paramref name="otherPartition" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartition" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetOverlaps(DigitalRune.Geometry.Shapes.Aabb)">
      <summary>
            Gets the items that touch the given AABB.
            </summary>
      <param name="aabb">The axis-aligned bounding box.</param>
      <returns>All items that touch the given AABB.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetOverlaps(DigitalRune.Geometry.Shapes.Ray)">
      <summary>
            Gets the items that touch the given ray.
            </summary>
      <param name="ray">The ray.</param>
      <returns>All items that are hit by the ray.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetOverlaps(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{System.Int32},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Gets overlaps between all items of this spatial partition and the items of another spatial 
            partition.
            </summary>
      <param name="scale">The scale of this spatial partition.</param>
      <param name="pose">The pose of this spatial partition.</param>
      <param name="otherPartition">The other spatial partition to test against.</param>
      <param name="otherScale">The scale of the <paramref name="otherPartition" />.</param>
      <param name="otherPose">The pose of the <paramref name="otherPartition" />.</param>
      <returns>
            All pairwise overlaps between items of this spatial partition and 
            <paramref name="otherPartition" />. In each returned <see cref="T:DigitalRune.Collections.Pair`1" /> the first item
            (see <see cref="P:DigitalRune.Collections.Pair`1.First" />) is from this partition and the second item (see 
            <see cref="P:DigitalRune.Collections.Pair`1.Second" />) is from <paramref name="otherPartition" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartition" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetOverlaps(System.Int32)">
      <summary>
            Gets the items that touch the given item.
            </summary>
      <param name="item">
            The item. (The given item must be part of the spatial partition. External items are not 
            supported.)
            </param>
      <returns>All items that touch the given item.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Invalidate">
      <summary>
            Invalidates the cached spatial information of all items in the spatial partition.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Invalidate(System.Int32)">
      <summary>
            Invalidates the cached spatial information of the specified item.
            </summary>
      <param name="item">The item that has moved or changed its shape.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Remove(System.Int32)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree" />.
            </summary>
      <param name="item">
            The object to remove from the <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree" />.
            </param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> was successfully removed from the 
            <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree" />; otherwise, <see langword="false" />. This method also 
            returns <see langword="false" /> if <paramref name="item" /> is not found in the original 
            <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.System#Collections#Generic#ICollection{System#Int32}#IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.System#ICloneable#Clone">
      <summary>
            Creates a new object that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new object that is a clone (deep copy) of this instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Update(System.Boolean)">
      <summary>
            Updates the internal structure of this <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1" />.
            </summary>
      <param name="forceRebuild">
            If set to <see langword="true" /> the internal structure will be rebuilt from scratch. If set 
            to <see langword="false" /> the spatial partition can decide to rebuild everything or refit 
            only the invalidated parts.
            </param>
    </member>
    <member name="T:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1">
      <summary>
            Filters item pairs with the help of a user-defined callback method.
            </summary>
      <typeparam name="T">The type of the items.</typeparam>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.#ctor(System.Func{DigitalRune.Collections.Pair{`0},System.Boolean})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1" /> class.
            </summary>
      <param name="filterCallback">The filter callback (can be <see langword="null" />).</param>
    </member>
    <member name="E:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.Changed">
      <summary>
            Occurs when the filter rules were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.Filter(DigitalRune.Collections.Pair{`0})">
      <summary>
            Filters the specified item pair.
            </summary>
      <param name="pair">The pair.</param>
      <returns>
        <see langword="true" /> if the pair should be processed (pair is accepted); otherwise,
            <see langword="false" /> if the pair should not be processed (pair is rejected).
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.FilterCallback">
      <summary>
            Gets or sets the filter callback.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.OnChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.Changed" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:System.EventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.RaiseChanged">
      <summary>
            Raises the <see cref="E:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.Changed" /> event.
            </summary>
    </member>
    <member name="T:DigitalRune.Geometry.Partitioning.DualPartition`1">
      <summary>
            Represents a spatial partition that internally uses two spatial partitions to manage items: 
            one for static/sleeping items and one for dynamic items.
            </summary>
      <typeparam name="T">The type of item in the spatial partition.</typeparam>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Partitioning.DualPartition`1" /> class which uses two 
            <see cref="T:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1" /> partitions.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.#ctor(DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Geometry.Partitioning.ISpatialPartition{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Partitioning.DualPartition`1" /> class using the given
            pair of spatial partitions.
            </summary>
      <param name="staticPartition">
            The spatial partition used for static/sleeping objects.
            </param>
      <param name="dynamicPartition">
            The spatial partition used for dynamic partition.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="staticPartition" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dynamicPartition" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.CloneCore(DigitalRune.Geometry.Partitioning.BasePartition{`0})">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" />.
            </summary>
      <param name="sourcePartition">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" /> derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.GetOverlaps(DigitalRune.Geometry.Partitioning.ISpatialPartition{`0})">
      <summary>
            Gets overlaps between all items of this spatial partition and the items of another spatial
            partition.
            </summary>
      <param name="otherPartition">The spatial partition to test against.</param>
      <returns>
            All pairwise overlaps between items of this spatial partition and
            <paramref name="otherPartition" />. In each returned <see cref="T:DigitalRune.Collections.Pair`1" /> the first item 
            (see <see cref="P:DigitalRune.Collections.Pair`1.First" />) is from this partition and the second item (see
            <see cref="P:DigitalRune.Collections.Pair`1.Second" />) is from <paramref name="otherPartition" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartition" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.GetOverlaps(DigitalRune.Geometry.Shapes.Aabb)">
      <summary>
            Gets the items that touch the given AABB.
            </summary>
      <param name="aabb">The axis-aligned bounding box.</param>
      <returns>All items that touch the given AABB.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.GetOverlaps(DigitalRune.Geometry.Shapes.Ray)">
      <summary>
            Gets the items that touch the given ray.
            </summary>
      <param name="ray">The ray.</param>
      <returns>All items that are hit by the ray.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.GetOverlaps(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Gets overlaps between all items of this spatial partition and the items of another spatial 
            partition.
            </summary>
      <param name="scale">The scale of this spatial partition.</param>
      <param name="pose">The pose of this spatial partition.</param>
      <param name="otherPartition">The other spatial partition to test against.</param>
      <param name="otherScale">The scale of the <paramref name="otherPartition" />.</param>
      <param name="otherPose">The pose of the <paramref name="otherPartition" />.</param>
      <returns>
            All pairwise overlaps between items of this spatial partition and 
            <paramref name="otherPartition" />. In each returned <see cref="T:DigitalRune.Collections.Pair`1" /> the first item
            (see <see cref="P:DigitalRune.Collections.Pair`1.First" />) is from this partition and the second item (see 
            <see cref="P:DigitalRune.Collections.Pair`1.Second" />) is from <paramref name="otherPartition" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartition" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.GetOverlaps(System.Collections.Generic.IList{DigitalRune.Geometry.Shapes.Plane})">
      <summary>
            Gets the items that touch the bounding volume ("k-DOP") defined by a set of planes.
            </summary>
      <param name="planes">
            The planes that define the bounding volume (k-DOP). Max 31 planes. The plane normals are
            pointing outwards. The plane does not need to be normalized, i.e. the plane normal does not
            need to be a unit vector.
            </param>
      <returns>
            All items that touch the bounding volume. (The result is conservative: It is guaranteed that
            the list contains all items that touch the bounding volume. But I it may also contain a few
            items that do not touch the bounding volume!)
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1">
      <summary>
            Represents a dynamic bounding volume tree using axis-aligned bounding boxes (AABBs).
            </summary>
      <typeparam name="T">The type of item in the spatial partition.</typeparam>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1" /> class</summary>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.BottomUpBuildThreshold">
      <summary>
            Gets or sets the threshold that determines when a bottom-up tree build method is used.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.CloneCore(DigitalRune.Geometry.Partitioning.BasePartition{`0})">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" />.
            </summary>
      <param name="sourcePartition">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" /> derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.EnableMotionPrediction">
      <summary>
            Gets a value indicating whether motion prediction is enabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.GetClosestPointCandidates(DigitalRune.Geometry.Shapes.Aabb,System.Single,System.Func{`0,System.Single})">
      <summary>
            Gets all items that are candidates for the smallest closest-point distance to a given
            axis-aligned bounding box (AABB).
            </summary>
      <param name="aabb">The axis-aligned bounding box (AABB).</param>
      <param name="maxDistanceSquared">
            The allowed squared distance between two points. (This an optional parameter that is used 
            internally to improve performance. The <paramref name="callback" /> might still be called 
            with an item that has a distance greater than <c>Math.Sqrt(maxDistanceSquared)</c>! So use 
            this parameter with care. To check all items, set the parameter to 
            <see cref="F:System.Single.PositiveInfinity" />.)
            </param>
      <param name="callback">
            The callback that is called with each found candidate item. The method must compute the
            closest-point on the candidate item and return the squared closest-point distance.
            </param>
      <returns>
            The squared closest-point distance found during the search. -1 if the search was aborted or 
            the search space is empty.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.GetClosestPointCandidates(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,System.Func{`0,`0,System.Single})">
      <summary>
            Gets all items that are candidates for the smallest closest-point distance to items in a
            given partition.
            </summary>
      <param name="scale">The scale of this spatial partition.</param>
      <param name="pose">The pose of this spatial partition.</param>
      <param name="otherPartition">The other spatial partition to test against.</param>
      <param name="otherScale">The scale of the <paramref name="otherPartition" />.</param>
      <param name="otherPose">
            The pose of the <paramref name="otherPartition" /> relative to this spatial partition.
            </param>
      <param name="callback">
            The callback that is called with each found candidate item. The method must compute the
            closest-point on the candidate item and return the squared closest-point distance.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartition" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.GetOverlaps(DigitalRune.Geometry.Partitioning.ISpatialPartition{`0})">
      <summary>
            Gets overlaps between all items of this spatial partition and the items of another spatial
            partition.
            </summary>
      <param name="otherPartition">The spatial partition to test against.</param>
      <returns>
            All pairwise overlaps between items of this spatial partition and
            <paramref name="otherPartition" />. In each returned <see cref="T:DigitalRune.Collections.Pair`1" /> the first item 
            (see <see cref="P:DigitalRune.Collections.Pair`1.First" />) is from this partition and the second item (see
            <see cref="P:DigitalRune.Collections.Pair`1.Second" />) is from <paramref name="otherPartition" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartition" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.GetOverlaps(DigitalRune.Geometry.Shapes.Aabb)">
      <summary>
            Gets the items that touch the given AABB.
            </summary>
      <param name="aabb">The axis-aligned bounding box.</param>
      <returns>All items that touch the given AABB.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.GetOverlaps(DigitalRune.Geometry.Shapes.Ray)">
      <summary>
            Gets the items that touch the given ray.
            </summary>
      <param name="ray">The ray.</param>
      <returns>All items that are hit by the ray.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.GetOverlaps(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Gets overlaps between all items of this spatial partition and the items of another spatial 
            partition.
            </summary>
      <param name="scale">The scale of this spatial partition.</param>
      <param name="pose">The pose of this spatial partition.</param>
      <param name="otherPartition">The other spatial partition to test against.</param>
      <param name="otherScale">The scale of the <paramref name="otherPartition" />.</param>
      <param name="otherPose">The pose of the <paramref name="otherPartition" />.</param>
      <returns>
            All pairwise overlaps between items of this spatial partition and 
            <paramref name="otherPartition" />. In each returned <see cref="T:DigitalRune.Collections.Pair`1" /> the first item
            (see <see cref="P:DigitalRune.Collections.Pair`1.First" />) is from this partition and the second item (see 
            <see cref="P:DigitalRune.Collections.Pair`1.Second" />) is from <paramref name="otherPartition" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartition" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.GetOverlaps(System.Collections.Generic.IList{DigitalRune.Geometry.Shapes.Plane})">
      <summary>
            Gets the items that touch the bounding volume ("k-DOP") defined by a set of planes.
            </summary>
      <param name="planes">
            The planes that define the bounding volume (k-DOP). Max 31 planes. The plane normals are
            pointing outwards. The plane does not need to be normalized, i.e. the plane normal does not
            need to be a unit vector.
            </param>
      <returns>
            All items that touch the bounding volume. (The result is conservative: It is guaranteed that
            the list contains all items that touch the bounding volume. But I it may also contain a few
            items that do not touch the bounding volume!)
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Invalidate(`0)">
      <summary>
            Invalidates the cached spatial information of the specified item.
            </summary>
      <param name="item">The item that has moved or changed its shape.</param>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.MotionPrediction">
      <summary>
            Gets or sets the number of frames a linear motion is predicted into the future. (Only 
            applied if motion prediction is enabled.)
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.OptimizationPerFrame">
      <summary>
            Gets or set the amount of incremental optimization per frame (time step).
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is out of range. Allowed range is [0, 1].
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.RelativeMargin">
      <summary>
            Gets or sets a relative margin that is added to the AABB of moving objects. (Only applied
            if motion prediction is enabled.)
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is out of range. Allowed range is [0, 1].
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Partitioning.IPairFilter`1">
      <summary>
            Filters a pair of items.
            </summary>
      <typeparam name="T">The type of the items.</typeparam>
    </member>
    <member name="E:DigitalRune.Geometry.Partitioning.IPairFilter`1.Changed">
      <summary>
            Occurs when the filter rules were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.IPairFilter`1.Filter(DigitalRune.Collections.Pair{`0})">
      <summary>
            Filters the specified item pair.
            </summary>
      <param name="pair">The pair.</param>
      <returns>
        <see langword="true" /> if the pair should be processed (pair is accepted); otherwise,
            <see langword="false" /> if the pair should not be processed (pair is rejected).
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1">
      <summary>
            Efficiently manages items in a space or of a model using their spatial properties.
            </summary>
      <typeparam name="T">The type of the items.</typeparam>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Aabb">
      <summary>
            Gets the axis-aligned bounding box (AABB) that contains all items.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.EnableSelfOverlaps">
      <summary>
            Gets or sets a value indicating whether self overlaps are computed.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Filter">
      <summary>
            Gets or sets the filter that is used to filter overlaps of two items.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.GetAabbForItem">
      <summary>
            Gets or sets the method that computes the <see cref="T:DigitalRune.Geometry.Shapes.Aabb" /> of an item.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.GetOverlaps">
      <summary>
            Gets overlaps of all items contained in this spatial partition.
            </summary>
      <returns>
            All pairs of overlapping items of this spatial partition. Overlaps of an item with itself
            are not returned.
            </returns>
      <exception cref="T:DigitalRune.Geometry.GeometryException">
        <see cref="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.EnableSelfOverlaps" /> is <see langword="false" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.GetOverlaps(DigitalRune.Geometry.Partitioning.ISpatialPartition{`0})">
      <summary>
            Gets overlaps between all items of this spatial partition and the items of another spatial 
            partition.
            </summary>
      <param name="otherPartition">The spatial partition to test against.</param>
      <returns>
            All pairwise overlaps between items of this spatial partition and 
            <paramref name="otherPartition" />. In each returned <see cref="T:DigitalRune.Collections.Pair`1" /> the first item (see 
            <see cref="P:DigitalRune.Collections.Pair`1.First" />) is from this partition and the second item (see 
            <see cref="P:DigitalRune.Collections.Pair`1.Second" />) is from <paramref name="otherPartition" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartition" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.GetOverlaps(DigitalRune.Geometry.Shapes.Aabb)">
      <summary>
            Gets the items that touch the given axis-aligned bounding box (AABB).
            </summary>
      <param name="aabb">The axis-aligned bounding box (AABB).</param>
      <returns>All items that touch the given AABB.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.GetOverlaps(DigitalRune.Geometry.Shapes.Ray)">
      <summary>
            Gets the items that touch the given ray.
            </summary>
      <param name="ray">The ray.</param>
      <returns>All items that are hit by the ray.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.GetOverlaps(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Gets overlaps between all items of this spatial partition and the items of another spatial 
            partition.
            </summary>
      <param name="scale">The scale of this spatial partition.</param>
      <param name="pose">The pose of this spatial partition.</param>
      <param name="otherPartition">The other spatial partition to test against.</param>
      <param name="otherScale">The scale of the <paramref name="otherPartition" />.</param>
      <param name="otherPose">The pose of the <paramref name="otherPartition" />.</param>
      <returns>
            All pairwise overlaps between items of this spatial partition and 
            <paramref name="otherPartition" />. In each returned <see cref="T:DigitalRune.Collections.Pair`1" /> the first item
            (see <see cref="P:DigitalRune.Collections.Pair`1.First" />) is from this partition and the second item (see 
            <see cref="P:DigitalRune.Collections.Pair`1.Second" />) is from <paramref name="otherPartition" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartition" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.GetOverlaps(`0)">
      <summary>
            Gets the items that touch the given item.
            </summary>
      <param name="item">
            The item. (The given item must be part of the spatial partition. In some cases external 
            objects are also supported. See documentation of derived types.)
            </param>
      <returns>All items that touch the given item.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Invalidate">
      <summary>
            Invalidates the cached spatial information of all items in the spatial partition.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Invalidate(`0)">
      <summary>
            Invalidates the cached spatial information of the specified item.
            </summary>
      <param name="item">The item that has moved or changed its shape.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Update(System.Boolean)">
      <summary>
            Updates the internal structure of this <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1" />.
            </summary>
      <param name="forceRebuild">
            If set to <see langword="true" /> the internal structure will be rebuilt from
            scratch. If set to <see langword="false" /> the spatial partition can decide
            to rebuild everything or refit only the invalidated parts.
            </param>
    </member>
    <member name="T:DigitalRune.Geometry.Partitioning.ISupportClosestPointQueries`1">
      <summary>
            Indicates that an object (normally a <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1" />) has special support
            for closest-point queries.
            </summary>
      <typeparam name="T">The type of the queried items.</typeparam>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.ISupportClosestPointQueries`1.GetClosestPointCandidates(DigitalRune.Geometry.Shapes.Aabb,System.Single,System.Func{`0,System.Single})">
      <summary>
            Gets all items that are candidates for the smallest closest-point distance to a given
            axis-aligned bounding box (AABB).
            </summary>
      <param name="aabb">The axis-aligned bounding box (AABB).</param>
      <param name="maxDistanceSquared">
            The allowed squared distance between two points. (This an optional parameter that is used 
            internally to improve performance. The <paramref name="callback" /> might still be called 
            with an item that has a distance greater than <c>Math.Sqrt(maxDistanceSquared)</c>! So use 
            this parameter with care. To check all items, set the parameter to 
            <see cref="F:System.Single.PositiveInfinity" />.)
            </param>
      <param name="callback">
            The callback that is called with each found candidate item. The method must compute the
            closest-point on the candidate item and return the squared closest-point distance.
            </param>
      <returns>
            The squared closest-point distance found during the search. -1 if the search was aborted or 
            the search space is empty.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.ISupportClosestPointQueries`1.GetClosestPointCandidates(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,System.Func{`0,`0,System.Single})">
      <summary>
            Gets all items that are candidates for the smallest closest-point distance to items in a
            given partition.
            </summary>
      <param name="scale">The scale of this spatial partition.</param>
      <param name="pose">The pose of this spatial partition.</param>
      <param name="otherPartition">The other spatial partition to test against.</param>
      <param name="otherScale">The scale of the <paramref name="otherPartition" />.</param>
      <param name="otherPose">
            The pose of the <paramref name="otherPartition" /> relative to this spatial partition.
            </param>
      <param name="callback">
            The callback that is called with each found candidate item. The method must compute the
            closest-point on the candidate item and return the squared closest-point distance.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartition" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Partitioning.ISupportFrustumCulling`1">
      <summary>
            Indicates that an object (normally a <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1" />) has special support 
            for frustum culling.
            </summary>
      <typeparam name="T">The type of the queried items.</typeparam>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.ISupportFrustumCulling`1.GetOverlaps(System.Collections.Generic.IList{DigitalRune.Geometry.Shapes.Plane})">
      <summary>
            Gets the items that touch the bounding volume ("k-DOP") defined by a set of planes.
            </summary>
      <param name="planes">
            The planes that define the bounding volume (k-DOP). Max 31 planes. The plane normals are
            pointing outwards. The plane does not need to be normalized, i.e. the plane normal does not
            need to be a unit vector.
            </param>
      <returns>
            All items that touch the bounding volume. (The result is conservative: It is guaranteed that
            the list contains all items that touch the bounding volume. But I it may also contain a few
            items that do not touch the bounding volume!)
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1">
      <summary>
            Sorts items using the Sweep and Prune method.
            </summary>
      <typeparam name="T">The type of items in this spatial partition.</typeparam>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.CloneCore(DigitalRune.Geometry.Partitioning.BasePartition{`0})">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" />.
            </summary>
      <param name="sourcePartition">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1" /> derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.GetOverlaps(DigitalRune.Geometry.Shapes.Aabb)">
      <summary>
            Gets the items that touch the given AABB.
            </summary>
      <param name="aabb">The axis-aligned bounding box.</param>
      <returns>All items that touch the given AABB.</returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.Aabb">
      <summary>
            Defines an axis-aligned bounding box (AABB).
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Aabb.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Aabb" />.
            </summary>
      <param name="minimum">The minimum.</param>
      <param name="maximum">The maximum.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Aabb.AreNumericallyEqual(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Aabb)">
      <summary>
            Determines whether two AABBs are equal (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />).
            </summary>
      <param name="first">The first AABB.</param>
      <param name="second">The second AABB.</param>
      <returns>
        <see langword="true" /> if the AABBs are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Aabb.AreNumericallyEqual(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Aabb,System.Single)">
      <summary>
            Determines whether two AABBs are equal (regarding the given tolerance).
            </summary>
      <param name="first">The first AABB.</param>
      <param name="second">The second AABB.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if the AABBs are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.Aabb.Center">
      <summary>
            Gets the center.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Aabb.Contains(DigitalRune.Geometry.Shapes.Aabb)">
      <summary>
            Determines whether the current AABB contains a given AABB.
            </summary>
      <param name="other">The other AABB.</param>
      <returns>
        <see langword="true" /> if <paramref name="other" /> is fully contained in this AABB; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Aabb.Equals(DigitalRune.Geometry.Shapes.Aabb)">
      <summary>
            Determines whether the specified <see cref="T:DigitalRune.Geometry.Shapes.Aabb" /> is equal to the current 
            <see cref="T:DigitalRune.Geometry.Shapes.Aabb" />.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Aabb.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current 
            <see cref="T:System.Object" />.
            </summary>
      <param name="obj">
            The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.
            </param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current 
            <see cref="T:System.Object" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.Aabb.Extent">
      <summary>
            Gets the extent vector (<see cref="F:DigitalRune.Geometry.Shapes.Aabb.Maximum" /> - <see cref="F:DigitalRune.Geometry.Shapes.Aabb.Minimum" />).
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Aabb.GetAabb(DigitalRune.Geometry.Pose)">
      <summary>
            Computes the world space AABB for a rotated and translated AABB.
            </summary>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> that defines the rotation and translation. This pose defines how 
            this <see cref="T:DigitalRune.Geometry.Shapes.Aabb" /> should be positioned in world space.
            </param>
      <returns>
            The world space AABB that encloses this rotated and translated local space AABB.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Aabb.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the world space AABB for a scaled, rotated and translated AABB.
            </summary>
      <param name="scale">The scale of the AABB.</param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> that defines the rotation and translation. This pose defines how
            this <see cref="T:DigitalRune.Geometry.Shapes.Aabb" /> should be positioned in world space.
            </param>
      <returns>
            The world space AABB that encloses this scaled, rotated and translated local space AABB.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Aabb.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table. 
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Aabb.Grow(DigitalRune.Geometry.IGeometricObject)">
      <summary>
            Grows the AABB so that it includes the AABB of the given geometric object.
            </summary>
      <param name="geometricObject">The geometric object to include.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Aabb.Grow(DigitalRune.Geometry.Shapes.Aabb)">
      <summary>
            Grows the AABB so that it includes the given AABB.
            </summary>
      <param name="aabb">The AABB to include.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Aabb.Grow(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Grows the AABB so that it includes the given point.
            </summary>
      <param name="point">The point to include.</param>
    </member>
    <member name="F:DigitalRune.Geometry.Shapes.Aabb.Maximum">
      <summary>
            The maximum position.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Aabb.Merge(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Aabb)">
      <summary>
            Merges the specified AABBs.
            </summary>
      <param name="first">The first AABB.</param>
      <param name="second">The second AABB.</param>
      <returns>The AABB that includes both child AABBs.</returns>
    </member>
    <member name="F:DigitalRune.Geometry.Shapes.Aabb.Minimum">
      <summary>
            The minimum position.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Aabb.op_Equality(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Aabb)">
      <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.Aabb" />s are equal.
            </summary>
      <param name="aabbA">The first <see cref="T:DigitalRune.Geometry.Shapes.Aabb" />.</param>
      <param name="aabbB">The second <see cref="T:DigitalRune.Geometry.Shapes.Aabb" />.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:DigitalRune.Geometry.Shapes.Aabb" />s are equal; otherwise 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Aabb.op_Inequality(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Aabb)">
      <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.Aabb" />s are different.
            </summary>
      <param name="aabbA">The first <see cref="T:DigitalRune.Geometry.Shapes.Aabb" />.</param>
      <param name="aabbB">The second <see cref="T:DigitalRune.Geometry.Shapes.Aabb" />.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:DigitalRune.Geometry.Shapes.Aabb" />s are different; otherwise 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Aabb.Scale(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Scales the AABB.
            </summary>
      <param name="scale">
            The scale factors for the dimensions x, y and z.
            The scale factors can be negative to mirror the AABB.
            </param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Aabb.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Aabb.Translate(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Translates the AABB.
            </summary>
      <param name="translation">The displacement vector.</param>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.Aabb.Volume">
      <summary>
            Gets the volume of this axis-aligned bounding box.
            </summary>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.BoxShape">
      <summary>
            Represents a box centered at the origin.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.BoxShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.BoxShape" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.BoxShape.#ctor(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.BoxShape" /> class from the given extent vector.
            </summary>
      <param name="extent">The extent of the box.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.BoxShape.#ctor(System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.BoxShape" /> class with the given size.
            </summary>
      <param name="widthX">The width along the x-axis.</param>
      <param name="widthY">The width along the y-axis.</param>
      <param name="widthZ">The width along the z-axis.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="widthX" />, <paramref name="widthY" />, or <paramref name="widthZ" /> is 
            negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.BoxShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.BoxShape.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.BoxShape.Extent">
      <summary>
            Gets or sets the extent vector.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            A component of <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.BoxShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the
            shape's local space before the pose is applied.
            </param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.BoxShape.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given direction.
            </summary>
      <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.BoxShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
      <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.BoxShape.GetVolume">
      <summary>
            Gets the volume of this box.
            </summary>
      <returns>The volume of this box.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.BoxShape.GetVolume(System.Single,System.Int32)">
      <summary>
            Gets the volume of this box.
            </summary>
      <param name="relativeError">Not used.</param>
      <param name="iterationLimit">Not used.</param>
      <returns>The volume of this box.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.BoxShape.InnerPoint">
      <summary>
            Gets an inner point (center of box).
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.BoxShape.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.BoxShape.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.BoxShape.WidthX">
      <summary>
            Gets or sets the width along the x-axis.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.BoxShape.WidthY">
      <summary>
            Gets or sets the width along the y-axis.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.BoxShape.WidthZ">
      <summary>
            Gets or sets the width along the z-axis.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.CapsuleShape">
      <summary>
            Represents a capsule centered at the local origin and upright along the y-axis.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CapsuleShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.CapsuleShape" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CapsuleShape.#ctor(System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.CapsuleShape" /> class with the given radius and 
            height.
            </summary>
      <param name="radius">The radius.</param>
      <param name="height">The height (including the spherical caps).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="height" /> is less than 2 * <see cref="P:DigitalRune.Geometry.Shapes.CapsuleShape.Radius" />. (The height must be greater 
            than or equal to 2 * radius.)
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="radius" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CapsuleShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CapsuleShape.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CapsuleShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the
            shape's local space before the pose is applied.
            </param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CapsuleShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
      <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CapsuleShape.GetVolume">
      <summary>
            Gets the volume of this shape.
            </summary>
      <returns>The volume of this shape.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CapsuleShape.GetVolume(System.Single,System.Int32)">
      <summary>
            Gets the volume of this shape.
            </summary>
      <param name="relativeError">Not used.</param>
      <param name="iterationLimit">Not used.</param>
      <returns>The volume of this shape.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.CapsuleShape.Height">
      <summary>
            Gets or sets the total height (including the spherical caps).
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than 2 * <see cref="P:DigitalRune.Geometry.Shapes.CapsuleShape.Radius" />. (The height must be greater 
            than or equal to 2 * radius.)
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.CapsuleShape.InnerPoint">
      <summary>
            Gets an inner point (center of capsule).
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CapsuleShape.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.CapsuleShape.Radius">
      <summary>
            Gets or sets the radius.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is either negative or greater than <see cref="P:DigitalRune.Geometry.Shapes.CapsuleShape.Height" /> / 2. (The 
            radius must be less than or equal to height / 2.)
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CapsuleShape.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.CircleShape">
      <summary>
            Represents a circle in the xy plane centered at the origin.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CircleShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.CircleShape" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CircleShape.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.CircleShape" /> class with the given radius.
            </summary>
      <param name="radius">The radius.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="radius" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CircleShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CircleShape.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CircleShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the
            shape's local space before the pose is applied.
            </param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CircleShape.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given direction.
            </summary>
      <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CircleShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
      <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CircleShape.GetVolume(System.Single,System.Int32)">
      <summary>
            Gets the volume of this shape.
            </summary>
      <param name="relativeError">Not used.</param>
      <param name="iterationLimit">Not used</param>
      <returns>0</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.CircleShape.InnerPoint">
      <summary>
            Gets an inner point (center of the circle).
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CircleShape.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.CircleShape.Radius">
      <summary>
            Gets or sets the radius.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CircleShape.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.CompositeShape">
      <summary>
            Represents a shape consisting of several other geometric objects.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CompositeShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.CompositeShape.Children">
      <summary>
            Gets the child geometric objects.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CompositeShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CompositeShape.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CompositeShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the
            shape's local space before the pose is applied. 
            </param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CompositeShape.GetVolume(System.Single,System.Int32)">
      <summary>
            Gets the volume of this shape.
            </summary>
      <param name="relativeError">
            The desired relative error for approximations (in the range [0, 1]). For example, use the 
            value 0.01 to get an error of about 1%.
            </param>
      <param name="iterationLimit">
            The iteration limit. Must be greater than or equal to 0. For most cases a small value like 4 
            is appropriate. 
            </param>
      <returns>The volume of this shape.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="relativeError" /> is negative.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="iterationLimit" /> is negative or 0.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.CompositeShape.InnerPoint">
      <summary>
            Gets an inner point.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CompositeShape.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.CompositeShape.Partition">
      <summary>
            Gets or set the spatial partition used to improve the performance of geometric queries.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CompositeShape.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.ConeShape">
      <summary>
            Represents a cone standing on the xz plane, pointing up in the +y direction.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConeShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ConeShape" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConeShape.#ctor(System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ConeShape" /> class with the given radius and 
            height.
            </summary>
      <param name="radius">The radius.</param>
      <param name="height">The height.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="radius" /> is negative.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="height" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConeShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConeShape.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConeShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
      <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConeShape.GetVolume">
      <summary>
            Gets the volume of this shape.
            </summary>
      <returns>The volume of this shape.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConeShape.GetVolume(System.Single,System.Int32)">
      <summary>
            Gets the volume of this shape.
            </summary>
      <param name="relativeError">Not used.</param>
      <param name="iterationLimit">Not used.</param>
      <returns>The volume of this shape.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ConeShape.Height">
      <summary>
            Gets or sets the height.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ConeShape.InnerPoint">
      <summary>
            Gets an inner point.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConeShape.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ConeShape.Radius">
      <summary>
            Gets or sets the radius.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConeShape.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.ConvexHullOfPoints">
      <summary>
            Represents a convex hull of a set of points.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ConvexHullOfPoints" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.#ctor(System.Collections.Generic.IEnumerable{DigitalRune.Mathematics.Algebra.Vector3F})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ConvexHullOfPoints" /> class from a sequence
            of points.
            </summary>
      <param name="points">
            A collection of points which are copied into the <see cref="P:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.Points" /> list.
            </param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.#ctor(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ConvexHullOfPoints" /> class from a list of 
            points.
            </summary>
      <param name="points">
            The point list. A reference to this list is stored in <see cref="P:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.Points" />. 
            The list is not copied.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="points" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the
            shape's local space before the pose is applied.
            </param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given direction.
            </summary>
      <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
      <param name="directionNormalized">
            The normalized direction vector for which to get the support point. 
            </param>
      <returns>A support point regarding the given direction.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.InnerPoint">
      <summary>
            Gets an inner point.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.Invalidate">
      <summary>
            Invalidates this instance.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.OnChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Geometry.Shapes.Shape.Changed" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.Points">
      <summary>
            Gets or sets the list with the points contained in the convex hull.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.ConvexHullOfShapes">
      <summary>
            Represents a convex hull of several shapes.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfShapes.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ConvexHullOfShapes.Children">
      <summary>
            Gets the child objects.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfShapes.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfShapes.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfShapes.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
      <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ConvexHullOfShapes.InnerPoint">
      <summary>
            Gets an inner point.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfShapes.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.ConvexPolyhedron">
      <summary>
            Represents a convex polyhedron.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexPolyhedron.#ctor(System.Collections.Generic.IEnumerable{DigitalRune.Mathematics.Algebra.Vector3F})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ConvexHullOfPoints" /> class.
            </summary>
      <param name="points">
            A collection of points which from which a convex polyhedron is built.
            </param>
      <exception cref="T:System.NotSupportedException">
            Too many vertices in convex hull. Max. 65534 vertices in a convex polyhedron are supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexPolyhedron.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexPolyhedron.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexPolyhedron.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the
            shape's local space before the pose is applied.
            </param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexPolyhedron.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given direction.
            </summary>
      <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexPolyhedron.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
      <param name="directionNormalized">
            The normalized direction vector for which to get the support point. 
            </param>
      <returns>A support point regarding the given direction.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ConvexPolyhedron.InnerPoint">
      <summary>
            Gets an inner point.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexPolyhedron.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexPolyhedron.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ConvexPolyhedron.Vertices">
      <summary>
            Gets a read-only list with the vertices of the convex polyhedron.
            </summary>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.ConvexShape">
      <summary>
            Represents a convex shape. 
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexShape.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape" /> class</summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the
            shape's local space before the pose is applied.
            </param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>The AABB of the shape positioned in world space.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexShape.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given direction.
            </summary>
      <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
      <returns>A support point regarding the given direction.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexShape.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given direction and a given non-uniform scaling.
            </summary>
      <param name="direction">
            The direction for which to get the support point on the scaled shape. The vector does not 
            need to be normalized. The result is undefined if the vector is a zero vector.
            </param>
      <param name="scale">
            The scale that is applied to the shape. This can be a non-uniform 3D scaling.
            </param>
      <returns>
            A support point regarding the given direction on the scaled shape.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
      <param name="directionNormalized">
            The normalized direction vector for which to get the support point. 
            </param>
      <returns>A support point regarding the given direction.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ConvexShape.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.CylinderShape">
      <summary>
            Represents a cylinder centered at the local origin and upright along the y-axis.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CylinderShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.CylinderShape" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CylinderShape.#ctor(System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.CylinderShape" /> class with the given radius
            and height.
            </summary>
      <param name="radius">The radius.</param>
      <param name="height">The height (which is along the y-axis).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="radius" /> is negative.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="height" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CylinderShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CylinderShape.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CylinderShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the
            shape's local space before the pose is applied.
            </param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CylinderShape.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given direction.
            </summary>
      <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CylinderShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
      <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CylinderShape.GetVolume">
      <summary>
            Gets the volume of this shape.
            </summary>
      <returns>
            The volume of this shape.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CylinderShape.GetVolume(System.Single,System.Int32)">
      <summary>
            Gets the volume of this shape.
            </summary>
      <param name="relativeError">Not used.</param>
      <param name="iterationLimit">Not used.</param>
      <returns>The volume of this shape.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.CylinderShape.Height">
      <summary>
            Gets or sets the height (which is along the y-axis).
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.CylinderShape.InnerPoint">
      <summary>
            Gets an inner point (center of cylinder).
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CylinderShape.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.CylinderShape.Radius">
      <summary>
            Gets or sets the radius.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.CylinderShape.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.EmptyShape">
      <summary>
            Defines a shape that represents an empty volume. This shape will not collide with any other 
            shape.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.EmptyShape.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.EmptyShape" /> class</summary>
    </member>
    <member name="E:DigitalRune.Geometry.Shapes.EmptyShape.Changed">
      <summary>
            Occurs when the shape was changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.EmptyShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.EmptyShape.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.EmptyShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the
            shape's local space before the pose is applied.
            </param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.EmptyShape.GetVolume(System.Single,System.Int32)">
      <summary>
            Gets the volume of this shape.
            </summary>
      <param name="relativeError">Not used.</param>
      <param name="iterationLimit">Not used</param>
      <returns>0</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.EmptyShape.InnerPoint">
      <summary>
            Gets an inner point.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.EmptyShape.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.HeightField">
      <summary>
            Represents a height field which can be used for simple terrains.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.HeightField.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.HeightField" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.HeightField.#ctor(System.Single,System.Single,System.Single[0:,0:])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.HeightField" /> class from the given array.
            </summary>
      <param name="widthX">The width along the x-axis.</param>
      <param name="widthZ">The width along the z-axis.</param>
      <param name="array">The array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> contains less than 2 x 2 elements.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="widthX" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="widthZ" /> is negative or 0.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.HeightField.Array">
      <summary>
            Gets or sets the height field.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> contains less than 2 x 2 elements.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.HeightField.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.HeightField.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.HeightField.Depth">
      <summary>
            Gets or sets the depth of the height field.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.HeightField.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the
            shape's local space before the pose is applied.
            </param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.HeightField.GetHeight(System.Single,System.Single)">
      <summary>
            Gets the height for a height field coordinate.
            </summary>
      <param name="x">
            The x coordinate that lies in the interval [0, <see cref="P:DigitalRune.Geometry.Shapes.HeightField.WidthX" />].
            </param>
      <param name="z">
            The z coordinate that lies in the interval [0, <see cref="P:DigitalRune.Geometry.Shapes.HeightField.WidthZ" />].
            </param>
      <returns>The interpolated height for the given coordinates.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.HeightField.GetTriangle(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Gets a triangle representing a part of a height field cell.
            </summary>
      <param name="indexX">The cell index along <see cref="P:DigitalRune.Geometry.Shapes.HeightField.WidthX" />.</param>
      <param name="indexZ">The cell index along <see cref="P:DigitalRune.Geometry.Shapes.HeightField.WidthZ" />.</param>
      <param name="second">
            If set to <see langword="true" /> the triangle for the second cell half is returned; 
            otherwise the triangle for the first cell half is returned.
            </param>
      <returns>A triangle.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexX" /> is out of range.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexZ" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.HeightField.GetVolume(System.Single,System.Int32)">
      <summary>
            Gets the volume of this shape.
            </summary>
      <param name="relativeError">Not used.</param>
      <param name="iterationLimit">Not used</param>
      <returns>Positive infinity (<see cref="F:System.Single.PositiveInfinity" />)</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.HeightField.InnerPoint">
      <summary>
            Gets an inner point.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.HeightField.Invalidate">
      <summary>
            Invalidates this height field.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.HeightField.OnChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Geometry.Shapes.Shape.Changed" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.HeightField.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.HeightField.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.HeightField.UseFastCollisionApproximation">
      <summary>
            Gets or sets a value indicating whether the collision detection should use a fast, less
            accurate method.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.HeightField.WidthX">
      <summary>
            Gets or sets the width along the local x-axis.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.HeightField.WidthZ">
      <summary>
            Gets or sets the width along the local z-axis.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.InfiniteShape">
      <summary>
            Defines a shape that represents an infinitely large volume. This shape will collide with 
            every other shape (except an <see cref="T:DigitalRune.Geometry.Shapes.EmptyShape" />).
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.InfiniteShape.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.InfiniteShape" /> class</summary>
    </member>
    <member name="E:DigitalRune.Geometry.Shapes.InfiniteShape.Changed">
      <summary>
            Occurs when the shape was changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.InfiniteShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.InfiniteShape.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" /> 
            derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.InfiniteShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the 
            shape's local space before the pose is applied.
            </param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.InfiniteShape.GetVolume(System.Single,System.Int32)">
      <summary>
            Gets the volume of this shape.
            </summary>
      <param name="relativeError">Not used.</param>
      <param name="iterationLimit">Not used</param>
      <returns>+ Infinity.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.InfiniteShape.InnerPoint">
      <summary>
            Gets an inner point.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.InfiniteShape.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.Line">
      <summary>
            Defines a line.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Line.#ctor(DigitalRune.Geometry.Shapes.LineShape)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Line" /> from a <see cref="T:DigitalRune.Geometry.Shapes.LineShape" />.
            </summary>
      <param name="lineShape">The <see cref="T:DigitalRune.Geometry.Shapes.LineShape" /> from which properties are copied.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineShape" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Line.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Line" /> from a point and a direction.
            </summary>
      <param name="pointOnLine">A point on the line.</param>
      <param name="direction">The direction. (Must be normalized.)</param>
    </member>
    <member name="F:DigitalRune.Geometry.Shapes.Line.Direction">
      <summary>
            The normalized direction vector.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Line.Equals(DigitalRune.Geometry.Shapes.Line)">
      <summary>
            Determines whether the specified <see cref="T:DigitalRune.Geometry.Shapes.Line" /> is equal to the current 
            <see cref="T:DigitalRune.Geometry.Shapes.Line" />.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Line.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current 
            <see cref="T:System.Object" />.
            </summary>
      <param name="obj">
            The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.
            </param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current 
            <see cref="T:System.Object" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Line.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table. 
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Line.op_Equality(DigitalRune.Geometry.Shapes.Line,DigitalRune.Geometry.Shapes.Line)">
      <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.Line" />s are equal.
            </summary>
      <param name="line1">The first <see cref="T:DigitalRune.Geometry.Shapes.Line" />.</param>
      <param name="line2">The second <see cref="T:DigitalRune.Geometry.Shapes.Line" />.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:DigitalRune.Geometry.Shapes.Line" />s are equal; otherwise 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Line.op_Inequality(DigitalRune.Geometry.Shapes.Line,DigitalRune.Geometry.Shapes.Line)">
      <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.Line" />s are different.
            </summary>
      <param name="line1">The first <see cref="T:DigitalRune.Geometry.Shapes.Line" />.</param>
      <param name="line2">The second <see cref="T:DigitalRune.Geometry.Shapes.Line" />.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:DigitalRune.Geometry.Shapes.Line" />s are different; otherwise 
            <see langword="false" />.
            </returns>
    </member>
    <member name="F:DigitalRune.Geometry.Shapes.Line.PointOnLine">
      <summary>
            A point on the line.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Line.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.LineSegment">
      <summary>
            Defines a line segment.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineSegment.#ctor(DigitalRune.Geometry.Shapes.LineSegmentShape)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.LineSegment" /> from a 
            <see cref="T:DigitalRune.Geometry.Shapes.LineSegmentShape" />.
            </summary>
      <param name="lineSegmentShape">
            The line segment from which properties are copied.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineSegmentShape" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineSegment.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.LineSegment" /> from two points.
            </summary>
      <param name="start">The start point.</param>
      <param name="end">The end point.</param>
    </member>
    <member name="F:DigitalRune.Geometry.Shapes.LineSegment.End">
      <summary>
            The end point.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineSegment.Equals(DigitalRune.Geometry.Shapes.LineSegment)">
      <summary>
            Determines whether the specified <see cref="T:DigitalRune.Geometry.Shapes.LineSegment" /> is equal to the current 
            <see cref="T:DigitalRune.Geometry.Shapes.LineSegment" />.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineSegment.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current 
            <see cref="T:System.Object" />.
            </summary>
      <param name="obj">
            The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.
            </param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current 
            <see cref="T:System.Object" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineSegment.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table. 
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.LineSegment.Length">
      <summary>
            Gets the length.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.LineSegment.LengthSquared">
      <summary>
            Gets the squared length.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineSegment.op_Equality(DigitalRune.Geometry.Shapes.LineSegment,DigitalRune.Geometry.Shapes.LineSegment)">
      <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.LineSegment" />s are equal.
            </summary>
      <param name="lineSegment1">The first <see cref="T:DigitalRune.Geometry.Shapes.LineSegment" />.</param>
      <param name="lineSegment2">The second <see cref="T:DigitalRune.Geometry.Shapes.LineSegment" />.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:DigitalRune.Geometry.Shapes.LineSegment" />s are equal; otherwise 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineSegment.op_Inequality(DigitalRune.Geometry.Shapes.LineSegment,DigitalRune.Geometry.Shapes.LineSegment)">
      <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.LineSegment" />s are different.
            </summary>
      <param name="lineSegment1">The first <see cref="T:DigitalRune.Geometry.Shapes.LineSegment" />.</param>
      <param name="lineSegment2">The second <see cref="T:DigitalRune.Geometry.Shapes.LineSegment" />.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:DigitalRune.Geometry.Shapes.LineSegment" />s are different; otherwise 
            <see langword="false" />.
            </returns>
    </member>
    <member name="F:DigitalRune.Geometry.Shapes.LineSegment.Start">
      <summary>
            The start point.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineSegment.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.LineSegmentShape">
      <summary>
            Represents a line segment.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineSegmentShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.LineSegmentShape" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineSegmentShape.#ctor(DigitalRune.Geometry.Shapes.LineSegment)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.LineSegmentShape" /> class from a 
            <see cref="T:DigitalRune.Geometry.Shapes.LineSegment" />.
            </summary>
      <param name="lineSegment">
            The line segment from which properties are copied.
            </param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineSegmentShape.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.LineSegmentShape" /> class from two points.
            </summary>
      <param name="start">The start point.</param>
      <param name="end">The end point.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineSegmentShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineSegmentShape.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.LineSegmentShape.End">
      <summary>
            Gets or sets the end point.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineSegmentShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the
            shape's local space before the pose is applied.
            </param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineSegmentShape.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given direction.
            </summary>
      <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineSegmentShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
      <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineSegmentShape.GetVolume(System.Single,System.Int32)">
      <summary>
            Gets the volume of this shape.
            </summary>
      <param name="relativeError">Not used.</param>
      <param name="iterationLimit">Not used</param>
      <returns>0</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.LineSegmentShape.InnerPoint">
      <summary>
            Gets an inner point (center of line segment).
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.LineSegmentShape.Length">
      <summary>
            Gets the length.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.LineSegmentShape.LengthSquared">
      <summary>
            Gets the squared length.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineSegmentShape.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.LineSegmentShape.Start">
      <summary>
            Gets or sets the start point.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineSegmentShape.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.LineShape">
      <summary>
            Represents an infinite line.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.LineShape" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineShape.#ctor(DigitalRune.Geometry.Shapes.Line)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.LineShape" /> class from a <see cref="T:DigitalRune.Geometry.Shapes.Line" />.
            </summary>
      <param name="line">The line structure from which properties are copied.</param>
      <exception cref="T:System.ArgumentException">
            The line direction is not normalized.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineShape.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.LineShape" /> class from a point and direction.
            </summary>
      <param name="pointOnLine">A point on the line.</param>
      <param name="direction">The direction.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="direction" /> is not normalized.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineShape.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.LineShape.Direction">
      <summary>
            Gets or sets the direction.
            </summary>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not normalized.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the
            shape's local space before the pose is applied.
            </param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineShape.GetVolume(System.Single,System.Int32)">
      <summary>
            Gets the volume of this shape.
            </summary>
      <param name="relativeError">Not used.</param>
      <param name="iterationLimit">Not used</param>
      <returns>0</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.LineShape.InnerPoint">
      <summary>
            Gets an inner point.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.LineShape.MeshSize">
      <summary>
            Gets or sets the length of the mesh that represents a <see cref="T:DigitalRune.Geometry.Shapes.LineShape" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineShape.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.LineShape.PointOnLine">
      <summary>
            Gets or sets a point on the line.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.LineShape.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape">
      <summary>
            Represents the <i>Minkowski Difference</i> of two geometric objects.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape.#ctor(DigitalRune.Geometry.IGeometricObject,DigitalRune.Geometry.IGeometricObject)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape" /> class from two
            geometric objects.
            </summary>
      <param name="objectA">The geometric object A.</param>
      <param name="objectB">The geometric object B.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Geometry.GeometryException">
        <paramref name="objectA" /> is not convex.
            </exception>
      <exception cref="T:DigitalRune.Geometry.GeometryException">
        <paramref name="objectB" /> is not convex.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
      <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape.InnerPoint">
      <summary>
            Gets an inner point.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape.ObjectA">
      <summary>
            Gets or sets the first <see cref="T:DigitalRune.Geometry.IGeometricObject" />.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Geometry.GeometryException">
        <paramref name="value" /> is not convex.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape.ObjectB">
      <summary>
            Gets or sets the second <see cref="T:DigitalRune.Geometry.IGeometricObject" />.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Geometry.GeometryException">
        <paramref name="value" /> is not convex.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.MinkowskiSumShape">
      <summary>
            Represents the <i>Minkowski Sum</i> of two geometric objects.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.MinkowskiSumShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.MinkowskiSumShape" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.MinkowskiSumShape.#ctor(DigitalRune.Geometry.IGeometricObject,DigitalRune.Geometry.IGeometricObject)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.MinkowskiSumShape" /> class from two geometric
            objects.
            </summary>
      <param name="objectA">The first geometric object.</param>
      <param name="objectB">The second geometric object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Geometry.GeometryException">
        <paramref name="objectA" /> is not convex.
            </exception>
      <exception cref="T:DigitalRune.Geometry.GeometryException">
        <paramref name="objectB" /> is not convex.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.MinkowskiSumShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.MinkowskiSumShape.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.MinkowskiSumShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
      <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.MinkowskiSumShape.InnerPoint">
      <summary>
            Gets an inner point.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.MinkowskiSumShape.ObjectA">
      <summary>
            Gets or sets the first <see cref="T:DigitalRune.Geometry.IGeometricObject" />.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Geometry.GeometryException">
        <paramref name="value" /> is not convex.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.MinkowskiSumShape.ObjectB">
      <summary>
            Gets or sets the second <see cref="T:DigitalRune.Geometry.GeometricObject" />.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:DigitalRune.Geometry.GeometryException">
        <paramref name="value" /> is not convex.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.OrthographicViewVolume">
      <summary>
            Represents an orthographic view volume.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.OrthographicViewVolume" /> class using default 
            settings.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.OrthographicViewVolume" /> class as a symmetric
            view volume.
            </summary>
      <param name="width">The width of the view volume at the near clip plane.</param>
      <param name="height">The height of the view volume at the near clip plane.</param>
      <param name="near">The distance to the near clip plane.</param>
      <param name="far">The distance to the far clip plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="width" /> is negative.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="height" /> is negative.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="near" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="near" /> is greater than or equal to <paramref name="far" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.OrthographicViewVolume" /> class as an 
            asymmetric, off-center view volume.
            </summary>
      <param name="left">The minimum x-value of the view volume at the near clip plane.</param>
      <param name="right">The maximum x-value of the view volume at the near clip plane.</param>
      <param name="bottom">The minimum y-value of the view volume at the near clip plane.</param>
      <param name="top">The maximum y-value of the view volume at the near clip plane.</param>
      <param name="near">The distance to the near clip plane.</param>
      <param name="far">The distance to the far clip plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="left" /> is greater than or equal to <paramref name="right" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bottom" /> is greater than or equal to <paramref name="top" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="near" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="near" /> is greater than or equal to <paramref name="far" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.OrthographicViewVolume.FieldOfViewX">
      <summary>
            Gets the horizontal field of view (always <see cref="F:System.Single.NaN" />).
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.OrthographicViewVolume.FieldOfViewY">
      <summary>
            Gets the vertical field of view (always <see cref="F:System.Single.NaN" />).
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the
            shape's local space before the pose is applied.
            </param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given direction.
            </summary>
      <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
      <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.GetVolume">
      <summary>
            Gets the volume of this shape.
            </summary>
      <returns>The volume of this shape.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.GetVolume(System.Single,System.Int32)">
      <summary>
            Gets the volume of this shape.
            </summary>
      <param name="relativeError">Not used.</param>
      <param name="iterationLimit">Not used.</param>
      <returns>The volume of this shape.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.OrthographicViewVolume.InnerPoint">
      <summary>
            Gets an inner point.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.Update">
      <summary>
            Updates the shape.
            </summary>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.PerspectiveViewVolume">
      <summary>
            Represents a perspective view volume (frustum).
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.PerspectiveViewVolume" /> class using default 
            settings.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.PerspectiveViewVolume" /> class with the given
            field of view and depth.
            </summary>
      <param name="fieldOfViewY">The vertical field of view.</param>
      <param name="aspectRatio">The aspect ratio (width / height).</param>
      <param name="near">The distance to the near clip plane.</param>
      <param name="far">The distance to the far clip plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldOfViewY" /> is not between 0 and <c>π</c> radians (0° and 180°).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="aspectRatio" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="near" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="near" /> is greater than or equal to <paramref name="far" /></exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.FieldOfViewX">
      <summary>
            Gets the horizontal field of view.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.FieldOfViewY">
      <summary>
            Gets the vertical field of view.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.GetExtent(System.Single,System.Single)">
      <summary>
            Gets the extent of the frustum at the given distance.
            </summary>
      <param name="fieldOfView">The field of view in radians.</param>
      <param name="distance">The distance at which the extent is calculated.</param>
      <returns>The extent of the view volume at the given distance.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldOfView" /> is not between 0 and <c>π</c> radians (0° and 180°).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="distance" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.GetFieldOfView(System.Single,System.Single)">
      <summary>
            Gets the field of view from a frustum with the given extent.
            </summary>
      <param name="extent">
            The extent of the frustum at the specified <paramref name="distance" />.
            </param>
      <param name="distance">The distance.</param>
      <returns>The field of view for the given extent.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="extent" /> is negative.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="distance" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.GetFieldOfViewX(System.Single,System.Single)">
      <summary>
            Converts the vertical field of view of a symmetric frustum to a horizontal field of view.
            </summary>
      <param name="fieldOfViewY">The vertical field of view in radians.</param>
      <param name="aspectRatio">The aspect ratio (width / height).</param>
      <returns>The horizontal field of view in radians.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldOfViewY" /> is not between 0 and <c>π</c> radians (0° and 180°).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="aspectRatio" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.GetFieldOfViewY(System.Single,System.Single)">
      <summary>
            Converts a horizontal field of view of a symmetric frustum to a vertical field of view.
            </summary>
      <param name="fieldOfViewX">The horizontal field of view in radians.</param>
      <param name="aspectRatio">The aspect ratio.</param>
      <returns>The vertical field of view in radians.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldOfViewX" /> is not between 0 and <c>π</c> radians (0° and 180°).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="aspectRatio" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given direction.
            </summary>
      <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
      <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.GetVolume">
      <summary>
            Gets the volume of this shape.
            </summary>
      <returns>The volume of this shape.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.GetVolume(System.Single,System.Int32)">
      <summary>
            Gets the volume of this shape.
            </summary>
      <param name="relativeError">Not used.</param>
      <param name="iterationLimit">Not used.</param>
      <returns>The volume of this shape.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.GetWidthAndHeight(System.Single,System.Single,System.Single,System.Single@,System.Single@)">
      <summary>
            Converts a field of view of a symmetric frustum to width and height.
            </summary>
      <param name="fieldOfViewY">The vertical field of view in radians.</param>
      <param name="aspectRatio">The aspect ratio (width / height).</param>
      <param name="distance">
            The distance at which <paramref name="width" /> and <paramref name="height" /> are calculated.
            </param>
      <param name="width">
            The width of the view volume at the specified <paramref name="distance" />.
            </param>
      <param name="height">
            The height of the view volume at the specified <paramref name="distance" />.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldOfViewY" /> is not between 0 and <c>π</c> radians (0° and 180°).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="aspectRatio" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="distance" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.InnerPoint">
      <summary>
            Gets an inner point.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.SetFieldOfView(System.Single,System.Single)">
      <summary>
            Sets the dimensions of the frustum to the specified field of view.
            </summary>
      <param name="fieldOfViewY">The vertical field of view.</param>
      <param name="aspectRatio">The aspect ratio (width / height).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldOfViewY" /> is not between 0 and <c>π</c> radians (0° and 180°).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="aspectRatio" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.SetFieldOfView(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Sets the dimensions of the frustum to the specified field of view and near/far values.
            </summary>
      <param name="fieldOfViewY">The vertical field of view.</param>
      <param name="aspectRatio">The aspect ratio (width / height).</param>
      <param name="near">The distance to the near clip plane.</param>
      <param name="far">The distance to the far clip plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldOfViewY" /> is not between 0 and <c>π</c> radians (0° and 180°).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="aspectRatio" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="near" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="near" /> is greater than or equal to <paramref name="far" /></exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.Update">
      <summary>
            Updates the shape.
            </summary>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.Plane">
      <summary>
            Defines a plane.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Plane.#ctor(DigitalRune.Geometry.Shapes.PlaneShape)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Plane" /> from a <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape" />.
            </summary>
      <param name="planeShape">
            The <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape" /> from which normal vector and distance from origin are copied.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="planeShape" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Plane.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Plane" /> from normal vector and a point on the 
            plane.
            </summary>
      <param name="normal">
            The normalized, outward pointing normal vector of the plane.
            </param>
      <param name="pointOnPlane">A point on the plane.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Plane.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Plane" /> from three points.
            </summary>
      <param name="point0">A point on the plane.</param>
      <param name="point1">A point on the plane.</param>
      <param name="point2">A point on the plane.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Plane.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Plane" /> from normal vector and distance to the 
            origin.
            </summary>
      <param name="normal">
            The normalized, outward pointing normal vector of the plane. 
            </param>
      <param name="distanceFromOrigin">
            The distance from the origin.
            </param>
    </member>
    <member name="F:DigitalRune.Geometry.Shapes.Plane.DistanceFromOrigin">
      <summary>
            The distance of the plane from the origin (also known as the "plane constant").
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Plane.Equals(DigitalRune.Geometry.Shapes.Plane)">
      <summary>
            Determines whether the specified <see cref="T:DigitalRune.Geometry.Shapes.Plane" /> is equal to the current 
            <see cref="T:DigitalRune.Geometry.Shapes.Plane" />.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Plane.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current 
            <see cref="T:System.Object" />.
            </summary>
      <param name="obj">
            The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.
            </param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current 
            <see cref="T:System.Object" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Plane.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table. 
            </returns>
    </member>
    <member name="F:DigitalRune.Geometry.Shapes.Plane.Normal">
      <summary>
            The normalized, outward pointing normal vector.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Plane.Normalize">
      <summary>
            Normalizes the plane.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Plane.op_Equality(DigitalRune.Geometry.Shapes.Plane,DigitalRune.Geometry.Shapes.Plane)">
      <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.Plane" />s are equal.
            </summary>
      <param name="plane1">The first <see cref="T:DigitalRune.Geometry.Shapes.Plane" />.</param>
      <param name="plane2">The second <see cref="T:DigitalRune.Geometry.Shapes.Plane" />.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:DigitalRune.Geometry.Shapes.Plane" />s are equal; otherwise 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Plane.op_Inequality(DigitalRune.Geometry.Shapes.Plane,DigitalRune.Geometry.Shapes.Plane)">
      <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.Plane" />s are different.
            </summary>
      <param name="plane1">The first <see cref="T:DigitalRune.Geometry.Shapes.Plane" />.</param>
      <param name="plane2">The second <see cref="T:DigitalRune.Geometry.Shapes.Plane" />.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:DigitalRune.Geometry.Shapes.Plane" />s are different; otherwise 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Plane.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.PlaneShape">
      <summary>
            Represents a plane.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PlaneShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PlaneShape.#ctor(DigitalRune.Geometry.Shapes.Plane)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape" /> class.
            </summary>
      <param name="plane">
            The plane from which normal vector and distance from origin are copied.
            </param>
      <exception cref="T:System.ArgumentException">The plane normal is not normalized.</exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PlaneShape.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape" /> class.
            </summary>
      <param name="normal">
            The outward pointing normal vector of the plane. Must be normalized.</param>
      <param name="pointOnPlane">A point on the plane.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="normal" /> is not normalized.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PlaneShape.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape" /> class from three points.
            </summary>
      <param name="point0">A point on the plane.</param>
      <param name="point1">A point on the plane.</param>
      <param name="point2">A point on the plane.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="point0" />, <paramref name="point1" />, and <paramref name="point2" /> do not 
            form a valid triangle.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PlaneShape.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape" /> class from a normal vector and
            the distance from the origin.
            </summary>
      <param name="normal">
            The outward pointing normal vector of the plane. Must be normalized.
            </param>
      <param name="distanceFromOrigin">The distance from the origin.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="normal" /> is not normalized.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PlaneShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PlaneShape.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.PlaneShape.DistanceFromOrigin">
      <summary>
            Gets or sets the distance of the plane from the origin (also known as the "plane constant").
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PlaneShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the
            shape's local space before the pose is applied.
            </param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PlaneShape.GetVolume(System.Single,System.Int32)">
      <summary>
            Gets the volume of this shape.
            </summary>
      <param name="relativeError">Not used.</param>
      <param name="iterationLimit">Not used</param>
      <returns>Positive infinity (<see cref="F:System.Single.PositiveInfinity" />)</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.PlaneShape.InnerPoint">
      <summary>
            Gets an inner point.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.PlaneShape.MeshSize">
      <summary>
            Gets or sets the size of the mesh that represents a <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.PlaneShape.Normal">
      <summary>
            Gets or sets the outward pointing normal vector.
            </summary>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not normalized.</exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PlaneShape.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PlaneShape.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.PointShape">
      <summary>
            Represents a point.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PointShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.PointShape" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PointShape.#ctor(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.PointShape" /> class with the given position.
            </summary>
      <param name="position">The position (in the local coordinate system).</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PointShape.#ctor(System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.PointShape" /> class with the given coordinates.
            </summary>
      <param name="x">The x position.</param>
      <param name="y">The y position.</param>
      <param name="z">The z position.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PointShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PointShape.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PointShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the
            shape's local space before the pose is applied.
            </param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PointShape.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given direction.
            </summary>
      <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PointShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
      <param name="directionNormalized">The normalized direction vector for which to get the support point.</param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PointShape.GetVolume(System.Single,System.Int32)">
      <summary>
            Gets the volume of this shape.
            </summary>
      <param name="relativeError">Not used.</param>
      <param name="iterationLimit">Not used</param>
      <returns>0</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.PointShape.InnerPoint">
      <summary>
            Gets an inner point.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PointShape.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.PointShape.Position">
      <summary>
            Gets or sets the position (in the local coordinate system).
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.PointShape.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.Ray">
      <summary>
            Defines a ray.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Ray.#ctor(DigitalRune.Geometry.Shapes.RayShape)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Ray" /> from a <see cref="T:DigitalRune.Geometry.Shapes.RayShape" />.
            </summary>
      <param name="rayShape">
            The <see cref="T:DigitalRune.Geometry.Shapes.RayShape" /> from which origin and direction are copied.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rayShape" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Ray.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Line" /> with the given origin and direction.
            </summary>
      <param name="origin">The origin.</param>
      <param name="direction">The direction.</param>
      <param name="length">The finite length.</param>
    </member>
    <member name="F:DigitalRune.Geometry.Shapes.Ray.Direction">
      <summary>
            The normalized direction of the ray.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Ray.Equals(DigitalRune.Geometry.Shapes.Ray)">
      <summary>
            Determines whether the specified <see cref="T:DigitalRune.Geometry.Shapes.Ray" /> is equal to the current 
            <see cref="T:DigitalRune.Geometry.Shapes.Ray" />.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Ray.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current 
            <see cref="T:System.Object" />.
            </summary>
      <param name="obj">
            The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.
            </param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current 
            <see cref="T:System.Object" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Ray.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table. 
            </returns>
    </member>
    <member name="F:DigitalRune.Geometry.Shapes.Ray.Length">
      <summary>
            The finite length of the ray.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Ray.op_Equality(DigitalRune.Geometry.Shapes.Ray,DigitalRune.Geometry.Shapes.Ray)">
      <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.Ray" />s are equal.
            </summary>
      <param name="ray1">The first <see cref="T:DigitalRune.Geometry.Shapes.Ray" />.</param>
      <param name="ray2">The second <see cref="T:DigitalRune.Geometry.Shapes.Ray" />.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:DigitalRune.Geometry.Shapes.Ray" />s are equal; otherwise 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Ray.op_Inequality(DigitalRune.Geometry.Shapes.Ray,DigitalRune.Geometry.Shapes.Ray)">
      <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.Ray" />s are different.
            </summary>
      <param name="ray1">The first <see cref="T:DigitalRune.Geometry.Shapes.Ray" />.</param>
      <param name="ray2">The second <see cref="T:DigitalRune.Geometry.Shapes.Ray" />.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:DigitalRune.Geometry.Shapes.Ray" />s are different; otherwise 
            <see langword="false" />.
            </returns>
    </member>
    <member name="F:DigitalRune.Geometry.Shapes.Ray.Origin">
      <summary>
            The origin of the ray.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Ray.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.RayShape">
      <summary>
            Represents a ray, which can be used for ray casting.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.RayShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.RayShape" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.RayShape.#ctor(DigitalRune.Geometry.Shapes.Ray)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.RayShape" /> class from a <see cref="T:DigitalRune.Geometry.Shapes.Ray" />.
            </summary>
      <param name="ray">The ray.</param>
      <exception cref="T:System.ArgumentException">
            The direction of <paramref name="ray" /> is not normalized.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="ray" /> is ≤ 0 or infinite.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.RayShape.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Line" /> class with the given origin, 
            direction and length.
            </summary>
      <param name="origin">The origin.</param>
      <param name="direction">The direction.</param>
      <param name="length">The finite length.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="direction" /> is not normalized.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is ≤ 0 or infinite.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.RayShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.RayShape.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.RayShape.Direction">
      <summary>
            Gets or sets the direction of the ray.
            </summary>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a normalized.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.RayShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the
            shape's local space before the pose is applied.
            </param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.RayShape.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given direction.
            </summary>
      <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.RayShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
      <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.RayShape.GetVolume(System.Single,System.Int32)">
      <summary>
            Gets the volume of this shape.
            </summary>
      <param name="relativeError">Not used.</param>
      <param name="iterationLimit">Not used</param>
      <returns>0</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.RayShape.InnerPoint">
      <summary>
            Gets an inner point.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.RayShape.Length">
      <summary>
            Gets or sets the finite length.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is ≤ 0 or infinite.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.RayShape.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.RayShape.Origin">
      <summary>
            Gets or sets the origin of the ray.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.RayShape.StopsAtFirstHit">
      <summary>
            Gets or sets a value indicating whether the ray stops at the first (closest) object that was
            hit.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.RayShape.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.RectangleShape">
      <summary>
            Represents a rectangle in the xy-plane centered at the origin.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.RectangleShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.RectangleShape" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.RectangleShape.#ctor(DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.RectangleShape" /> class with the given extent.
            </summary>
      <param name="extent">The extent vector.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.RectangleShape.#ctor(System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.RectangleShape" /> class with the given width
            and height.
            </summary>
      <param name="widthX">The width along the x-axis.</param>
      <param name="widthY">The width along the y-axis.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="widthX" /> is negative.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="widthY" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.RectangleShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.RectangleShape.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.RectangleShape.Extent">
      <summary>
            Gets or sets the extent vector.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            A component of <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.RectangleShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the
            shape's local space before the pose is applied.
            </param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.RectangleShape.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given direction.
            </summary>
      <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.</param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.RectangleShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
      <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.RectangleShape.GetVolume(System.Single,System.Int32)">
      <summary>
            Gets the volume of this shape.
            </summary>
      <param name="relativeError">Not used.</param>
      <param name="iterationLimit">Not used</param>
      <returns>0</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.RectangleShape.InnerPoint">
      <summary>
            Gets an inner point (center of rectangle).
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.RectangleShape.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.RectangleShape.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.RectangleShape.WidthX">
      <summary>
            Gets or sets the width along the x-axis.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.RectangleShape.WidthY">
      <summary>
            Gets or sets the width along the y-axis.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.ScaledConvexShape">
      <summary>
            Represents a scaled convex shape.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ScaledConvexShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ScaledConvexShape" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ScaledConvexShape.#ctor(DigitalRune.Geometry.Shapes.ConvexShape)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ScaledConvexShape" /> class from two geometric
            objects.
            </summary>
      <param name="shape">The convex shape that should be scaled.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="shape" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ScaledConvexShape.#ctor(DigitalRune.Geometry.Shapes.ConvexShape,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ScaledConvexShape" /> class from two geometric
            objects.
            </summary>
      <param name="shape">The convex shape that should be scaled.</param>
      <param name="scale">The scale of the convex shape.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="shape" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ScaledConvexShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="P:DigitalRune.Geometry.Shapes.ScaledConvexShape.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ScaledConvexShape.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="P:DigitalRune.Geometry.Shapes.ScaledConvexShape.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ScaledConvexShape.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given direction.
            </summary>
      <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ScaledConvexShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
      <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ScaledConvexShape.GetVolume(System.Single,System.Int32)">
      <summary>
            Gets the volume of this shape.
            </summary>
      <param name="relativeError">
            The desired relative error for approximations (in the range [0, 1]). For example, use the 
            value 0.01 to get a maximal error of about 1%.
            </param>
      <param name="iterationLimit">
            The iteration limit. Must be greater than or equal to 0. For most cases a small value like 4 
            is appropriate. 
            </param>
      <returns>The volume of this shape.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="relativeError" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ScaledConvexShape.InnerPoint">
      <summary>
            Gets an inner point.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ScaledConvexShape.Scale">
      <summary>
            Gets or sets the scale factor.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ScaledConvexShape.Shape">
      <summary>
            Gets or sets the convex shape that is scaled.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.Shape">
      <summary>
            Defines the volume of an <see cref="T:DigitalRune.Geometry.IGeometricObject" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Shape.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" /> class</summary>
    </member>
    <member name="E:DigitalRune.Geometry.Shapes.Shape.Changed">
      <summary>
            Occurs when the shape was changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Shape.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Geometry.Shapes.Shape" /> that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Geometry.Shapes.Shape" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Shape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Shape.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" /> 
            derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="F:DigitalRune.Geometry.Shapes.Shape.Empty">
      <summary>
            An immutable shape that is infinitely small and does not collide with other shapes.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Shape.GetAabb">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape in local space.
            </summary>
      <returns>
            The AABB of the shape positioned in local space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Shape.GetAabb(DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Shape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the 
            shape's local space before the pose is applied.
            </param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Shape.GetMesh(System.Single,System.Int32)">
      <summary>
            Gets a mesh that represents this shape.
            </summary>
      <param name="relativeDistanceThreshold">The relative distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="relativeDistanceThreshold" /> is negative.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="iterationLimit" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Shape.GetVolume(System.Single,System.Int32)">
      <summary>
            Gets the volume of this shape.
            </summary>
      <param name="relativeError">
            The desired relative error for approximations (in the range [0, 1]). For example, use the 
            value 0.01 to get a maximal error of about 1%.
            </param>
      <param name="iterationLimit">
            The iteration limit. Must be greater than or equal to 0. For most cases a small value like 4 
            is appropriate. 
            </param>
      <returns>The volume of this shape.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="relativeError" /> is negative.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="iterationLimit" /> is negative or 0.
            </exception>
    </member>
    <member name="F:DigitalRune.Geometry.Shapes.Shape.Infinite">
      <summary>
            An immutable shape that is infinitely large and collides with every other shape
            (except an <see cref="T:DigitalRune.Geometry.Shapes.EmptyShape" />).
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.Shape.InnerPoint">
      <summary>
            Gets an inner point.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Shape.OnChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Geometry.Shapes.Shape.Changed" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Shape.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Shape.System#ICloneable#Clone">
      <summary>
            Creates a new object that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new object that is a clone (deep copy) of this instance.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs">
      <summary>
            Provides arguments for an <see cref="E:DigitalRune.Geometry.Shapes.Shape.Changed" /> event of a <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs" /> class. (This method reuses a 
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <param name="feature">The index of the shape feature that has changed.</param>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs" /> class.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs.Create(System.Int32)">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs" /> class with a given feature. 
            (This method reuses a previously recycled instance or allocates a new instance if 
            necessary.)
            </summary>
      <param name="feature">The index of the shape feature that has changed.</param>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs" /> class.
            </returns>
    </member>
    <member name="F:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs.Empty">
      <summary>
            Represents an event with no event data.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs.Feature">
      <summary>
            Gets the index of the shape feature that has changed.
            </summary>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.SphereShape">
      <summary>
            Represents a sphere.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.SphereShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.SphereShape" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.SphereShape.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.SphereShape" /> class with the given radius.
            </summary>
      <param name="radius">The radius.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="radius" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.SphereShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.SphereShape.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.SphereShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the
            shape's local space before the pose is applied.
            </param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.SphereShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
      <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.SphereShape.GetVolume">
      <summary>
            Gets the volume of this shape.
            </summary>
      <returns>
            The volume of this shape.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.SphereShape.GetVolume(System.Single,System.Int32)">
      <summary>
            Gets the volume of this shape.
            </summary>
      <param name="relativeError">Not used.</param>
      <param name="iterationLimit">Not used.</param>
      <returns>The volume of this shape.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.SphereShape.InnerPoint">
      <summary>
            Gets an inner point (center of sphere).
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.SphereShape.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.SphereShape.Radius">
      <summary>
            Gets or sets the radius.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.SphereShape.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.TransformedShape">
      <summary>
            Represents a transformed shape.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TransformedShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.TransformedShape" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TransformedShape.#ctor(DigitalRune.Geometry.IGeometricObject)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.TransformedShape" /> class from the given 
            geometric object.
            </summary>
      <param name="child">The geometric object (pose + shape).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="child" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.TransformedShape.Child">
      <summary>
            Gets or sets the child <see cref="T:DigitalRune.Geometry.IGeometricObject" />.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TransformedShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TransformedShape.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TransformedShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the
            shape's local space before the pose is applied.
            </param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TransformedShape.GetVolume(System.Single,System.Int32)">
      <summary>
            Gets the volume of this shape.
            </summary>
      <param name="relativeError">
            The desired relative error for approximations (in the range [0, 1]). For example, use the 
            value 0.01 to get a maximal error of about 1%.
            </param>
      <param name="iterationLimit">
            The iteration limit. Must be greater than or equal to 0. For most cases a small value like 4 
            is appropriate. 
            </param>
      <returns>The volume of this shape.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="relativeError" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.TransformedShape.InnerPoint">
      <summary>
            Gets an inner point.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TransformedShape.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.Triangle">
      <summary>
            Defines a triangle.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Triangle.#ctor(DigitalRune.Geometry.Shapes.TriangleShape)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Triangle" /> from a <see cref="T:DigitalRune.Geometry.Shapes.TriangleShape" />.
            </summary>
      <param name="triangleShape">
            The <see cref="T:DigitalRune.Geometry.Shapes.TriangleShape" /> from which vertices are copied.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="triangleShape" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Triangle.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Triangle" /> from three points.
            </summary>
      <param name="vertex0">The first vertex.</param>
      <param name="vertex1">The second vertex.</param>
      <param name="vertex2">The third vertex.</param>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.Triangle.Aabb">
      <summary>
            Gets the axis-aligned bounding box (AABB) for this triangle.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Triangle.Equals(DigitalRune.Geometry.Shapes.Triangle)">
      <summary>
            Determines whether the specified <see cref="T:DigitalRune.Geometry.Shapes.Triangle" /> is equal to the current 
            <see cref="T:DigitalRune.Geometry.Shapes.Triangle" />.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Triangle.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current 
            <see cref="T:System.Object" />.
            </summary>
      <param name="obj">
            The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.
            </param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current 
            <see cref="T:System.Object" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Triangle.GetAabb(DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this triangle positioned in world space
            using the given <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned in
            world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Triangle.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.Triangle.Item(System.Int32)">
      <summary>
            Gets or sets the vertex at the specified index.
            </summary>
      <param name="index">The index of the triangle point.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.Triangle.Normal">
      <summary>
            Gets the normal.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Triangle.op_Equality(DigitalRune.Geometry.Shapes.Triangle,DigitalRune.Geometry.Shapes.Triangle)">
      <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.Triangle" />s are equal.
            </summary>
      <param name="triangle1">The first <see cref="T:DigitalRune.Geometry.Shapes.Triangle" />.</param>
      <param name="triangle2">The second <see cref="T:DigitalRune.Geometry.Shapes.Triangle" />.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:DigitalRune.Geometry.Shapes.Triangle" />s are equal; otherwise 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Triangle.op_Inequality(DigitalRune.Geometry.Shapes.Triangle,DigitalRune.Geometry.Shapes.Triangle)">
      <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.Triangle" />s are different.
            </summary>
      <param name="triangle1">The first <see cref="T:DigitalRune.Geometry.Shapes.Triangle" />.</param>
      <param name="triangle2">The second <see cref="T:DigitalRune.Geometry.Shapes.Triangle" />.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:DigitalRune.Geometry.Shapes.Triangle" />s are different; otherwise 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.Triangle.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="F:DigitalRune.Geometry.Shapes.Triangle.Vertex0">
      <summary>
            The first vertex.
            </summary>
    </member>
    <member name="F:DigitalRune.Geometry.Shapes.Triangle.Vertex1">
      <summary>
            The second vertex.
            </summary>
    </member>
    <member name="F:DigitalRune.Geometry.Shapes.Triangle.Vertex2">
      <summary>
            The third vertex.
            </summary>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.TriangleMeshShape">
      <summary>
            Represents a shape defined by an <see cref="T:DigitalRune.Geometry.Meshes.ITriangleMesh" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.#ctor(DigitalRune.Geometry.Meshes.ITriangleMesh)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape" /> class from the given 
            triangle mesh.
            </summary>
      <param name="mesh">The mesh.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mesh" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.#ctor(DigitalRune.Geometry.Meshes.ITriangleMesh,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape" /> class from the given
            triangle mesh.
            </summary>
      <param name="mesh">The mesh.</param>
      <param name="enableContactWelding"> 
            If set to <see langword="true" /> contact welding is enabled; otherwise, the shape will not
            use contact welding. See <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.EnableContactWelding" /> for more information.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mesh" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.#ctor(DigitalRune.Geometry.Meshes.ITriangleMesh,System.Boolean,DigitalRune.Geometry.Partitioning.ISpatialPartition{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape" /> class from the given
            triangle mesh.
            </summary>
      <param name="mesh">The mesh.</param>
      <param name="enableContactWelding"> 
            If set to <see langword="true" /> contact welding is enabled; otherwise, the shape will not
            use contact welding. See <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.EnableContactWelding" /> for more information.
            </param>
      <param name="partition">
            The spatial partition (see <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.Partition" />). Can be <see langword="null" /> if no 
            partition should be used.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mesh" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.EnableContactWelding">
      <summary>
            Gets or sets a value indicating whether contact welding is enabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the
            shape's local space before the pose is applied.
            </param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.GetVolume">
      <summary>
            Computes the enclosed volume of the mesh.
            </summary>
      <returns>The enclosed volume of the mesh.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.GetVolume(System.Single,System.Int32)">
      <summary>
            Computes the enclosed volume of the mesh.
            </summary>
      <param name="relativeError">Not used.</param>
      <param name="iterationLimit">Not used.</param>
      <returns>The enclosed volume of the mesh.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.InnerPoint">
      <summary>
            Gets an inner point.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.Invalidate">
      <summary>
            Invalidates the triangle mesh.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.Invalidate(System.Boolean)">
      <summary>
            Invalidates the triangle mesh.
            </summary>
      <param name="invalidateTopology">
            if set to <see langword="true" /> the mesh topology is invalidated.
            </param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.Invalidate(System.Int32,System.Boolean)">
      <summary>
            Invalidates the whole triangle mesh or a single triangle.
            </summary>
      <param name="triangleIndex">
            Index of the triangle. Can be -1 to invalidate the whole mesh.
            </param>
      <param name="invalidateTopology">
            If set to <see langword="true" /> the mesh topology is invalidated.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="triangleIndex" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.IsTwoSided">
      <summary>
            Gets or sets a value indicating whether the mesh is two-sided.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.Mesh">
      <summary>
            Gets or sets the triangle mesh.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.Partition">
      <summary>
            Gets or set the spatial partition used to improve the performance of geometric queries.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.TriangleShape">
      <summary>
            Represents a triangle.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleShape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.TriangleShape" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleShape.#ctor(DigitalRune.Geometry.Shapes.Triangle)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.TriangleShape" /> class from a 
            <see cref="T:DigitalRune.Geometry.Shapes.Triangle" />.
            </summary>
      <param name="triangle">
            The <see cref="T:DigitalRune.Geometry.Shapes.Triangle" /> structure from which vertices are copied.
            </param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleShape.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.TriangleShape" /> class from the given vertices.
            </summary>
      <param name="vertex0">The first vertex.</param>
      <param name="vertex1">The second vertex.</param>
      <param name="vertex2">The third vertex.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape" />.
            </summary>
      <param name="sourceShape">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleShape.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape" />
            derived class.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
      <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the
            shape's local space before the pose is applied.
            </param>
      <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose" /> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
      <returns>
            The AABB of the shape positioned in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleShape.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given direction.
            </summary>
      <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
      <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
      <returns>
            A support point regarding the given direction.
            </returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleShape.GetVolume(System.Single,System.Int32)">
      <summary>
            Gets the volume of this shape.
            </summary>
      <param name="relativeError">Not used.</param>
      <param name="iterationLimit">Not used</param>
      <returns>0</returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.TriangleShape.InnerPoint">
      <summary>
            Gets an inner point.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.TriangleShape.Item(System.Int32)">
      <summary>
            Gets or sets the vertex at the specified index.
            </summary>
      <param name="index">The index of the triangle point.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.TriangleShape.Normal">
      <summary>
            Gets the normal.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleShape.OnGetMesh(System.Single,System.Int32)">
      <summary>
            Called when a mesh should be generated for the shape.
            </summary>
      <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
      <param name="iterationLimit">The iteration limit.</param>
      <returns>The triangle mesh for this shape.</returns>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.TriangleShape.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.TriangleShape.Vertex0">
      <summary>
            Gets or sets the first vertex.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.TriangleShape.Vertex1">
      <summary>
            Gets or sets the second vertex.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.TriangleShape.Vertex2">
      <summary>
            Gets or sets the third vertex.
            </summary>
    </member>
    <member name="T:DigitalRune.Geometry.Shapes.ViewVolume">
      <summary>
            Represents a view volume (base implementation).
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ViewVolume.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ViewVolume" /> class</summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.AspectRatio">
      <summary>
            Gets the aspect ratio (width / height).
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.Bottom">
      <summary>
            Gets or sets the minimum y-value of the view volume at the near clip plane.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.Depth">
      <summary>
            Gets the depth of the view volume (= <see cref="P:DigitalRune.Geometry.Shapes.ViewVolume.Far" /> - <see cref="P:DigitalRune.Geometry.Shapes.ViewVolume.Near" />).
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.Far">
      <summary>
            Gets or sets the distance to the far clip plane. 
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The far plane distance must not be negative or 0.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.FieldOfViewX">
      <summary>
            Gets the horizontal field of view.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.FieldOfViewY">
      <summary>
            Gets the vertical field of view.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.Height">
      <summary>
            Gets the height of the view volume at the near clip plane.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.Left">
      <summary>
            Gets or sets the minimum x-value of the view volume at the near clip plane.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.Near">
      <summary>
            Gets or sets the distance to the near clip plane. 
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The near plane distance must not be negative or 0.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.Right">
      <summary>
            Gets or sets the maximum x-value of the view volume at the near clip plane.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ViewVolume.Set(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Sets the dimensions of the view volume.
            </summary>
      <param name="left">The minimum x-value of the view volume at the near clip plane.</param>
      <param name="right">The maximum x-value of the view volume at the near clip plane.</param>
      <param name="bottom">The minimum y-value of the view volume at the near clip plane.</param>
      <param name="top">The maximum y-value of the view volume at the near clip plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="left" /> is greater than or equal to <paramref name="right" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bottom" /> is greater than or equal to <paramref name="top" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ViewVolume.Set(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Sets the dimensions of the view volume (including depths).
            </summary>
      <param name="left">The minimum x-value of the view volume at the near clip plane.</param>
      <param name="right">The maximum x-value of the view volume at the near clip plane.</param>
      <param name="bottom">The minimum y-value of the view volume at the near clip plane.</param>
      <param name="top">The maximum y-value of the view volume at the near clip plane.</param>
      <param name="near">The distance to the near clip plane.</param>
      <param name="far">The distance to the far clip plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="left" /> is greater than or equal to <paramref name="right" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bottom" /> is greater than or equal to <paramref name="top" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="near" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="near" /> is greater than or equal to <paramref name="far" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ViewVolume.SetWidthAndHeight(System.Single,System.Single)">
      <summary>
            Sets the width and height of the view volume to the specified size.
            </summary>
      <param name="width">The width of the view volume at the near clip plane.</param>
      <param name="height">The height of the view volume at the near clip plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="width" /> is negative.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="height" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ViewVolume.SetWidthAndHeight(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Sets the width and height of the view volume to the specified size and depth.
            </summary>
      <param name="width">The width of the view volume at the near clip plane.</param>
      <param name="height">The height of the view volume at the near clip plane.</param>
      <param name="near">The distance to the near clip plane.</param>
      <param name="far">The distance to the far clip plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="width" /> is negative.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="height" /> is negative.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="near" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="near" /> is greater than or equal to <paramref name="far" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.Top">
      <summary>
            Gets or sets the maximum y-value of the view volume at the near clip plane.
            </summary>
    </member>
    <member name="M:DigitalRune.Geometry.Shapes.ViewVolume.Update">
      <summary>
            Updates the shape.
            </summary>
    </member>
    <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.Width">
      <summary>
            Gets the width of the view volume at the near clip plane.
            </summary>
    </member>
  </members>
</doc>