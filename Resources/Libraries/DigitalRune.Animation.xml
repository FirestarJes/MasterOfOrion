<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>DigitalRune.Animation</name>
  </assembly>
  <members>
    <member name="T:DigitalRune.Animation.AnimatableProperty`1">
      <summary>
            Represents a property that can be animated. (Default implementation.)
            </summary>
      <typeparam name="T">The type of the property.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.AnimatableProperty`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimatableProperty`1" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty#AnimationValue">
      <summary>
            Gets the animation value.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty#BaseValue">
      <summary>
            Gets the base value.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty#HasBaseValue">
      <summary>
            Gets a value indicating whether this property has a base value.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty#IsAnimated">
      <summary>
            Gets or sets a value indicating whether this property is animated by the animation system.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty{T}#AnimationValue">
      <summary>
            Gets or sets the animation value.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty{T}#BaseValue">
      <summary>
            Gets the base value.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimatableProperty`1.Value">
      <summary>
            Gets or sets the value of the property.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Animation`1">
      <summary>
            Provides a base implementation for animations.
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.Animation`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Animation`1" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Animation`1.CreateBlendAnimation">
      <summary>
            Creates a new <see cref="T:DigitalRune.Animation.BlendAnimation`1" />. (For internal use only.)
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Animation.BlendAnimation`1" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Animation`1.CreateInstance">
      <summary>
            Creates an animation instance that can be used to play back the animation. 
            (For internal use only.)
            </summary>
      <returns>
            An <see cref="T:DigitalRune.Animation.AnimationInstance" /> that can be used to play back the animation.
            </returns>
    </member>
    <member name="P:DigitalRune.Animation.Animation`1.FillBehavior">
      <summary>
            Gets or sets a value that specifies how the animation behaves when it reaches the end of its 
            duration.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Animation`1.GetAnimationTime(System.TimeSpan)">
      <summary>
            Gets the animation time for the specified time on the timeline.
            </summary>
      <param name="time">The time on the timeline.</param>
      <returns>
            The animation time. (The return value is <see langword="null" /> if the animation is not 
            active at <paramref name="time" />.)
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Animation`1.GetState(System.TimeSpan)">
      <summary>
            Gets the state of the animation for the specified time on the timeline.
            </summary>
      <param name="time">The time on the timeline.</param>
      <returns>The state of the animation.</returns>
    </member>
    <member name="M:DigitalRune.Animation.Animation`1.GetTotalDuration">
      <summary>
            Gets the total length of the timeline.
            </summary>
      <returns>The total length of the timeline.</returns>
    </member>
    <member name="M:DigitalRune.Animation.Animation`1.GetValue(System.TimeSpan,`0@,`0@,`0@)">
      <summary>
            Gets the value of the animation at the specified time.
            </summary>
      <param name="time">The time value on the timeline.</param>
      <param name="defaultSource">
            In: The source value that should be used by the animation if the animation does not have its 
            own source value.
            </param>
      <param name="defaultTarget">
            In: The target value that should be used by the animation if the animation does not have its 
            own target value.
            </param>
      <param name="result">
            Out: The value of the animation at the given time. (The animation returns 
            <paramref name="defaultSource" /> if the animation is <see cref="F:DigitalRune.Animation.AnimationState.Delayed" /> 
            or <see cref="F:DigitalRune.Animation.AnimationState.Stopped" /> at <paramref name="time" />.)
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Animation`1.GetValueCore(System.TimeSpan,`0@,`0@,`0@)">
      <summary>
            Evaluates the animation function at the specified animation time.
            </summary>
      <param name="time">The animation time.</param>
      <param name="defaultSource">
            In: The source value that should be used by the animation if the animation does not have its 
            own source value.
            </param>
      <param name="defaultTarget">
            In: The target value that should be used by the animation if the animation does not have its 
            own target value.
            </param>
      <param name="result">
            Out: The value of the animation at the given time.
            </param>
    </member>
    <member name="P:DigitalRune.Animation.Animation`1.IsAdditive">
      <summary>
            Gets or sets a value indicating whether the output of the animation is added to the current
            value of the property that is being animated.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Animation`1.TargetObject">
      <summary>
            Gets or sets the object to which the animation is applied by default.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Animation`1.TargetProperty">
      <summary>
            Gets or sets the property to which the animation is applied by default.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Animation`1.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.AnimationClip`1">
      <summary>
            Plays back a clip of another animation.
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.AnimationClip`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimationClip`1" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationClip`1.#ctor(DigitalRune.Animation.IAnimation{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimationClip`1" /> class for the given
            animation.
            </summary>
      <param name="animation">The original animation.</param>
    </member>
    <member name="P:DigitalRune.Animation.AnimationClip`1.Animation">
      <summary>
            Gets or sets the original animation from which a clip is played back.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimationClip`1.ClipEnd">
      <summary>
            Gets or sets the end time of the animation clip.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimationClip`1.ClipOffset">
      <summary>
            Gets the time offset that is applied to the selected animation clip.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimationClip`1.ClipStart">
      <summary>
            Gets or sets the start time of the animation clip.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationClip`1.CreateBlendAnimation">
      <summary>
            Creates a new <see cref="T:DigitalRune.Animation.BlendAnimation`1" />. (For internal use only.)
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Animation.BlendAnimation`1" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.AnimationClip`1.CreateInstance">
      <summary>
            Creates an animation instance that can be used to play back the animation. 
            (For internal use only.)
            </summary>
      <returns>
            An <see cref="T:DigitalRune.Animation.AnimationInstance" /> that can be used to play back the animation.
            </returns>
    </member>
    <member name="P:DigitalRune.Animation.AnimationClip`1.Delay">
      <summary>
            Gets or sets the time at which the animation clip begins.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimationClip`1.Duration">
      <summary>
            Gets or sets the duration for which the animation clip is played.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.AnimationClip`1.FillBehavior">
      <summary>
            Gets or sets a value that specifies how the animation behaves when it reaches the end of its 
            duration.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationClip`1.GetAnimationTime(System.TimeSpan)">
      <summary>
            Gets the animation time for the specified time on the timeline.
            </summary>
      <param name="time">The time on the timeline.</param>
      <returns>
            The animation time. (The return value is <see langword="null" /> if the animation is not 
            active at <paramref name="time" />.)
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.AnimationClip`1.GetState(System.TimeSpan)">
      <summary>
            Gets the state of the animation for the specified time on the timeline.
            </summary>
      <param name="time">The time on the timeline.</param>
      <returns>The state of the animation.</returns>
    </member>
    <member name="M:DigitalRune.Animation.AnimationClip`1.GetTotalDuration">
      <summary>
            Gets the total length of the timeline.
            </summary>
      <returns>The total length of the timeline.</returns>
    </member>
    <member name="M:DigitalRune.Animation.AnimationClip`1.GetValue(System.TimeSpan,`0@,`0@,`0@)">
      <summary>
            Gets the value of the animation at the specified time.
            </summary>
      <param name="time">The time value on the timeline.</param>
      <param name="defaultSource">
            In: The source value that should be used by the animation if the animation does not have its 
            own source value.
            </param>
      <param name="defaultTarget">
            In: The target value that should be used by the animation if the animation does not have its 
            own target value.
            </param>
      <param name="result">
            Out: The value of the animation at the given time. (The animation returns 
            <paramref name="defaultSource" /> if the animation is <see cref="F:DigitalRune.Animation.AnimationState.Delayed" /> 
            or <see cref="F:DigitalRune.Animation.AnimationState.Stopped" /> at <paramref name="time" />.)
            </param>
      <exception cref="T:DigitalRune.Animation.InvalidAnimationException">
            Cannot evaluate animation clip because the animation clip is empty.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.AnimationClip`1.IsAdditive">
      <summary>
            Gets or sets a value indicating whether the output of the animation is added to the current
            value of the property that is being animated.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimationClip`1.LoopBehavior">
      <summary>
            Gets or sets the behavior of the animation past the end of the animation clip.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimationClip`1.Speed">
      <summary>
            Gets or sets the speed ratio at which the animation clip is played.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or not a finite value.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.AnimationClip`1.TargetObject">
      <summary>
            Gets or sets the object to which the animation is applied by default.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimationClip`1.TargetProperty">
      <summary>
            Gets or sets the property to which the animation is applied by default.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimationClip`1.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.AnimationController">
      <summary>
            Provides interactive control over an animation.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimationController.AnimationInstance">
      <summary>
            Gets the root animation instance.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimationController.AnimationService">
      <summary>
            Gets the animation service.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationController.AutoRecycle">
      <summary>
            Automatically recycles the animation instances when the animation is stopped and removed 
            from the animation system.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimationController.AutoRecycleEnabled">
      <summary>
            Gets or sets a value indicating whether the animation instance should be automatically
            recycled when the animation is stopped and removed from the animation system.
            </summary>
    </member>
    <member name="E:DigitalRune.Animation.AnimationController.Completed">
      <summary>
            Occurs when the animation has completed playing.  Use with caution - see remarks.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimationController.IsPaused">
      <summary>
            Gets a value indicating whether the animation is paused.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimationController.IsValid">
      <summary>
            Gets a value indicating whether this animation controller is valid.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationController.Pause">
      <summary>
            Stops the animation from progressing.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationController.Recycle">
      <summary>
            Recycles the animation instances associated with this controller.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationController.Resume">
      <summary>
            Resumes an animation that was previously paused.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimationController.Speed">
      <summary>
            Gets or sets the rate at which time progresses.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationController.Start">
      <summary>
            Starts the animation immediately.
            </summary>
      <exception cref="T:DigitalRune.Animation.AnimationException">
            Cannot start animation. The animation instance associated with the current animation 
            controller is already running or has already been recycled and the animation controller is
            no longer valid.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationController.Start(DigitalRune.Animation.Transitions.AnimationTransition)">
      <summary>
            Starts the animation using the specified transition.
            </summary>
      <param name="transition">
            The transition that determines how the new animation is applied. The class 
            <see cref="T:DigitalRune.Animation.AnimationTransitions" /> provides a set of predefined animation transitions.
            </param>
      <exception cref="T:DigitalRune.Animation.AnimationException">
            Cannot start animation. The animation instance associated with the current animation 
            controller is already running or has already been recycled and the animation controller is
            no longer valid.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.AnimationController.State">
      <summary>
            Gets the current state of the animation.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationController.Stop">
      <summary>
            Stops the animation immediately.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationController.Stop(System.TimeSpan)">
      <summary>
            Stops the animation by fading it out over time.
            </summary>
      <param name="fadeOutDuration">
            The duration over which the existing animation fades out.
            </param>
    </member>
    <member name="P:DigitalRune.Animation.AnimationController.Time">
      <summary>
            Gets or sets the current animation time.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationController.UpdateAndApply">
      <summary>
            Immediately evaluates the animation and applies the new animation values.
            </summary>
      <exception cref="T:DigitalRune.Animation.AnimationException">
            Cannot update and apply animation. The animation instance associated with the current 
            animation controller is already running or has already been recycled and the animation 
            controller is no longer valid.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.AnimationController.Weight">
      <summary>
            Gets or sets the animation weight.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.AnimationCurve`4">
      <summary>
            Animates a value using an animation curve. (Base implementation.)
            </summary>
      <typeparam name="TValue">
            The type of the animation value.
            </typeparam>
      <typeparam name="TPoint">
            The type of the curve points, such as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />, <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />, etc.
            </typeparam>
      <typeparam name="TCurveKey">
            The type of the curve key. (A type derived from <see cref="T:DigitalRune.Mathematics.Interpolation.CurveKey`2" />.)
            </typeparam>
      <typeparam name="TCurve">
            The type of the curve. (A type derived from 
            <see cref="T:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3" />.)
            </typeparam>
    </member>
    <member name="M:DigitalRune.Animation.AnimationCurve`4.#ctor">
      <summary>
            Initializes a new instance of the 
            <see cref="T:DigitalRune.Animation.AnimationCurve`4" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimationCurve`4.Curve">
      <summary>
            Gets or sets the curve that defines the animation.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimationCurve`4.EndParameter">
      <summary>
            Gets or sets the end parameter.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationCurve`4.GetTotalDuration">
      <summary>
            Gets the total length of the timeline.
            </summary>
      <returns>The total length of the timeline.</returns>
    </member>
    <member name="M:DigitalRune.Animation.AnimationCurve`4.GetValueCore(System.TimeSpan,`0@,`0@,`0@)">
      <summary>
            Evaluates the animation function at the specified animation time.
            </summary>
      <param name="time">The animation time.</param>
      <param name="defaultSource">
            In: The source value that should be used by the animation if the animation does not have its 
            own source value.
            </param>
      <param name="defaultTarget">
            In: The target value that should be used by the animation if the animation does not have its 
            own target value.
            </param>
      <param name="result">
            Out: The value of the animation at the given time.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.AnimationCurve`4.GetValueFromPoint(`1)">
      <summary>
            Gets the animation value from a given point on the curve.
            </summary>
      <param name="point">The point on the curve.</param>
      <returns>The animation value.</returns>
    </member>
    <member name="P:DigitalRune.Animation.AnimationCurve`4.StartParameter">
      <summary>
            Gets or sets the start parameter.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.AnimationException">
      <summary>
            The exception that is thrown when an error occurs in the animation system.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimationException" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimationException" /> class with serialized 
            data.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the 
            exception being thrown.
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or 
            destination.
            </param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is <see langword="null" />.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimationException" /> class with a specified 
            error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:DigitalRune.Animation.AnimationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimationException" /> class with a specified 
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">
            The exception that is the cause of the current exception, or <see langword="null" /> if no 
            inner exception is specified.
            </param>
    </member>
    <member name="T:DigitalRune.Animation.AnimationHelper">
      <summary>
            Provides helper methods for working with ragdolls.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationHelper.Compress(DigitalRune.Animation.SrtKeyFrameAnimation,System.Single,System.Single,System.Single)">
      <summary>
            Compresses the specified animation using simple lossy compression algorithm.
            </summary>
      <param name="animation">The animation.</param>
      <param name="scaleThreshold">The scale threshold.</param>
      <param name="rotationThreshold">The rotation threshold in degrees.</param>
      <param name="translationThreshold">The translation threshold.</param>
      <returns>
            The compressed animation. Or <see langword="null" /> if the animation does not animate the 
            <see cref="T:DigitalRune.Animation.Character.SrtTransform" /> (the <see cref="T:DigitalRune.Animation.Character.SrtTransform" /> is always 
            <see cref="F:DigitalRune.Animation.Character.SrtTransform.Identity" />).
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="animation" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationHelper.ComputeAngularVelocity(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Matrix33F,System.Single)">
      <summary>
            Computes the angular velocity that rotates an object from the current orientation to a 
            target orientation.
            </summary>
      <param name="currentOrientation">The current orientation.</param>
      <param name="targetOrientation">The target orientation.</param>
      <param name="deltaTime">The time over which the rotation takes place (in seconds).</param>
      <returns>
            The angular velocity vector. If an object is rotated with this velocity starting at
            <paramref name="currentOrientation" />, it will arrive at <paramref name="targetOrientation" />
            after <paramref name="deltaTime" /> seconds.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.AnimationHelper.ComputeAngularVelocity(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,System.Single)">
      <summary>
            Computes the angular velocity that rotates an object from the current orientation to a 
            target orientation.
            </summary>
      <param name="currentOrientation">The current orientation.</param>
      <param name="targetOrientation">The target orientation.</param>
      <param name="deltaTime">The time over which the rotation takes place (in seconds).</param>
      <returns>
            The angular velocity vector. If an object is rotated with this velocity starting at
            <paramref name="currentOrientation" />, it will arrive at <paramref name="targetOrientation" />
            after <paramref name="deltaTime" /> seconds.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.AnimationHelper.ComputeLinearVelocity(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
      <summary>
            Computes the linear velocity that moves an object from the current position to a 
            target position.
            </summary>
      <param name="currentPosition">The current position.</param>
      <param name="targetPosition">The target position.</param>
      <param name="deltaTime">The time over which the movement takes place (in seconds).</param>
      <returns>
            The linear velocity vector. If an object is moved with this velocity starting at
            <paramref name="currentPosition" />, it will arrive at <paramref name="targetPosition" />
            after <paramref name="deltaTime" /> seconds.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.AnimationHelper.CreateAvatarRagdoll(DigitalRune.Animation.Character.AvatarPose,DigitalRune.Physics.Simulation)">
      <summary>
            Creates a <see cref="T:DigitalRune.Animation.Character.Ragdoll" /> for an Xbox avatar.
            </summary>
      <param name="avatarPose">The avatar pose.</param>
      <param name="simulation">The simulation.</param>
      <returns>The avatar ragdoll.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="avatarPose" /> or <paramref name="simulation" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationHelper.GetAncestors(DigitalRune.Animation.AnimationInstance)">
      <summary>
            Gets the ancestors of the <see cref="T:DigitalRune.Animation.AnimationInstance" /> in the animation tree.
            </summary>
      <param name="animationInstance">The animation instance where to start the search.</param>
      <returns>
            The ancestors of <paramref name="animationInstance" /> in the animation tree.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="animationInstance" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationHelper.GetDescendants(DigitalRune.Animation.AnimationInstance)">
      <summary>
            Gets the descendants of the <see cref="T:DigitalRune.Animation.AnimationInstance" /> in the animation tree using a
            depth-first search.
            </summary>
      <param name="animationInstance">The animation instance where to start the search.</param>
      <returns>
            The descendants of <paramref name="animationInstance" /> in the animation tree.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="animationInstance" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationHelper.GetDescendants(DigitalRune.Animation.AnimationInstance,System.Boolean)">
      <summary>
            Gets the descendants of the <see cref="T:DigitalRune.Animation.AnimationInstance" /> in the animation tree 
            using either a depth-first or a breadth-first search.
            </summary>
      <param name="animationInstance">The animation instance where to start the search.</param>
      <param name="depthFirst">
            If set to <see langword="true" /> then a depth-first search for descendants will be made; 
            otherwise a breadth-first search will be made.
            </param>
      <returns>
            The descendants of <paramref name="animationInstance" /> in the animation tree.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="animationInstance" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationHelper.GetLeaves(DigitalRune.Animation.AnimationInstance)">
      <summary>
            Gets the leaves of the <see cref="T:DigitalRune.Animation.AnimationInstance" /> in the animation tree.
            </summary>
      <param name="animationInstance">The animation instance where to start the search.</param>
      <returns>
            The leaves of <paramref name="animationInstance" /> in the animation tree.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="animationInstance" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationHelper.GetRoot(DigitalRune.Animation.AnimationInstance)">
      <summary>
            Returns the root instance of an animation tree.
            </summary>
      <param name="animationInstance">The animation instance where to start the search.</param>
      <returns>The root instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="animationInstance" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationHelper.GetSelfAndAncestors(DigitalRune.Animation.AnimationInstance)">
      <summary>
            Gets the <see cref="T:DigitalRune.Animation.AnimationInstance" /> and its ancestors in the animation tree.
            </summary>
      <param name="animationInstance">The animation instance where to start the search.</param>
      <returns>
            The <paramref name="animationInstance" /> and its ancestors in the animation tree.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="animationInstance" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationHelper.GetSubtree(DigitalRune.Animation.AnimationInstance)">
      <summary>
            Gets the subtree (the given <see cref="T:DigitalRune.Animation.AnimationInstance" /> and all of its descendants in the
            animation tree) using a depth-first search.
            </summary>
      <param name="animationInstance">The animation instance where to start the search.</param>
      <returns>
            The <paramref name="animationInstance" /> and all of its descendants in the animation tree.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="animationInstance" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationHelper.GetSubtree(DigitalRune.Animation.AnimationInstance,System.Boolean)">
      <summary>
            Gets the subtree (the given <see cref="T:DigitalRune.Animation.AnimationInstance" /> and all of its descendants in the
            animation tree) using either a depth-first or a breadth-first search.
            </summary>
      <param name="animationInstance">The animation instance where to start the search.</param>
      <param name="depthFirst">
            If set to <see langword="true" /> then a depth-first search for descendants will be made; 
            otherwise a breadth-first search will be made.
            </param>
      <returns>
            The <paramref name="animationInstance" /> and all of its descendants in the animation tree.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="animationInstance" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Animation.AnimationInstance">
      <summary>
            Represents an instance of an animation timeline.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationInstance.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimationInstance" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimationInstance.Animation">
      <summary>
            Gets the animation timeline that is being played back.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimationInstance.AutoRecycleEnabled">
      <summary>
            Gets or sets a value indicating whether this animation instance should be automatically
            recycled when it is stopped and removed from the animation system.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimationInstance.Children">
      <summary>
            Gets the children of this animation instance.
            </summary>
    </member>
    <member name="E:DigitalRune.Animation.AnimationInstance.Completed">
      <summary>
            Occurs when the animation has completed playing. Use with caution - see remarks.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationInstance.Create(DigitalRune.Animation.ITimeline)">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Animation.AnimationInstance" /> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <param name="animation">The animation timeline.</param>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Animation.AnimationInstance" /> class.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="animation" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationInstance.DigitalRune#Animation#IAnimatableObject#GetAnimatableProperty``1(System.String)">
      <summary>
            Gets the property with given name and type which can be animated.
            </summary>
      <param name="name">The name of the property.</param>
      <typeparam name="T">The type of the property.</typeparam>
      <returns>
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty" /> that has the given name and type; otherwise, 
            <see langword="null" /> if the object does not have an property with this name or type.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.AnimationInstance.DigitalRune#Animation#IAnimatableObject#GetAnimatedProperties">
      <summary>
            Gets the properties which are currently being animated.
            </summary>
      <returns>
            The properties which are currently being animated.
            </returns>
    </member>
    <member name="P:DigitalRune.Animation.AnimationInstance.DigitalRune#INamedObject#Name">
      <summary>
            Not implemented.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationInstance.Invalidate">
      <summary>
            Invalidates the current state of the animation.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimationInstance.IsPaused">
      <summary>
            Gets a value indicating whether this animation instance is paused.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationInstance.OnCompleted(System.EventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Animation.AnimationInstance.Completed" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:System.EventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="P:DigitalRune.Animation.AnimationInstance.Parent">
      <summary>
            Gets the parent of this animation instance.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationInstance.Recycle">
      <summary>
            Recycles this animation instance (including all children).
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimationInstance.Speed">
      <summary>
            Gets or sets the rate at which time progresses.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is NaN or infinity.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.AnimationInstance.State">
      <summary>
            Gets the current state of the animation.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AnimationInstance.Time">
      <summary>
            Gets or sets the current animation time.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            Cannot set animation time because this is not the root instance. The animation instance is 
            a node in the animation tree, but only the root node of the tree can be controlled directly.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.AnimationInstance.Weight">
      <summary>
            Gets or sets the animation weight.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or greater than 1.
            </exception>
    </member>
    <member name="T:DigitalRune.Animation.AnimationInstance`1">
      <summary>
            Represents an instance of an animation.
            </summary>
      <typeparam name="T">The type of animation value.</typeparam>
    </member>
    <member name="P:DigitalRune.Animation.AnimationInstance`1.Animation">
      <summary>
            Gets the animation that is being played back.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationInstance`1.Create(DigitalRune.Animation.IAnimation{`0})">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Animation.AnimationInstance`1" /> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <param name="animation">The animation that should be played back.</param>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Animation.AnimationInstance`1" /> class.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="animation" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.AnimationInstance`1.Property">
      <summary>
            Gets the target property that is being animated.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationInstance`1.Recycle">
      <summary>
            Recycles this instance of the <see cref="T:DigitalRune.Animation.AnimationInstance" /> class.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.AnimationInstanceCollection">
      <summary>
            Manages the children of an animation instance.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationInstanceCollection.#ctor(DigitalRune.Animation.AnimationInstance,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimationInstanceCollection" /> class.
            </summary>
      <param name="owner">The animation instance that owns this child collection.</param>
      <param name="capacity">The number of elements that the new list can initially store.</param>
    </member>
    <member name="M:DigitalRune.Animation.AnimationInstanceCollection.GetParent(DigitalRune.Animation.AnimationInstance)">
      <summary>
            Gets the parent of an object.
            </summary>
      <param name="child">The child object.</param>
      <returns>The parent of <paramref name="child" />.</returns>
    </member>
    <member name="M:DigitalRune.Animation.AnimationInstanceCollection.SetParent(DigitalRune.Animation.AnimationInstance,DigitalRune.Animation.AnimationInstance)">
      <summary>
            Sets the parent of the given object.
            </summary>
      <param name="parent">The parent to set.</param>
      <param name="child">The child object.</param>
    </member>
    <member name="T:DigitalRune.Animation.AnimationManager">
      <summary>
            Represents the animations system which can be used to play back animations.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationManager.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimationManager" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationManager.ApplyAnimations">
      <summary>
            Applies the new animation values to all animated properties.
            </summary>
      <param name="deltaTime">
            The elapsed time since the last update. (If <paramref name="deltaTime" /> is negative,
            this method does nothing. It does not reverse the animations.)
            </param>
    </member>
    <member name="M:DigitalRune.Animation.AnimationManager.CreateController(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableObject)">
      <summary>
            Creates a new animation controller which can be used to apply the given animation to the
            specified object.
            </summary>
      <param name="animation">The animation.</param>
      <param name="targetObject">The target object that should be animated.</param>
      <param name="targetObjects">The target objects that should be animated.</param>
      <returns>The <see cref="T:DigitalRune.Animation.AnimationController" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetObject" /> or <paramref name="animation" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationManager.CreateController(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableProperty)">
      <summary>
            Creates a new animation controller which can be used to apply the given animation to the
            specified property.
            </summary>
      <param name="animation">The animation.</param>
      <param name="targetProperty">The target property that should be animated.</param>
      <param name="targetObjects">The target objects that should be animated.</param>
      <returns>The <see cref="T:DigitalRune.Animation.AnimationController" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetProperty" /> or <paramref name="animation" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationManager.CreateController(DigitalRune.Animation.ITimeline,System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})">
      <summary>
            Creates a new animation controller which can be used to apply the given animation to the
            specified objects.
            </summary>
      <param name="animation">The animation.</param>
      <param name="targetObjects">The target objects that should be animated.</param>
      <returns>The <see cref="T:DigitalRune.Animation.AnimationController" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetObjects" /> or <paramref name="animation" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.AnimationManager.EnableMultithreading">
      <summary>
            Gets or sets a value indicating whether multithreading is enabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationManager.IsAnimated(DigitalRune.Animation.IAnimatableObject)">
      <summary>
            Determines whether the specified object is controlled by one or more animations.
            </summary>
      <param name="animatableObject">The object.</param>
      <returns>
        <see langword="true" /> if <paramref name="animatableObject" /> is animated; otherwise, 
            <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="animatableObject" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationManager.IsAnimated(DigitalRune.Animation.IAnimatableProperty)">
      <summary>
            Determines whether the specified property is controlled by one or more animations.
            </summary>
      <param name="animatableProperty">The property.</param>
      <returns>
        <see langword="true" /> if <paramref name="animatableProperty" /> is animated; otherwise, 
            <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="animatableProperty" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationManager.StartAnimation(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableObject)">
      <summary>
            Starts an animation and applies it to the specified object.
            </summary>
      <param name="animation">The animation.</param>
      <param name="targetObject">The target object that should be animated.</param>
      <param name="targetObjects">The target objects that should be animated.</param>
      <returns>The <see cref="T:DigitalRune.Animation.AnimationController" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetObject" /> or <paramref name="animation" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationManager.StartAnimation(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableObject,DigitalRune.Animation.Transitions.AnimationTransition)">
      <summary>
            Starts an animation using a given transition and applies it to the specified object.
            </summary>
      <param name="animation">The animation.</param>
      <param name="targetObject">The target object that should be animated.</param>
      <param name="transition">
            The transition that determines how the new animation is applied. The class 
            <see cref="T:DigitalRune.Animation.AnimationTransitions" /> provides a set of predefined animation transitions.
            </param>
      <param name="targetObjects">The target objects that should be animated.</param>
      <returns>The <see cref="T:DigitalRune.Animation.AnimationController" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetObject" /> or <paramref name="animation" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationManager.StartAnimation(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableProperty)">
      <summary>
            Starts an animation and applies it to the specified property.
            </summary>
      <param name="animation">The animation.</param>
      <param name="targetProperty">The target property that should be animated.</param>
      <param name="targetObjects">The target objects that should be animated.</param>
      <returns>The <see cref="T:DigitalRune.Animation.AnimationController" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetProperty" /> or <paramref name="animation" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationManager.StartAnimation(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableProperty,DigitalRune.Animation.Transitions.AnimationTransition)">
      <summary>
            Starts an animation using a given transition and applies it to the specified property.
            </summary>
      <param name="animation">The animation.</param>
      <param name="targetProperty">The target property that should be animated.</param>
      <param name="transition">
            The transition that determines how the new animation is applied. The class 
            <see cref="T:DigitalRune.Animation.AnimationTransitions" /> provides a set of predefined animation transitions.
            </param>
      <param name="targetObjects">The target objects that should be animated.</param>
      <returns>The <see cref="T:DigitalRune.Animation.AnimationController" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetProperty" /> or <paramref name="animation" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationManager.StartAnimation(DigitalRune.Animation.ITimeline,System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})">
      <summary>
            Starts an animation and applies it to the specified objects.
            </summary>
      <param name="animation">The animation.</param>
      <param name="targetObjects">The target objects that should be animated.</param>
      <returns>The <see cref="T:DigitalRune.Animation.AnimationController" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetObjects" /> or <paramref name="animation" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationManager.StartAnimation(DigitalRune.Animation.ITimeline,System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject},DigitalRune.Animation.Transitions.AnimationTransition)">
      <summary>
            Starts an animation using a given transition and applies it to the specified objects.
            </summary>
      <param name="animation">The animation.</param>
      <param name="targetObjects">The target objects that should be animated.</param>
      <param name="transition">
            The transition that determines how the new animation is applied. The class 
            <see cref="T:DigitalRune.Animation.AnimationTransitions" /> provides a set of predefined animation transitions.
            </param>
      <returns>The <see cref="T:DigitalRune.Animation.AnimationController" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetObjects" /> or <paramref name="animation" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationManager.StopAnimation(DigitalRune.Animation.IAnimatableObject)">
      <summary>
            Stops all animations affecting the specified object.
            </summary>
      <param name="animatedObject">The animated object.</param>
    </member>
    <member name="M:DigitalRune.Animation.AnimationManager.StopAnimation(DigitalRune.Animation.IAnimatableProperty)">
      <summary>
            Stops all animations affecting the specified property.
            </summary>
      <param name="animatedProperty">The animated property.</param>
    </member>
    <member name="M:DigitalRune.Animation.AnimationManager.StopAnimation(System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})">
      <summary>
            Stops all animations affecting the specified objects.
            </summary>
      <param name="animatedObjects">The animated objects.</param>
    </member>
    <member name="M:DigitalRune.Animation.AnimationManager.Update(System.TimeSpan)">
      <summary>
            Updates all animations.
            </summary>
      <param name="deltaTime">
            The elapsed time since the last update. (If <paramref name="deltaTime" /> is negative,
            this method does nothing. It does not reverse the animations.)
            </param>
    </member>
    <member name="M:DigitalRune.Animation.AnimationManager.UpdateAndApplyAnimation(DigitalRune.Animation.IAnimatableObject)">
      <summary>
            Immediately evaluates the animations the given object and applies the new animation values.
            </summary>
      <param name="animatedObject">The animated object.</param>
      <param name="animatedObjects">The animated objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="animatedObjects" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationManager.UpdateAndApplyAnimation(DigitalRune.Animation.IAnimatableProperty)">
      <summary>
            Immediately evaluates the animation composition chains of the given property and applies
            the new animation values.
            </summary>
      <param name="property">The property that needs to be updated.</param>
      <param name="animatedObjects">The animated objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="animatedObjects" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationManager.UpdateAndApplyAnimation(System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})">
      <summary>
            Immediately evaluates the animations of the given objects and applies the new animation 
            values.
            </summary>
      <param name="animatedObjects">The animated objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="animatedObjects" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.AnimationManager.UpdateAndApplyAnimation(System.Collections.Generic.List{DigitalRune.Animation.IAnimatableProperty})">
      <summary>
            Immediately evaluates the animations of the given properties and applies the new animation 
            values.
            </summary>
      <param name="properties">The properties that need to be updated.</param>
    </member>
    <member name="T:DigitalRune.Animation.AnimationState">
      <summary>
            Defines the state of an animation.
            </summary>
    </member>
    <member name="F:DigitalRune.Animation.AnimationState.Stopped">
      <summary>
            The animation is halted and does not return any values.
            </summary>
    </member>
    <member name="F:DigitalRune.Animation.AnimationState.Delayed">
      <summary>
            The start of the animation has been delayed and animation does not yet return any values. 
            (Animations can be delayed using the types <see cref="T:DigitalRune.Animation.TimelineClip" /> or 
            <see cref="T:DigitalRune.Animation.AnimationClip`1" />.)
            </summary>
    </member>
    <member name="F:DigitalRune.Animation.AnimationState.Playing">
      <summary>
            The animation is active and produces an animation value.
            </summary>
    </member>
    <member name="F:DigitalRune.Animation.AnimationState.Filling">
      <summary>
            The duration of the animation is exceeded and the animation returns the last animation 
            value.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.AnimationTransitions">
      <summary>
            Provides a set of predefined transitions to start or stop animations. 
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AnimationTransitions.Compose">
      <summary>
            Combines the new animation. with existing animations by appending the new animation to the 
            end of the composition chains.
            </summary>
      <returns>The <see cref="T:DigitalRune.Animation.Transitions.AnimationTransition" />.</returns>
    </member>
    <member name="M:DigitalRune.Animation.AnimationTransitions.Compose(DigitalRune.Animation.AnimationInstance)">
      <summary>
            Combines the new animation with existing animations by inserting the new animation after the 
            specified animation into the composition chains. The new animation takes effect immediately.
            </summary>
      <param name="previousAnimation">
            The animation after which the new animation should be added.
            </param>
      <returns>The <see cref="T:DigitalRune.Animation.Transitions.AnimationTransition" />.</returns>
    </member>
    <member name="M:DigitalRune.Animation.AnimationTransitions.Compose(DigitalRune.Animation.AnimationInstance,System.TimeSpan)">
      <summary>
            Combines the new animation with existing animations by inserting the new animation after the
            specified animation into the composition chains. The new animation fades in over the
            specified duration.
            </summary>
      <param name="previousAnimation">
            The animation after which the new animation should be added.
            </param>
      <param name="fadeInDuration">The duration over which the new animation fades in.</param>
      <returns>The <see cref="T:DigitalRune.Animation.Transitions.AnimationTransition" />.</returns>
    </member>
    <member name="M:DigitalRune.Animation.AnimationTransitions.Compose(System.TimeSpan)">
      <summary>
            Gradually combines the new animation with existing animations by appending the new animation 
            to the end of the composition chains. The new animation fades in over the specified 
            duration.
            </summary>
      <param name="fadeInDuration">The duration over which the new animation fades in.</param>
      <returns>The <see cref="T:DigitalRune.Animation.Transitions.AnimationTransition" />.</returns>
    </member>
    <member name="M:DigitalRune.Animation.AnimationTransitions.Replace">
      <summary>
            Replaces all existing animations with the new animation. The new animation takes effect
            immediately. The previous animations are stopped and removed from the animation system. 
            </summary>
      <returns>The <see cref="T:DigitalRune.Animation.Transitions.AnimationTransition" />.</returns>
    </member>
    <member name="M:DigitalRune.Animation.AnimationTransitions.Replace(DigitalRune.Animation.AnimationInstance)">
      <summary>
            Replaces the specified animation with the new animation. The new animation takes effect
            immediately. The previous animation is stopped and removed from the animation system. 
            </summary>
      <param name="previousAnimation">The animation that should be replaced.</param>
      <returns>The <see cref="T:DigitalRune.Animation.Transitions.AnimationTransition" />.</returns>
    </member>
    <member name="M:DigitalRune.Animation.AnimationTransitions.Replace(DigitalRune.Animation.AnimationInstance,System.TimeSpan)">
      <summary>
            Gradually replaces the specified animation with the new animation. The new animation fades
            in over the specified duration. After this duration the previous animation is stopped and 
            removed from the animation system. 
            </summary>
      <param name="previousAnimation">The animation that should be replaced.</param>
      <param name="fadeInDuration">The duration over which the new animation fades in.</param>
      <returns>The <see cref="T:DigitalRune.Animation.Transitions.AnimationTransition" />.</returns>
    </member>
    <member name="M:DigitalRune.Animation.AnimationTransitions.Replace(System.TimeSpan)">
      <summary>
            Gradually replaces all existing animations with the new animation. The new animation fades
            in over the specified duration. After this duration the previous animations are stopped and 
            removed from the animation system. 
            </summary>
      <param name="fadeInDuration">The duration over which the new animation fades in.</param>
      <returns>The <see cref="T:DigitalRune.Animation.Transitions.AnimationTransition" />.</returns>
    </member>
    <member name="M:DigitalRune.Animation.AnimationTransitions.SnapshotAndReplace">
      <summary>
            Takes a snapshot of the current animation and then starts the new animation. The new
            animation is initialized with the snapshot and takes effect immediately. The previous 
            animations are stopped and removed from the animation system. 
            </summary>
      <returns>The <see cref="T:DigitalRune.Animation.Transitions.AnimationTransition" />.</returns>
    </member>
    <member name="T:DigitalRune.Animation.AvatarExpressionKeyFrameAnimation">
      <summary>
            Animates a <see cref="T:Microsoft.Xna.Framework.GamerServices.AvatarExpression" /> value using key frames.
            (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.AvatarExpressionKeyFrameAnimation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AvatarExpressionKeyFrameAnimation" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.AvatarExpressionKeyFrameAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.BlendAnimation">
      <summary>
            Blends animations within a <see cref="T:DigitalRune.Animation.BlendGroup" />. (For internal use only.)
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.BlendAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.BlendAnimation" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.BlendAnimation.CreateInstance">
      <summary>
            Creates an animation instance that can be used to play back the animation. 
            (For internal use only.)
            </summary>
      <returns>
            An <see cref="T:DigitalRune.Animation.AnimationInstance" /> that can be used to play back the animation.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.BlendAnimation.DigitalRune#Animation#IAnimation#CreateBlendAnimation">
      <summary>
            Not implemented. Throws an <see cref="T:DigitalRune.Animation.AnimationException" />.
            </summary>
      <returns>
            Not implemented. Throws an <see cref="T:DigitalRune.Animation.AnimationException" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Animation.BlendAnimation.FillBehavior">
      <summary>
            Gets a value that specifies how the animation behaves when it reaches the end of its 
            duration.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.BlendAnimation.GetAnimationTime(System.TimeSpan)">
      <summary>
            Gets the animation time for the specified time on the timeline.
            </summary>
      <param name="time">The time on the timeline.</param>
      <returns>
            The animation time. (The return value is <see langword="null" /> if the animation is not 
            active at <paramref name="time" />.)
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.BlendAnimation.GetState(System.TimeSpan)">
      <summary>
            Gets the state of the animation for the specified time on the timeline.
            </summary>
      <param name="time">The time on the timeline.</param>
      <returns>The state of the animation.</returns>
    </member>
    <member name="M:DigitalRune.Animation.BlendAnimation.GetTotalDuration">
      <summary>
            Gets the total length of the timeline.
            </summary>
      <returns>The total length of the timeline.</returns>
    </member>
    <member name="P:DigitalRune.Animation.BlendAnimation.Group">
      <summary>
            Gets the <see cref="T:DigitalRune.Animation.BlendGroup" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.BlendAnimation.TargetObject">
      <summary>
            Gets the object to which the animation is applied by default.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.BlendAnimation.TargetProperty">
      <summary>
            Gets or sets the property to which the animation is applied by default.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.BlendAnimation`1">
      <summary>
            Blends animations within a <see cref="T:DigitalRune.Animation.BlendGroup" />. (For internal use only.)
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.BlendAnimation`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.BlendAnimation`1" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.BlendAnimation`1.CreateInstance">
      <summary>
            Creates an animation instance that can be used to play back the animation. 
            (For internal use only.)
            </summary>
      <returns>
            An <see cref="T:DigitalRune.Animation.AnimationInstance" /> that can be used to play back the animation.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.BlendAnimation`1.GetValue(System.TimeSpan,`0@,`0@,`0@)">
      <summary>
            Gets the value of the animation at the specified time.
            </summary>
      <param name="time">The time value on the timeline.</param>
      <param name="defaultSource">
            In: The source value that should be used by the animation if the animation does not have its 
            own source value.
            </param>
      <param name="defaultTarget">
            In: The target value that should be used by the animation if the animation does not have its 
            own target value.
            </param>
      <param name="result">
            Out: The value of the animation at the given time. (The animation returns 
            <paramref name="defaultSource" /> if the animation is <see cref="F:DigitalRune.Animation.AnimationState.Delayed" /> 
            or <see cref="F:DigitalRune.Animation.AnimationState.Stopped" /> at <paramref name="time" />.)
            </param>
      <exception cref="T:DigitalRune.Animation.InvalidAnimationException">
            Cannot evaluate blend animation because the blend animation is empty or the blend group is
            not set.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.BlendAnimation`1.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.BlendGroup">
      <summary>
            Blends two or more animations.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.BlendGroup" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.Add(DigitalRune.Animation.ITimeline)">
      <summary>
            Adds a timeline with a blend weight of 1 to the <see cref="T:DigitalRune.Animation.BlendGroup" />.
            </summary>
      <param name="timeline">The timeline to add to the <see cref="T:DigitalRune.Animation.BlendGroup" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeline" /> is <see langword="null" />. The <see cref="T:DigitalRune.Animation.BlendGroup" /> does 
            not allow <see langword="null" /> values.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.Add(DigitalRune.Animation.ITimeline,System.Single)">
      <summary>
            Adds a timeline with the specified blend weight to the <see cref="T:DigitalRune.Animation.BlendGroup" />.
            </summary>
      <param name="timeline">The timeline to add to the <see cref="T:DigitalRune.Animation.BlendGroup" />.</param>
      <param name="weight">The blend weight of the timeline.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeline" /> is <see langword="null" />. The <see cref="T:DigitalRune.Animation.BlendGroup" /> does 
            not allow <see langword="null" /> values.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="weight" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.Clear">
      <summary>
            Removes all timelines from the <see cref="T:DigitalRune.Animation.BlendGroup" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.Contains(DigitalRune.Animation.ITimeline)">
      <summary>
            Determines whether the <see cref="T:DigitalRune.Animation.BlendGroup" /> contains a specific timeline.
            </summary>
      <param name="timeline">The timeline to locate in the <see cref="T:DigitalRune.Animation.BlendGroup" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="timeline" /> is found in the 
            <see cref="T:DigitalRune.Animation.BlendGroup" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Animation.BlendGroup.Count">
      <summary>
            Gets the number of timelines contained in the <see cref="T:DigitalRune.Animation.BlendGroup" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.CreateInstance">
      <summary>
            Creates an animation instance that can be used to play back the animation. 
            (For internal use only.)
            </summary>
      <returns>
            An <see cref="T:DigitalRune.Animation.AnimationInstance" /> that can be used to play back the animation.
            </returns>
    </member>
    <member name="P:DigitalRune.Animation.BlendGroup.Delay">
      <summary>
            Gets or sets the time at which the animation begins.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.DigitalRune#Animation#IAnimatableObject#GetAnimatableProperty``1(System.String)">
      <summary>
            Gets the property with given name and type which can be animated.
            </summary>
      <param name="name">The name of the property.</param>
      <typeparam name="T">The type of the property.</typeparam>
      <returns>
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty" /> that has the given name and type; otherwise, 
            <see langword="null" /> if the object does not have an property with this name or type.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.DigitalRune#Animation#IAnimatableObject#GetAnimatedProperties">
      <summary>
            Gets the properties which are currently being animated.
            </summary>
      <returns>
            The properties which are currently being animated.
            </returns>
    </member>
    <member name="P:DigitalRune.Animation.BlendGroup.DigitalRune#INamedObject#Name">
      <summary>
            Not implemented.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.BlendGroup.Duration">
      <summary>
            Gets or sets the duration for which the animation is played.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.BlendGroup.FillBehavior">
      <summary>
            Gets or sets a value that specifies how the animation behaves when it reaches the end of its 
            duration.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.GetAnimationTime(System.TimeSpan)">
      <summary>
            Gets the animation time for the specified time on the timeline.
            </summary>
      <param name="time">The time on the timeline.</param>
      <returns>
            The animation time. (The return value is <see langword="null" /> if the animation is not 
            active at <paramref name="time" />.)
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Animation.BlendGroup" />. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for <see cref="T:DigitalRune.Animation.BlendGroup" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.GetState(System.TimeSpan)">
      <summary>
            Gets the state of the animation for the specified time on the timeline.
            </summary>
      <param name="time">The time on the timeline.</param>
      <returns>The state of the animation.</returns>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.GetTotalDuration">
      <summary>
            Gets the total length of the timeline.
            </summary>
      <returns>The total length of the timeline.</returns>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.GetWeight(DigitalRune.Animation.ITimeline)">
      <summary>
            Gets the blend weight of the specified timeline.
            </summary>
      <param name="timeline">The timeline.</param>
      <returns>The blend weight of the timeline.</returns>
      <exception cref="T:System.ArgumentException">
            The <see cref="T:DigitalRune.Animation.BlendGroup" /> does not contain the specified timeline.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.GetWeight(System.Int32)">
      <summary>
            Gets the blend weight of the timeline with the specified index.
            </summary>
      <param name="index">The index of the timeline in the <see cref="T:DigitalRune.Animation.BlendGroup" />.</param>
      <returns>The blend weight of the timeline.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or equal to or greater than <see cref="P:DigitalRune.Animation.BlendGroup.Count" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.GetWeightAsAnimatable(DigitalRune.Animation.ITimeline)">
      <summary>
            Gets the blend weight of the specified timeline as an <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="timeline">The timeline.</param>
      <returns>
            The blend weight of the timeline as an <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </returns>
      <exception cref="T:System.ArgumentException">
            The <see cref="T:DigitalRune.Animation.BlendGroup" /> does not contain the specified timeline.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.GetWeightAsAnimatable(System.Int32)">
      <summary>
            Gets the blend weight of the timeline with the specified index as an 
            <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="index">The index of the timeline in the <see cref="T:DigitalRune.Animation.BlendGroup" />.</param>
      <returns>
            The blend weight of the timeline as an <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or equal to or greater than <see cref="P:DigitalRune.Animation.BlendGroup.Count" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.IndexOf(DigitalRune.Animation.ITimeline)">
      <summary>
            Determines the index of a specific timeline in the <see cref="T:DigitalRune.Animation.BlendGroup" />.
            </summary>
      <param name="timeline">The timeline to locate in the <see cref="T:DigitalRune.Animation.BlendGroup" />.</param>
      <returns>
            The index of <paramref name="timeline" /> if found in the <see cref="T:DigitalRune.Animation.BlendGroup" />; 
            otherwise, -1.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.Insert(System.Int32,DigitalRune.Animation.ITimeline)">
      <summary>
            Inserts a timeline into the <see cref="T:DigitalRune.Animation.BlendGroup" /> at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="timeline" /> should be inserted.
            </param>
      <param name="timeline">
            The timeline to insert into the <see cref="T:DigitalRune.Animation.BlendGroup" />.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:DigitalRune.Animation.BlendGroup" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeline" /> is <see langword="null" />. The <see cref="T:DigitalRune.Animation.BlendGroup" /> does 
            not allow <see langword="null" /> values.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.BlendGroup.Item(System.Int32)">
      <summary>
            Gets or sets the timeline at the specified index.
            </summary>
      <param name="index">The zero-based index of the timeline to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or equal to or greater than <see cref="P:DigitalRune.Animation.BlendGroup.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />. The <see cref="T:DigitalRune.Animation.BlendGroup" /> does not
            allow <see langword="null" /> values.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.BlendGroup.LoopBehavior">
      <summary>
            Gets or sets the behavior of the animations past the end of the duration.
            </summary>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is set to <see cref="F:DigitalRune.Animation.LoopBehavior.CycleOffset" />. This 
            loop behavior is not supported by a <see cref="T:DigitalRune.Animation.BlendGroup" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.Remove(DigitalRune.Animation.ITimeline)">
      <summary>
            Removes the first occurrence of a specific timeline from the <see cref="T:DigitalRune.Animation.BlendGroup" />.
            </summary>
      <param name="timeline">The timeline to remove from the <see cref="T:DigitalRune.Animation.BlendGroup" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="timeline" /> was successfully removed from the 
            <see cref="T:DigitalRune.Animation.BlendGroup" />; otherwise, <see langword="false" />. This method also returns 
            <see langword="false" /> if <paramref name="timeline" /> is not found in the original 
            <see cref="T:DigitalRune.Animation.BlendGroup" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.RemoveAt(System.Int32)">
      <summary>
            Removes the timeline at the specified index from the <see cref="T:DigitalRune.Animation.BlendGroup" />.
            </summary>
      <param name="index">The zero-based index of the timeline to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:DigitalRune.Animation.BlendGroup" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.SetWeight(DigitalRune.Animation.ITimeline,System.Single)">
      <summary>
            Sets the blend weight of the specified timeline.
            </summary>
      <param name="timeline">The timeline.</param>
      <param name="weight">The blend weight of the timeline.</param>
      <exception cref="T:System.ArgumentException">
            The <see cref="T:DigitalRune.Animation.BlendGroup" /> does not contain the specified timeline.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="weight" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.SetWeight(System.Int32,System.Single)">
      <summary>
            Sets the blend weight of the timeline at the specified index.
            </summary>
      <param name="index">The index of the timeline in the <see cref="T:DigitalRune.Animation.BlendGroup" />.</param>
      <param name="weight">The blend weight of the timeline.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or equal to or greater than <see cref="P:DigitalRune.Animation.BlendGroup.Count" />. Or,
            <paramref name="weight" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.BlendGroup.Speed">
      <summary>
            Gets or sets the speed ratio at which the animation is played.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or not a finite value.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.BlendGroup.SynchronizedDuration">
      <summary>
            Gets the duration of a single cycle of the blended animations.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.SynchronizeDurations">
      <summary>
            Synchronizes the durations of the animations in the blend group.
            </summary>
      <exception cref="T:DigitalRune.Animation.InvalidAnimationException">
            The sum of the blend weights in the blend group is 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.System#Collections#Generic#ICollection{DigitalRune#Animation#ITimeline}#CopyTo(DigitalRune.Animation.ITimeline[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:DigitalRune.Animation.BlendGroup" /> to an <see cref="T:System.Array" />, starting 
            at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from 
            <see cref="T:DigitalRune.Animation.BlendGroup" />. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
      <param name="arrayIndex">
            The zero-based index in <paramref name="array" /> at which copying begins.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional. Or <paramref name="arrayIndex" /> is equal to 
            or greater than the length of <paramref name="array" />. Or the number of elements in the 
            source <see cref="T:DigitalRune.Animation.BlendGroup" /> is greater than the available space from 
            <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.BlendGroup.System#Collections#Generic#ICollection{DigitalRune#Animation#ITimeline}#IsReadOnly">
      <summary>
            Gets a value indicating whether this collection is read-only.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.System#Collections#Generic#IEnumerable{DigitalRune#Animation#ITimeline}#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.BlendGroup.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="P:DigitalRune.Animation.BlendGroup.TargetObject">
      <summary>
            Gets or sets the object to which the animation is applied by default.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.ColorAnimation">
      <summary>
            Animates a <see cref="T:Microsoft.Xna.Framework.Color" /> value by applying an animation to each component of the color.
            (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.ColorAnimation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.ColorAnimation" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.ColorAnimation.#ctor(DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.ColorAnimation" /> class with the specified
            animations.
            </summary>
      <param name="r">The animation of the <strong>Red</strong> component.</param>
      <param name="g">The animation of the <strong>Green</strong> component.</param>
      <param name="b">The animation of the <strong>Blue</strong> component.</param>
      <param name="a">The animation of the <strong>Alpha</strong> component.</param>
    </member>
    <member name="P:DigitalRune.Animation.ColorAnimation.A">
      <summary>
            Gets or sets the animation of the <strong>Alpha</strong> component.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.ColorAnimation.B">
      <summary>
            Gets or sets the animation of the <strong>Blue</strong> component.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.ColorAnimation.G">
      <summary>
            Gets or sets the animation of the <strong>Green</strong> component.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.ColorAnimation.GetTotalDuration">
      <summary>
            Gets the total length of the timeline.
            </summary>
      <returns>The total length of the timeline.</returns>
    </member>
    <member name="M:DigitalRune.Animation.ColorAnimation.GetValueCore(System.TimeSpan,Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@)">
      <summary>
            Evaluates the animation function at the specified animation time.
            </summary>
      <param name="time">The animation time.</param>
      <param name="defaultSource">
            In: The source value that should be used by the animation if the animation does not have its 
            own source value.
            </param>
      <param name="defaultTarget">
            In: The target value that should be used by the animation if the animation does not have its 
            own target value.
            </param>
      <param name="result">
            Out: The value of the animation at the given time.
            </param>
    </member>
    <member name="P:DigitalRune.Animation.ColorAnimation.R">
      <summary>
            Gets or sets the animation of the <strong>Red</strong> component.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.ColorAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.ColorFromToByAnimation">
      <summary>
            Animates a <see langword="Color" /> value from/to/by a certain value.
            (Only available in the XNA-compatible build.)
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.ColorFromToByAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.ColorFromToByAnimation" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.ColorFromToByAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.ColorKeyFrameAnimation">
      <summary>
            Animates a <see cref="T:Microsoft.Xna.Framework.Color" /> value using key frames.
            (Only available in the XNA-compatible build.)
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.ColorKeyFrameAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.ColorKeyFrameAnimation" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.ColorKeyFrameAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Curve2FAnimation">
      <summary>
            Animates a <see cref="T:System.Single" /> value using a predefined animation curve.
            </summary>
      <typeparam name="TValue">
            The type of the animation value.
            </typeparam>
      <typeparam name="TPoint">
            The type of the curve points, such as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />, <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />, etc.
            </typeparam>
      <typeparam name="TCurveKey">
            The type of the curve key. (A type derived from <see cref="T:DigitalRune.Mathematics.Interpolation.CurveKey`2" />.)
            </typeparam>
      <typeparam name="TCurve">
            The type of the curve. (A type derived from 
            <see cref="T:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3" />.)
            </typeparam>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.Curve2FAnimation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Curve2FAnimation" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Curve2FAnimation.#ctor(DigitalRune.Mathematics.Interpolation.Curve2F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Curve2FAnimation" /> class with the given curve.
            </summary>
      <param name="curve">The curve.</param>
    </member>
    <member name="M:DigitalRune.Animation.Curve2FAnimation.GetValueFromPoint(DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Gets the animation value from a given point on the curve.
            </summary>
      <param name="point">The point on the curve.</param>
      <returns>The animation value.</returns>
    </member>
    <member name="P:DigitalRune.Animation.Curve2FAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.DelegateAnimatableProperty`1">
      <summary>
            Wraps an existing field or property and makes it animatable.
            </summary>
      <typeparam name="T">The type of the property.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.DelegateAnimatableProperty`1.#ctor(System.Func{`0},System.Action{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.DelegateAnimatableProperty`1" /> class.
            </summary>
      <param name="getter">A callback that reads the property value.</param>
      <param name="setter">A callback that writes the property value.</param>
    </member>
    <member name="P:DigitalRune.Animation.DelegateAnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty#AnimationValue">
      <summary>
            Gets the animation value.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.DelegateAnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty#BaseValue">
      <summary>
            Not implemented.
            </summary>
      <exception cref="T:System.NotImplementedException">
            Always throws <see cref="T:System.NotImplementedException" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.DelegateAnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty#HasBaseValue">
      <summary>
            Gets a value indicating whether this property has a base value.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.DelegateAnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty#IsAnimated">
      <summary>
            Gets or sets a value indicating whether this property is animated by the animation system.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.DelegateAnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty{T}#AnimationValue">
      <summary>
            Gets or sets the animation value.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.DelegateAnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty{T}#BaseValue">
      <summary>
            Not implemented.
            </summary>
      <exception cref="T:System.NotImplementedException">
            Always throws <see cref="T:System.NotImplementedException" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.DelegateAnimatableProperty`1.GetValue">
      <summary>
            Gets or sets the callback that reads the property value.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.DelegateAnimatableProperty`1.SetValue">
      <summary>
            Gets or sets the callback that writes the property value.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.FillBehavior">
      <summary>
            Defines the behavior of an animation when its duration is exceeded.
            </summary>
    </member>
    <member name="F:DigitalRune.Animation.FillBehavior.Hold">
      <summary>
            When the animation reaches the end of its duration it holds its last animation value until
            it is stopped or reset. (In some animation systems this behavior is also called 'Freeze'.) 
            </summary>
    </member>
    <member name="F:DigitalRune.Animation.FillBehavior.Stop">
      <summary>
            The animation is stopped when it reaches the end of its duration. (In some animation systems
            this behavior is called 'Remove'.)
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.FromToByAnimation`1">
      <summary>
            Animates a value from/to/by a certain value. (Base implementation.)
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.FromToByAnimation`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.FromToByAnimation`1" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.FromToByAnimation`1.By">
      <summary>
            Gets or sets the final value of the animation relative to the start value.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.FromToByAnimation`1.Duration">
      <summary>
            Gets or sets the duration of the interpolation.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.FromToByAnimation`1.EasingFunction">
      <summary>
            Gets or sets the easing function that controls the pace of the interpolation.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.FromToByAnimation`1.From">
      <summary>
            Gets or sets the start value of the animation.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.FromToByAnimation`1.GetTotalDuration">
      <summary>
            Gets the total length of the timeline.
            </summary>
      <returns>The total length of the timeline.</returns>
    </member>
    <member name="M:DigitalRune.Animation.FromToByAnimation`1.GetValueCore(System.TimeSpan,`0@,`0@,`0@)">
      <summary>
            Evaluates the animation function at the specified animation time.
            </summary>
      <param name="time">The animation time.</param>
      <param name="defaultSource">
            In: The source value that should be used by the animation if the animation does not have its 
            own source value.
            </param>
      <param name="defaultTarget">
            In: The target value that should be used by the animation if the animation does not have its 
            own target value.
            </param>
      <param name="result">
            Out: The value of the animation at the given time.
            </param>
    </member>
    <member name="P:DigitalRune.Animation.FromToByAnimation`1.To">
      <summary>
            Gets or sets the final value of the animation.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.IAnimation">
      <summary>
            Defines the change of a value over time.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.IAnimation.CreateBlendAnimation">
      <summary>
            Creates a new <see cref="T:DigitalRune.Animation.BlendAnimation`1" />. (For internal use only.)
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Animation.BlendAnimation`1" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Animation.IAnimation.TargetProperty">
      <summary>
            Gets the property to which the animation is applied by default.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.IAnimation`1">
      <summary>
            Defines the change of a value over time.
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.IAnimation`1.GetValue(System.TimeSpan,`0@,`0@,`0@)">
      <summary>
            Gets the value of the animation at the specified time.
            </summary>
      <param name="time">The time value on the timeline.</param>
      <param name="defaultSource">
            In: The source value that should be used by the animation if the animation does not have its 
            own source value.
            </param>
      <param name="defaultTarget">
            In: The target value that should be used by the animation if the animation does not have its 
            own target value.
            </param>
      <param name="result">
            Out: The value of the animation at the given time. (The animation returns 
            <paramref name="defaultSource" /> if the animation is <see cref="F:DigitalRune.Animation.AnimationState.Delayed" /> 
            or <see cref="F:DigitalRune.Animation.AnimationState.Stopped" /> at <paramref name="time" />.)
            </param>
    </member>
    <member name="P:DigitalRune.Animation.IAnimation`1.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.IAnimationService">
      <summary>
            Exposes the functionality of the animation system.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.IAnimationService.CreateController(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableObject)">
      <summary>
            Creates a new animation controller which can be used to apply the given animation to the
            specified object.
            </summary>
      <param name="animation">The animation.</param>
      <param name="targetObject">The target object that should be animated.</param>
      <param name="targetObjects">The target objects that should be animated.</param>
      <returns>The <see cref="T:DigitalRune.Animation.AnimationController" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetObject" /> or <paramref name="animation" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.IAnimationService.CreateController(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableProperty)">
      <summary>
            Creates a new animation controller which can be used to apply the given animation to the
            specified property.
            </summary>
      <param name="animation">The animation.</param>
      <param name="targetProperty">The target property that should be animated.</param>
      <param name="targetObjects">The target objects that should be animated.</param>
      <returns>The <see cref="T:DigitalRune.Animation.AnimationController" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetProperty" /> or <paramref name="animation" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.IAnimationService.CreateController(DigitalRune.Animation.ITimeline,System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})">
      <summary>
            Creates a new animation controller which can be used to apply the given animation to the
            specified objects.
            </summary>
      <param name="animation">The animation.</param>
      <param name="targetObjects">The target objects that should be animated.</param>
      <returns>The <see cref="T:DigitalRune.Animation.AnimationController" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetObjects" /> or <paramref name="animation" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.IAnimationService.IsAnimated(DigitalRune.Animation.IAnimatableObject)">
      <summary>
            Determines whether the specified object is controlled by one or more animations.
            </summary>
      <param name="animatableObject">The object.</param>
      <returns>
        <see langword="true" /> if <paramref name="animatableObject" /> is animated; otherwise, 
            <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="animatableObject" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.IAnimationService.IsAnimated(DigitalRune.Animation.IAnimatableProperty)">
      <summary>
            Determines whether the specified property is controlled by one or more animations.
            </summary>
      <param name="animatableProperty">The property.</param>
      <returns>
        <see langword="true" /> if <paramref name="animatableProperty" /> is animated; otherwise, 
            <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="animatableProperty" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.IAnimationService.StartAnimation(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableObject)">
      <summary>
            Starts an animation and applies it to the specified object.
            </summary>
      <param name="animation">The animation.</param>
      <param name="targetObject">The target object that should be animated.</param>
      <param name="targetObjects">The target objects that should be animated.</param>
      <returns>The <see cref="T:DigitalRune.Animation.AnimationController" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetObject" /> or <paramref name="animation" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.IAnimationService.StartAnimation(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableObject,DigitalRune.Animation.Transitions.AnimationTransition)">
      <summary>
            Starts an animation using a given transition and applies it to the specified object.
            </summary>
      <param name="animation">The animation.</param>
      <param name="targetObject">The target object that should be animated.</param>
      <param name="transition">
            The transition that determines how the new animation is applied. The class 
            <see cref="T:DigitalRune.Animation.AnimationTransitions" /> provides a set of predefined animation transitions.
            </param>
      <param name="targetObjects">The target objects that should be animated.</param>
      <returns>The <see cref="T:DigitalRune.Animation.AnimationController" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetObject" /> or <paramref name="animation" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.IAnimationService.StartAnimation(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableProperty)">
      <summary>
            Starts an animation and applies it to the specified property.
            </summary>
      <param name="animation">The animation.</param>
      <param name="targetProperty">The target property that should be animated.</param>
      <param name="targetObjects">The target objects that should be animated.</param>
      <returns>The <see cref="T:DigitalRune.Animation.AnimationController" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetProperty" /> or <paramref name="animation" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.IAnimationService.StartAnimation(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableProperty,DigitalRune.Animation.Transitions.AnimationTransition)">
      <summary>
            Starts an animation using a given transition and applies it to the specified property.
            </summary>
      <param name="animation">The animation.</param>
      <param name="targetProperty">The target property that should be animated.</param>
      <param name="transition">
            The transition that determines how the new animation is applied. The class 
            <see cref="T:DigitalRune.Animation.AnimationTransitions" /> provides a set of predefined animation transitions.
            </param>
      <param name="targetObjects">The target objects that should be animated.</param>
      <returns>The <see cref="T:DigitalRune.Animation.AnimationController" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetProperty" /> or <paramref name="animation" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.IAnimationService.StartAnimation(DigitalRune.Animation.ITimeline,System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})">
      <summary>
            Starts an animation and applies it to the specified objects.
            </summary>
      <param name="animation">The animation.</param>
      <param name="targetObjects">The target objects that should be animated.</param>
      <returns>The <see cref="T:DigitalRune.Animation.AnimationController" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetObjects" /> or <paramref name="animation" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.IAnimationService.StartAnimation(DigitalRune.Animation.ITimeline,System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject},DigitalRune.Animation.Transitions.AnimationTransition)">
      <summary>
            Starts an animation using a given transition and applies it to the specified objects.
            </summary>
      <param name="animation">The animation.</param>
      <param name="targetObjects">The target objects that should be animated.</param>
      <param name="transition">
            The transition that determines how the new animation is applied. The class 
            <see cref="T:DigitalRune.Animation.AnimationTransitions" /> provides a set of predefined animation transitions.
            </param>
      <returns>The <see cref="T:DigitalRune.Animation.AnimationController" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetObjects" /> or <paramref name="animation" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.IAnimationService.StopAnimation(DigitalRune.Animation.IAnimatableObject)">
      <summary>
            Stops all animations affecting the specified object.
            </summary>
      <param name="animatedObject">The animated object.</param>
    </member>
    <member name="M:DigitalRune.Animation.IAnimationService.StopAnimation(DigitalRune.Animation.IAnimatableProperty)">
      <summary>
            Stops all animations affecting the specified property.
            </summary>
      <param name="animatedProperty">The animated property.</param>
    </member>
    <member name="M:DigitalRune.Animation.IAnimationService.StopAnimation(System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})">
      <summary>
            Stops all animations affecting the specified objects.
            </summary>
      <param name="animatedObjects">The animated objects.</param>
    </member>
    <member name="M:DigitalRune.Animation.IAnimationService.UpdateAndApplyAnimation(DigitalRune.Animation.IAnimatableObject)">
      <summary>
            Immediately evaluates the animations the given object and applies the new animation values.
            </summary>
      <param name="animatedObject">The animated object.</param>
      <param name="animatedObjects">The animated objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="animatedObjects" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.IAnimationService.UpdateAndApplyAnimation(DigitalRune.Animation.IAnimatableProperty)">
      <summary>
            Immediately evaluates the animation composition chains of the given property and applies
            the new animation values.
            </summary>
      <param name="property">The property that needs to be updated.</param>
      <param name="animatedObjects">The animated objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="animatedObjects" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.IAnimationService.UpdateAndApplyAnimation(System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})">
      <summary>
            Immediately evaluates the animations of the given objects and applies the new animation 
            values.
            </summary>
      <param name="animatedObjects">The animated objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="animatedObjects" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Animation.IKeyFrame`1">
      <summary>
            Defines the value of an animation at a certain point in time.
            </summary>
      <typeparam name="T">The type of the value stored in the key frame.</typeparam>
    </member>
    <member name="P:DigitalRune.Animation.IKeyFrame`1.Time">
      <summary>
            Gets the time offset from the start of the animation to the key frame.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.IKeyFrame`1.Value">
      <summary>
            Gets the animation value of the key frame.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.InvalidAnimationException">
      <summary>
            Occurs when an animation encounters an invalid state.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.InvalidAnimationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.InvalidAnimationException" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.InvalidAnimationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.InvalidAnimationException" /> class with 
            serialized data.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the 
            exception being thrown.
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or 
            destination.
            </param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is <see langword="null" />.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.InvalidAnimationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.InvalidAnimationException" /> class with a 
            specified error message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:DigitalRune.Animation.InvalidAnimationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.InvalidAnimationException" /> class with a specified 
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">
            The exception that is the cause of the current exception, or <see langword="null" /> if no 
            inner exception is specified.
            </param>
    </member>
    <member name="T:DigitalRune.Animation.ITimeline">
      <summary>
            Positions an animation along a timeline.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.ITimeline.CreateInstance">
      <summary>
            Creates an animation instance that can be used to play back the animation. 
            (For internal use only.)
            </summary>
      <returns>
            An <see cref="T:DigitalRune.Animation.AnimationInstance" /> that can be used to play back the animation.
            </returns>
    </member>
    <member name="P:DigitalRune.Animation.ITimeline.FillBehavior">
      <summary>
            Gets a value that specifies how the animation behaves when it reaches the end of its 
            duration.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.ITimeline.GetAnimationTime(System.TimeSpan)">
      <summary>
            Gets the animation time for the specified time on the timeline.
            </summary>
      <param name="time">The time on the timeline.</param>
      <returns>
            The animation time. (The return value is <see langword="null" /> if the animation is not 
            active at <paramref name="time" />.)
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.ITimeline.GetState(System.TimeSpan)">
      <summary>
            Gets the state of the animation for the specified time on the timeline.
            </summary>
      <param name="time">The time on the timeline.</param>
      <returns>The state of the animation.</returns>
    </member>
    <member name="M:DigitalRune.Animation.ITimeline.GetTotalDuration">
      <summary>
            Gets the total length of the timeline.
            </summary>
      <returns>The total length of the timeline.</returns>
    </member>
    <member name="P:DigitalRune.Animation.ITimeline.TargetObject">
      <summary>
            Gets the object to which the animation is applied by default.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.KeyFrame`1">
      <summary>
            Defines the value of an animation at a certain point in time.
            </summary>
      <typeparam name="T">The type of the value stored in the key frame.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.KeyFrame`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.KeyFrame`1" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.KeyFrame`1.#ctor(System.TimeSpan,`0)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.KeyFrame`1" /> class with the given time and
            value.
            </summary>
      <param name="time">The time value of the key frame.</param>
      <param name="value">The animation value of the key frame.</param>
    </member>
    <member name="P:DigitalRune.Animation.KeyFrame`1.Time">
      <summary>
            Gets or sets the time offset from the start of the animation to this key frame.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.KeyFrame`1.Value">
      <summary>
            Gets or sets the animation value for this key frame.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.KeyFrameAnimation`1">
      <summary>
            Animates a value based on predefined key frames. (Base implementation.)
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.KeyFrameAnimation`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.KeyFrameAnimation`1" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.KeyFrameAnimation`1.EnableInterpolation">
      <summary>
            Gets or sets a value indicating whether values between key frames are interpolated.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.KeyFrameAnimation`1.GetTotalDuration">
      <summary>
            Gets the total length of the timeline.
            </summary>
      <returns>The total length of the timeline.</returns>
    </member>
    <member name="M:DigitalRune.Animation.KeyFrameAnimation`1.GetValueCore(System.TimeSpan,`0@,`0@,`0@)">
      <summary>
            Evaluates the animation function at the specified animation time.
            </summary>
      <param name="time">The animation time.</param>
      <param name="defaultSource">
            In: The source value that should be used by the animation if the animation does not have its 
            own source value.
            </param>
      <param name="defaultTarget">
            In: The target value that should be used by the animation if the animation does not have its 
            own target value.
            </param>
      <param name="result">
            Out: The value of the animation at the given time.
            </param>
    </member>
    <member name="P:DigitalRune.Animation.KeyFrameAnimation`1.KeyFrames">
      <summary>
            Gets the collection of key frames.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.KeyFrameCollection`1">
      <summary>
            Manages a collection of key frames.
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.KeyFrameCollection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.KeyFrameCollection`1" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.KeyFrameCollection`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Animation.KeyFrameCollection`1" />. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for <see cref="T:DigitalRune.Animation.KeyFrameCollection`1" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.KeyFrameCollection`1.Sort">
      <summary>
            Sorts the key frames in the collection by their time value.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.LoopBehavior">
      <summary>
            Defines the behavior of an animation when it is repeated.
            </summary>
    </member>
    <member name="F:DigitalRune.Animation.LoopBehavior.Constant">
      <summary>
            The animation value is constant. The animation repeats the nearest valid animation value
            (the start value if time &lt; start time, or the end value of the animation if time &gt;
            end time).
            </summary>
    </member>
    <member name="F:DigitalRune.Animation.LoopBehavior.Cycle">
      <summary>
            The animation will be repeated if the time value goes past the end of the animation. (Note
            that the start and end value of cyclic animations needs to be identical to have smooth 
            transitions between iterations.)
            </summary>
    </member>
    <member name="F:DigitalRune.Animation.LoopBehavior.CycleOffset">
      <summary>
            The animation will be repeated if the time value goes past the end animation. Additionally, 
            the animation values of the next cycle will be offset by the difference between the end 
            value and start value of the animation to enable smooth transitions between iterations.
            (This behavior can be used to achieve cyclic animations that accumulate the animation values 
            from one iteration to the next time.)
            </summary>
    </member>
    <member name="F:DigitalRune.Animation.LoopBehavior.Oscillate">
      <summary>
            The animation will be automatically reversed and repeated. (This behavior is also known as
            'auto-reverse' or 'ping-pong'.)
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Path2FAnimation">
      <summary>
            Animates a point in 2D space that follows a predefined path.
            </summary>
      <typeparam name="TPoint">
            The type of the path points, such as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />, <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />, etc.
            </typeparam>
      <typeparam name="TPathKey">
            The type of the path key. (A type derived from <see cref="T:DigitalRune.Mathematics.Interpolation.CurveKey`2" />.)
            </typeparam>
      <typeparam name="TPath">
            The type of the path. (A type derived from 
            <see cref="T:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3" />.)
            </typeparam>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.Path2FAnimation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Path2FAnimation" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Path2FAnimation.#ctor(DigitalRune.Mathematics.Interpolation.Path2F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Path2FAnimation" /> class with the given path.
            </summary>
      <param name="path">The 2D path.</param>
    </member>
    <member name="P:DigitalRune.Animation.Path2FAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Path3FAnimation">
      <summary>
            Animates a point in 3D space that follows a predefined path.
            </summary>
      <typeparam name="TPoint">
            The type of the path points, such as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />, <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />, etc.
            </typeparam>
      <typeparam name="TPathKey">
            The type of the path key. (A type derived from <see cref="T:DigitalRune.Mathematics.Interpolation.CurveKey`2" />.)
            </typeparam>
      <typeparam name="TPath">
            The type of the path. (A type derived from 
            <see cref="T:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3" />.)
            </typeparam>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.Path3FAnimation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Path3FAnimation" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Path3FAnimation.#ctor(DigitalRune.Mathematics.Interpolation.Path3F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Path3FAnimation" /> class with the given path.
            </summary>
      <param name="path">The 3D path.</param>
    </member>
    <member name="P:DigitalRune.Animation.Path3FAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.PathAnimation`3">
      <summary>
            Animates a point that follows a predefined path. (Base implementation.)
            </summary>
      <typeparam name="TPoint">
            The type of the path points, such as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />, <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />, etc.
            </typeparam>
      <typeparam name="TPathKey">
            The type of the path key. (A type derived from <see cref="T:DigitalRune.Mathematics.Interpolation.CurveKey`2" />.)
            </typeparam>
      <typeparam name="TPath">
            The type of the path. (A type derived from 
            <see cref="T:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3" />.)
            </typeparam>
    </member>
    <member name="M:DigitalRune.Animation.PathAnimation`3.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.PathAnimation`3" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.PathAnimation`3.EndParameter">
      <summary>
            Gets or sets the end parameter.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.PathAnimation`3.GetTotalDuration">
      <summary>
            Gets the total length of the timeline.
            </summary>
      <returns>The total length of the timeline.</returns>
    </member>
    <member name="M:DigitalRune.Animation.PathAnimation`3.GetValueCore(System.TimeSpan,`0@,`0@,`0@)">
      <summary>
            Evaluates the animation function at the specified animation time.
            </summary>
      <param name="time">The animation time.</param>
      <param name="defaultSource">
            In: The source value that should be used by the animation if the animation does not have its 
            own source value.
            </param>
      <param name="defaultTarget">
            In: The target value that should be used by the animation if the animation does not have its 
            own target value.
            </param>
      <param name="result">
            Out: The value of the animation at the given time.
            </param>
    </member>
    <member name="P:DigitalRune.Animation.PathAnimation`3.Path">
      <summary>
            Gets or sets the animation path.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.PathAnimation`3.ReturnsTangent">
      <summary>
            Gets or sets a value indicating whether the animation returns the tangent or the point on 
            the path.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.PathAnimation`3.StartParameter">
      <summary>
            Gets or sets the start parameter.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.QuaternionAnimation">
      <summary>
            Animates a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> value by applying an animation to each component of the
            quaternion. (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.QuaternionAnimation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.QuaternionAnimation" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.QuaternionAnimation.#ctor(DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.QuaternionAnimation" /> class with the 
            specified animations.
            </summary>
      <param name="x">The animation of the <strong>X</strong> component.</param>
      <param name="y">The animation of the <strong>Y</strong> component.</param>
      <param name="z">The animation of the <strong>Z</strong> component.</param>
      <param name="w">The animation of the <strong>W</strong> component.</param>
    </member>
    <member name="M:DigitalRune.Animation.QuaternionAnimation.GetTotalDuration">
      <summary>
            Gets the total length of the timeline.
            </summary>
      <returns>The total length of the timeline.</returns>
    </member>
    <member name="M:DigitalRune.Animation.QuaternionAnimation.GetValueCore(System.TimeSpan,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>
            Evaluates the animation function at the specified animation time.
            </summary>
      <param name="time">The animation time.</param>
      <param name="defaultSource">
            In: The source value that should be used by the animation if the animation does not have its 
            own source value.
            </param>
      <param name="defaultTarget">
            In: The target value that should be used by the animation if the animation does not have its 
            own target value.
            </param>
      <param name="result">
            Out: The value of the animation at the given time.
            </param>
    </member>
    <member name="P:DigitalRune.Animation.QuaternionAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.QuaternionAnimation.W">
      <summary>
            Gets or sets the animation of the <strong>W</strong> component.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.QuaternionAnimation.X">
      <summary>
            Gets or sets the animation of the <strong>X</strong> component.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.QuaternionAnimation.Y">
      <summary>
            Gets or sets the animation of the <strong>Y</strong> component.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.QuaternionAnimation.Z">
      <summary>
            Gets or sets the animation of the <strong>Z</strong> component.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.QuaternionFAnimation">
      <summary>
            Animates a <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" /> value by applying an animation to each component of the
            quaternion.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.QuaternionFAnimation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.QuaternionFAnimation" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.QuaternionFAnimation.#ctor(DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.QuaternionFAnimation" /> class with the 
            specified animations.
            </summary>
      <param name="w">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.QuaternionF.W" /> component.</param>
      <param name="x">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.QuaternionF.X" /> component.</param>
      <param name="y">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.QuaternionF.Y" /> component.</param>
      <param name="z">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.QuaternionF.Z" /> component.</param>
    </member>
    <member name="M:DigitalRune.Animation.QuaternionFAnimation.GetTotalDuration">
      <summary>
            Gets the total length of the timeline.
            </summary>
      <returns>The total length of the timeline.</returns>
    </member>
    <member name="M:DigitalRune.Animation.QuaternionFAnimation.GetValueCore(System.TimeSpan,DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@)">
      <summary>
            Evaluates the animation function at the specified animation time.
            </summary>
      <param name="time">The animation time.</param>
      <param name="defaultSource">
            In: The source value that should be used by the animation if the animation does not have its 
            own source value.
            </param>
      <param name="defaultTarget">
            In: The target value that should be used by the animation if the animation does not have its 
            own target value.
            </param>
      <param name="result">
            Out: The value of the animation at the given time.
            </param>
    </member>
    <member name="P:DigitalRune.Animation.QuaternionFAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.QuaternionFAnimation.W">
      <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.QuaternionF.W" /> component.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.QuaternionFAnimation.X">
      <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.QuaternionF.X" /> component.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.QuaternionFAnimation.Y">
      <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.QuaternionF.Y" /> component.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.QuaternionFAnimation.Z">
      <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.QuaternionF.Z" /> component.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.QuaternionFFromToByAnimation">
      <summary>
            Animates a <see langword="QuaternionF" /> value from/to/by a certain value.
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.QuaternionFFromToByAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.QuaternionFFromToByAnimation" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.QuaternionFFromToByAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.QuaternionFKeyFrameAnimation">
      <summary>
            Animates a <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" /> value using key frames.
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.QuaternionFKeyFrameAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.QuaternionFKeyFrameAnimation" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.QuaternionFKeyFrameAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.QuaternionFromToByAnimation">
      <summary>
            Animates a <see langword="Quaternion" /> value from/to/by a certain value.
            (Only available in the XNA-compatible build.)
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.QuaternionFromToByAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.QuaternionFromToByAnimation" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.QuaternionFromToByAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.QuaternionKeyFrameAnimation">
      <summary>
            Animates a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> value using key frames.
            (Only available in the XNA-compatible build.)
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.QuaternionKeyFrameAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.QuaternionKeyFrameAnimation" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.QuaternionKeyFrameAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.SingleFromToByAnimation">
      <summary>
            Animates a <see langword="Single" /> value from/to/by a certain value.
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.SingleFromToByAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.SingleFromToByAnimation" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.SingleFromToByAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.SingleKeyFrameAnimation">
      <summary>
            Animates a <see cref="T:System.Single" /> value using key frames.
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.SingleKeyFrameAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.SingleKeyFrameAnimation" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.SingleKeyFrameAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.SrtAnimation">
      <summary>
            Animates an <see cref="T:DigitalRune.Animation.Character.SrtTransform" /> by applying an animation to each component 
            (scale, rotate, translate) of the transform.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.SrtAnimation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.SrtAnimation" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.SrtAnimation.#ctor(DigitalRune.Animation.IAnimation{DigitalRune.Mathematics.Algebra.Vector3F},DigitalRune.Animation.IAnimation{DigitalRune.Mathematics.Algebra.QuaternionF},DigitalRune.Animation.IAnimation{DigitalRune.Mathematics.Algebra.Vector3F})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.SrtAnimation" /> class with the 
            specified animations.
            </summary>
      <param name="scale">The animation of the <see cref="F:DigitalRune.Animation.Character.SrtTransform.Scale" /> component.</param>
      <param name="rotation">The animation of the <see cref="F:DigitalRune.Animation.Character.SrtTransform.Rotation" /> component.</param>
      <param name="translation">The animation of the <see cref="F:DigitalRune.Animation.Character.SrtTransform.Translation" /> component.</param>
    </member>
    <member name="M:DigitalRune.Animation.SrtAnimation.GetTotalDuration">
      <summary>
            Gets the total length of the timeline.
            </summary>
      <returns>The total length of the timeline.</returns>
    </member>
    <member name="M:DigitalRune.Animation.SrtAnimation.GetValueCore(System.TimeSpan,DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@)">
      <summary>
            Evaluates the animation function at the specified animation time.
            </summary>
      <param name="time">The animation time.</param>
      <param name="defaultSource">
            In: The source value that should be used by the animation if the animation does not have its 
            own source value.
            </param>
      <param name="defaultTarget">
            In: The target value that should be used by the animation if the animation does not have its 
            own target value.
            </param>
      <param name="result">
            Out: The value of the animation at the given time.
            </param>
    </member>
    <member name="P:DigitalRune.Animation.SrtAnimation.Rotation">
      <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Animation.Character.SrtTransform.Rotation" /> value.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.SrtAnimation.Scale">
      <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Animation.Character.SrtTransform.Scale" /> value.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.SrtAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.SrtAnimation.Translation">
      <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Animation.Character.SrtTransform.Translation" /> value.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.SrtFromToByAnimation">
      <summary>
            Animates an <see langword="SrtTransform" /> from/to/by a certain value.
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.SrtFromToByAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.SrtFromToByAnimation" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.SrtFromToByAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.SrtKeyFrameAnimation">
      <summary>
            Animates an <see cref="T:DigitalRune.Animation.Character.SrtTransform" /> using key frames.
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.SrtKeyFrameAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.SrtKeyFrameAnimation" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.SrtKeyFrameAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.TimelineClip">
      <summary>
            Plays back a clip of another animation timeline.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.TimelineClip.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.TimelineClip" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.TimelineClip.#ctor(DigitalRune.Animation.ITimeline)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.TimelineClip" /> class for the given timeline.
            </summary>
      <param name="timeline">The timeline.</param>
    </member>
    <member name="P:DigitalRune.Animation.TimelineClip.ClipEnd">
      <summary>
            Gets or sets the end time of the animation clip.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.TimelineClip.ClipOffset">
      <summary>
            Gets the time offset that is applied to the selected animation clip.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.TimelineClip.ClipStart">
      <summary>
            Gets or sets the start time of the animation clip.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.TimelineClip.CreateInstance">
      <summary>
            Creates an animation instance that can be used to play back the animation. 
            (For internal use only.)
            </summary>
      <returns>
            An <see cref="T:DigitalRune.Animation.AnimationInstance" /> that can be used to play back the animation.
            </returns>
    </member>
    <member name="P:DigitalRune.Animation.TimelineClip.Delay">
      <summary>
            Gets or sets the time at which the animation clip begins.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.TimelineClip.Duration">
      <summary>
            Gets or sets the duration for which the animation clip is played.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.TimelineClip.FillBehavior">
      <summary>
            Gets or sets a value that specifies how the animation behaves when it reaches the end of its 
            duration.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.TimelineClip.GetAnimationTime(System.TimeSpan)">
      <summary>
            Gets the animation time for the specified time on the timeline.
            </summary>
      <param name="time">The time on the timeline.</param>
      <returns>
            The animation time. (The return value is <see langword="null" /> if the animation is not 
            active at <paramref name="time" />.)
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.TimelineClip.GetState(System.TimeSpan)">
      <summary>
            Gets the state of the animation for the specified time on the timeline.
            </summary>
      <param name="time">The time on the timeline.</param>
      <returns>The state of the animation.</returns>
    </member>
    <member name="M:DigitalRune.Animation.TimelineClip.GetTotalDuration">
      <summary>
            Gets the total length of the timeline.
            </summary>
      <returns>The total length of the timeline.</returns>
    </member>
    <member name="P:DigitalRune.Animation.TimelineClip.LoopBehavior">
      <summary>
            Gets or sets the behavior of the animation past the end of the animation clip.
            </summary>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is set to <see cref="F:DigitalRune.Animation.LoopBehavior.CycleOffset" />. This 
            loop behavior is not supported by a <see cref="T:DigitalRune.Animation.TimelineClip" />. (Check out 
            <see cref="T:DigitalRune.Animation.AnimationClip`1" /> instead.)
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.TimelineClip.Speed">
      <summary>
            Gets or sets the speed ratio at which the animation clip is played.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or not a finite value.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.TimelineClip.TargetObject">
      <summary>
            Gets or sets the object to which the animation is applied by default.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.TimelineClip.Timeline">
      <summary>
            Gets or sets the original animation timeline from which a clip is played back.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.TimelineGroup">
      <summary>
            Organizes a group of animations which can be played simultaneously.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.TimelineGroup.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.TimelineGroup" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.TimelineGroup.Add(DigitalRune.Animation.ITimeline)">
      <summary>
            Adds a timeline to the <see cref="T:DigitalRune.Animation.TimelineGroup" />.
            </summary>
      <param name="timeline">
            The timeline to add to the <see cref="T:DigitalRune.Animation.TimelineGroup" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeline" /> is <see langword="null" />. The <see cref="T:DigitalRune.Animation.TimelineGroup" /> does 
            not allow <see langword="null" /> values.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.TimelineGroup.Clear">
      <summary>
            Removes all timelines from the <see cref="T:DigitalRune.Animation.TimelineGroup" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.TimelineGroup.Contains(DigitalRune.Animation.ITimeline)">
      <summary>
            Determines whether the <see cref="T:DigitalRune.Animation.TimelineGroup" /> contains a specific timeline.
            </summary>
      <param name="timeline">The timeline to locate in the <see cref="T:DigitalRune.Animation.TimelineGroup" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="timeline" /> is found in the 
            <see cref="T:DigitalRune.Animation.TimelineGroup" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Animation.TimelineGroup.Count">
      <summary>
            Gets the number of timelines contained in the <see cref="T:DigitalRune.Animation.TimelineGroup" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.TimelineGroup.CreateInstance">
      <summary>
            Creates an animation instance that can be used to play back the animation. 
            (For internal use only.)
            </summary>
      <returns>
            An <see cref="T:DigitalRune.Animation.AnimationInstance" /> that can be used to play back the animation.
            </returns>
    </member>
    <member name="P:DigitalRune.Animation.TimelineGroup.FillBehavior">
      <summary>
            Gets or sets a value that specifies how the animation behaves when it reaches the end of its 
            duration.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.TimelineGroup.GetAnimationTime(System.TimeSpan)">
      <summary>
            Gets the animation time for the specified time on the timeline.
            </summary>
      <param name="time">The time on the timeline.</param>
      <returns>
            The animation time. (The return value is <see langword="null" /> if the animation is not 
            active at <paramref name="time" />.)
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.TimelineGroup.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Animation.TimelineGroup" />. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for <see cref="T:DigitalRune.Animation.TimelineGroup" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.TimelineGroup.GetState(System.TimeSpan)">
      <summary>
            Gets the state of the animation for the specified time on the timeline.
            </summary>
      <param name="time">The time on the timeline.</param>
      <returns>The state of the animation.</returns>
    </member>
    <member name="M:DigitalRune.Animation.TimelineGroup.GetTotalDuration">
      <summary>
            Gets the total length of the timeline.
            </summary>
      <returns>The total length of the timeline.</returns>
    </member>
    <member name="M:DigitalRune.Animation.TimelineGroup.IndexOf(DigitalRune.Animation.ITimeline)">
      <summary>
            Determines the index of a specific timeline in the <see cref="T:DigitalRune.Animation.TimelineGroup" />.
            </summary>
      <param name="timeline">The timeline to locate in the <see cref="T:DigitalRune.Animation.TimelineGroup" />.</param>
      <returns>
            The index of <paramref name="timeline" /> if found in the <see cref="T:DigitalRune.Animation.TimelineGroup" />; 
            otherwise, -1.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.TimelineGroup.Insert(System.Int32,DigitalRune.Animation.ITimeline)">
      <summary>
            Inserts a timeline into the <see cref="T:DigitalRune.Animation.TimelineGroup" /> at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="timeline" /> should be inserted.
            </param>
      <param name="timeline">
            The timeline to insert into the <see cref="T:DigitalRune.Animation.TimelineGroup" />.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:DigitalRune.Animation.TimelineGroup" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeline" /> is <see langword="null" />. The <see cref="T:DigitalRune.Animation.TimelineGroup" /> does 
            not allow <see langword="null" /> values.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.TimelineGroup.Item(System.Int32)">
      <summary>
            Gets or sets the timeline at the specified index.
            </summary>
      <param name="index">The zero-based index of the timeline to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or equal to or greater than <see cref="P:DigitalRune.Animation.TimelineGroup.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />. The <see cref="T:DigitalRune.Animation.TimelineGroup" /> does not
            allow <see langword="null" /> values.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.TimelineGroup.Remove(DigitalRune.Animation.ITimeline)">
      <summary>
            Removes the first occurrence of a specific timeline from the <see cref="T:DigitalRune.Animation.TimelineGroup" />.
            </summary>
      <param name="timeline">The timeline to remove from the <see cref="T:DigitalRune.Animation.TimelineGroup" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="timeline" /> was successfully removed from the 
            <see cref="T:DigitalRune.Animation.TimelineGroup" />; otherwise, <see langword="false" />. This method also returns 
            <see langword="false" /> if <paramref name="timeline" /> is not found in the original 
            <see cref="T:DigitalRune.Animation.TimelineGroup" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.TimelineGroup.RemoveAt(System.Int32)">
      <summary>
            Removes the timeline at the specified index from the <see cref="T:DigitalRune.Animation.TimelineGroup" />.
            </summary>
      <param name="index">The zero-based index of the timeline to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:DigitalRune.Animation.TimelineGroup" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.TimelineGroup.System#Collections#Generic#ICollection{DigitalRune#Animation#ITimeline}#CopyTo(DigitalRune.Animation.ITimeline[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:DigitalRune.Animation.TimelineGroup" /> to an <see cref="T:System.Array" />, starting 
            at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from 
            <see cref="T:DigitalRune.Animation.TimelineGroup" />. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
      <param name="arrayIndex">
            The zero-based index in <paramref name="array" /> at which copying begins.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional. Or <paramref name="arrayIndex" /> is equal to 
            or greater than the length of <paramref name="array" />. Or the number of elements in the 
            source <see cref="T:DigitalRune.Animation.TimelineGroup" /> is greater than the available space from 
            <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.TimelineGroup.System#Collections#Generic#ICollection{DigitalRune#Animation#ITimeline}#IsReadOnly">
      <summary>
            Gets a value indicating whether this collection is read-only.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.TimelineGroup.System#Collections#Generic#IEnumerable{DigitalRune#Animation#ITimeline}#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.TimelineGroup.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="P:DigitalRune.Animation.TimelineGroup.TargetObject">
      <summary>
            Gets or sets the object to which the animation is applied by default.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Vector2Animation">
      <summary>
            Animates a <see cref="T:Microsoft.Xna.Framework.Vector2" /> value by applying an animation to each component of the
            vector. (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Vector2Animation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector2Animation" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Vector2Animation.#ctor(DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector2Animation" /> class with the specified
            animations.
            </summary>
      <param name="x">The animation of the <strong>X</strong> component.</param>
      <param name="y">The animation of the <strong>Y</strong> component.</param>
    </member>
    <member name="M:DigitalRune.Animation.Vector2Animation.GetTotalDuration">
      <summary>
            Gets the total length of the timeline.
            </summary>
      <returns>The total length of the timeline.</returns>
    </member>
    <member name="M:DigitalRune.Animation.Vector2Animation.GetValueCore(System.TimeSpan,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>
            Evaluates the animation function at the specified animation time.
            </summary>
      <param name="time">The animation time.</param>
      <param name="defaultSource">
            In: The source value that should be used by the animation if the animation does not have its 
            own source value.
            </param>
      <param name="defaultTarget">
            In: The target value that should be used by the animation if the animation does not have its 
            own target value.
            </param>
      <param name="result">
            Out: The value of the animation at the given time.
            </param>
    </member>
    <member name="P:DigitalRune.Animation.Vector2Animation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector2Animation.X">
      <summary>
            Gets or sets the animation of the <strong>X</strong> component.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector2Animation.Y">
      <summary>
            Gets or sets the animation of the <strong>Y</strong> component.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Vector2FAnimation">
      <summary>
            Animates a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> value by applying an animation to each component of the
            vector.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Vector2FAnimation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector2FAnimation" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Vector2FAnimation.#ctor(DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector2FAnimation" /> class with the specified
            animations.
            </summary>
      <param name="x">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector2F.X" /> component.</param>
      <param name="y">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector2F.Y" /> component.</param>
    </member>
    <member name="M:DigitalRune.Animation.Vector2FAnimation.GetTotalDuration">
      <summary>
            Gets the total length of the timeline.
            </summary>
      <returns>The total length of the timeline.</returns>
    </member>
    <member name="M:DigitalRune.Animation.Vector2FAnimation.GetValueCore(System.TimeSpan,DigitalRune.Mathematics.Algebra.Vector2F@,DigitalRune.Mathematics.Algebra.Vector2F@,DigitalRune.Mathematics.Algebra.Vector2F@)">
      <summary>
            Evaluates the animation function at the specified animation time.
            </summary>
      <param name="time">The animation time.</param>
      <param name="defaultSource">
            In: The source value that should be used by the animation if the animation does not have its 
            own source value.
            </param>
      <param name="defaultTarget">
            In: The target value that should be used by the animation if the animation does not have its 
            own target value.
            </param>
      <param name="result">
            Out: The value of the animation at the given time.
            </param>
    </member>
    <member name="P:DigitalRune.Animation.Vector2FAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector2FAnimation.X">
      <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector2F.X" /> component.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector2FAnimation.Y">
      <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector2F.Y" /> component.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Vector2FFromToByAnimation">
      <summary>
            Animates a <see langword="Vector2F" /> value from/to/by a certain value.
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.Vector2FFromToByAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector2FFromToByAnimation" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector2FFromToByAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Vector2FKeyFrameAnimation">
      <summary>
            Animates a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> value using key frames.
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.Vector2FKeyFrameAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector2FKeyFrameAnimation" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector2FKeyFrameAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Vector2FromToByAnimation">
      <summary>
            Animates a <see langword="Vector2" /> value from/to/by a certain value.
            (Only available in the XNA-compatible build.)
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.Vector2FromToByAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector2FromToByAnimation" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector2FromToByAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Vector2KeyFrameAnimation">
      <summary>
            Animates a <see cref="T:Microsoft.Xna.Framework.Vector2" /> value using key frames.
            (Only available in the XNA-compatible build.)
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.Vector2KeyFrameAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector2KeyFrameAnimation" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector2KeyFrameAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Vector3Animation">
      <summary>
            Animates a <see cref="T:Microsoft.Xna.Framework.Vector3" /> value by applying an animation to each component of the
            vector. (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Vector3Animation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector3Animation" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Vector3Animation.#ctor(DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector3Animation" /> class with the specified
            animations.
            </summary>
      <param name="x">The animation of the <strong>X</strong> component.</param>
      <param name="y">The animation of the <strong>Y</strong> component.</param>
      <param name="z">The animation of the <strong>Z</strong> component.</param>
    </member>
    <member name="M:DigitalRune.Animation.Vector3Animation.GetTotalDuration">
      <summary>
            Gets the total length of the timeline.
            </summary>
      <returns>The total length of the timeline.</returns>
    </member>
    <member name="M:DigitalRune.Animation.Vector3Animation.GetValueCore(System.TimeSpan,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Evaluates the animation function at the specified animation time.
            </summary>
      <param name="time">The animation time.</param>
      <param name="defaultSource">
            In: The source value that should be used by the animation if the animation does not have its 
            own source value.
            </param>
      <param name="defaultTarget">
            In: The target value that should be used by the animation if the animation does not have its 
            own target value.
            </param>
      <param name="result">
            Out: The value of the animation at the given time.
            </param>
    </member>
    <member name="P:DigitalRune.Animation.Vector3Animation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector3Animation.X">
      <summary>
            Gets or sets the animation of the <strong>X</strong> component.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector3Animation.Y">
      <summary>
            Gets or sets the animation of the <strong>Y</strong> component.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector3Animation.Z">
      <summary>
            Gets or sets the animation of the <strong>Z</strong> component.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Vector3FAnimation">
      <summary>
            Animates a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> value by applying an animation to each component of the
            vector.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Vector3FAnimation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector3FAnimation" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Vector3FAnimation.#ctor(DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector3FAnimation" /> class with the specified
            animations.
            </summary>
      <param name="x">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.X" /> component.</param>
      <param name="y">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.Y" /> component.</param>
      <param name="z">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.Z" /> component.</param>
    </member>
    <member name="M:DigitalRune.Animation.Vector3FAnimation.GetTotalDuration">
      <summary>
            Gets the total length of the timeline.
            </summary>
      <returns>The total length of the timeline.</returns>
    </member>
    <member name="M:DigitalRune.Animation.Vector3FAnimation.GetValueCore(System.TimeSpan,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Evaluates the animation function at the specified animation time.
            </summary>
      <param name="time">The animation time.</param>
      <param name="defaultSource">
            In: The source value that should be used by the animation if the animation does not have its 
            own source value.
            </param>
      <param name="defaultTarget">
            In: The target value that should be used by the animation if the animation does not have its 
            own target value.
            </param>
      <param name="result">
            Out: The value of the animation at the given time.
            </param>
    </member>
    <member name="P:DigitalRune.Animation.Vector3FAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector3FAnimation.X">
      <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.X" /> component.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector3FAnimation.Y">
      <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.Y" /> component.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector3FAnimation.Z">
      <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.Z" /> component.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Vector3FFromToByAnimation">
      <summary>
            Animates a <see langword="Vector3F" /> value from/to/by a certain value.
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.Vector3FFromToByAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector3FFromToByAnimation" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector3FFromToByAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Vector3FKeyFrameAnimation">
      <summary>
            Animates a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> value using key frames.
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.Vector3FKeyFrameAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector3FKeyFrameAnimation" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector3FKeyFrameAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Vector3FromToByAnimation">
      <summary>
            Animates a <see langword="Vector3" /> value from/to/by a certain value.
            (Only available in the XNA-compatible build.)
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.Vector3FromToByAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector3FromToByAnimation" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector3FromToByAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Vector3KeyFrameAnimation">
      <summary>
            Animates a <see cref="T:Microsoft.Xna.Framework.Vector3" /> value using key frames.
            (Only available in the XNA-compatible build.)
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.Vector3KeyFrameAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector3KeyFrameAnimation" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector3KeyFrameAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Vector4Animation">
      <summary>
            Animates a <see cref="T:Microsoft.Xna.Framework.Vector4" /> value by applying an animation to each component of the
            vector. (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Vector4Animation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector4Animation" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Vector4Animation.#ctor(DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector4Animation" /> class with the specified
            animations.
            </summary>
      <param name="x">The animation of the <strong>X</strong> component.</param>
      <param name="y">The animation of the <strong>Y</strong> component.</param>
      <param name="z">The animation of the <strong>Z</strong> component.</param>
      <param name="w">The animation of the <strong>W</strong> component.</param>
    </member>
    <member name="M:DigitalRune.Animation.Vector4Animation.GetTotalDuration">
      <summary>
            Gets the total length of the timeline.
            </summary>
      <returns>The total length of the timeline.</returns>
    </member>
    <member name="M:DigitalRune.Animation.Vector4Animation.GetValueCore(System.TimeSpan,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>
            Evaluates the animation function at the specified animation time.
            </summary>
      <param name="time">The animation time.</param>
      <param name="defaultSource">
            In: The source value that should be used by the animation if the animation does not have its 
            own source value.
            </param>
      <param name="defaultTarget">
            In: The target value that should be used by the animation if the animation does not have its 
            own target value.
            </param>
      <param name="result">
            Out: The value of the animation at the given time.
            </param>
    </member>
    <member name="P:DigitalRune.Animation.Vector4Animation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector4Animation.W">
      <summary>
            Gets or sets the animation of the <strong>W</strong> component.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector4Animation.X">
      <summary>
            Gets or sets the animation of the <strong>X</strong> component.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector4Animation.Y">
      <summary>
            Gets or sets the animation of the <strong>Y</strong> component.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector4Animation.Z">
      <summary>
            Gets or sets the animation of the <strong>Z</strong> component.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Vector4FAnimation">
      <summary>
            Animates a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> value by applying an animation to each component of the
            vector.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Vector4FAnimation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector4FAnimation" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Vector4FAnimation.#ctor(DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector4FAnimation" /> class with the specified
            animations.
            </summary>
      <param name="x">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector4F.X" /> component.</param>
      <param name="y">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector4F.Y" /> component.</param>
      <param name="z">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector4F.Z" /> component.</param>
      <param name="w">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector4F.W" /> component.</param>
    </member>
    <member name="M:DigitalRune.Animation.Vector4FAnimation.GetTotalDuration">
      <summary>
            Gets the total length of the timeline.
            </summary>
      <returns>The total length of the timeline.</returns>
    </member>
    <member name="M:DigitalRune.Animation.Vector4FAnimation.GetValueCore(System.TimeSpan,DigitalRune.Mathematics.Algebra.Vector4F@,DigitalRune.Mathematics.Algebra.Vector4F@,DigitalRune.Mathematics.Algebra.Vector4F@)">
      <summary>
            Evaluates the animation function at the specified animation time.
            </summary>
      <param name="time">The animation time.</param>
      <param name="defaultSource">
            In: The source value that should be used by the animation if the animation does not have its 
            own source value.
            </param>
      <param name="defaultTarget">
            In: The target value that should be used by the animation if the animation does not have its 
            own target value.
            </param>
      <param name="result">
            Out: The value of the animation at the given time.
            </param>
    </member>
    <member name="P:DigitalRune.Animation.Vector4FAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector4FAnimation.W">
      <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector4F.W" /> component.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector4FAnimation.X">
      <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector4F.X" /> component.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector4FAnimation.Y">
      <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector4F.Y" /> component.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector4FAnimation.Z">
      <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector4F.Z" /> component.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Vector4FFromToByAnimation">
      <summary>
            Animates a <see langword="Vector4F" /> value from/to/by a certain value.
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.Vector4FFromToByAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector4FFromToByAnimation" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector4FFromToByAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Vector4FKeyFrameAnimation">
      <summary>
            Animates a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> value using key frames.
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.Vector4FKeyFrameAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector4FKeyFrameAnimation" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector4FKeyFrameAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Vector4FromToByAnimation">
      <summary>
            Animates a <see langword="Vector4" /> value from/to/by a certain value.
            (Only available in the XNA-compatible build.)
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.Vector4FromToByAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector4FromToByAnimation" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector4FromToByAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Vector4KeyFrameAnimation">
      <summary>
            Animates a <see cref="T:Microsoft.Xna.Framework.Vector4" /> value using key frames. 
            (Only available in the XNA-compatible build.)
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.Vector4KeyFrameAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector4KeyFrameAnimation" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.Vector4KeyFrameAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Character.AvatarPose">
      <summary>
            Represents the skeletal pose and facial expression of an Xbox LIVE Avatar. 
            (Only available in the XNA-compatible build for Windows and Xbox 360.)
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.AvatarPose.#ctor(DigitalRune.Animation.Character.Skeleton)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.AvatarPose" /> class for the given skeleton.
            </summary>
      <param name="skeleton">The skeleton.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="skeleton" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="skeleton" /> is not a valid Xbox LIVE Avatar skeleton.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.AvatarPose.#ctor(Microsoft.Xna.Framework.GamerServices.AvatarRenderer)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.AvatarPose" /> class for the given
            avatar renderer.
            </summary>
      <param name="avatarRenderer">
            The avatar renderer. The avatar renderer must already be in the "ready" state 
            (<c>AvatarRender.State == AvatarRendererState.Ready</c>), otherwise an exception is 
            thrown.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="avatarRenderer" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.AvatarPose.DigitalRune#Animation#IAnimatableObject#GetAnimatableProperty``1(System.String)">
      <summary>
            Gets the property with given name and type which can be animated.
            </summary>
      <param name="name">The name of the property.</param>
      <typeparam name="T">The type of the property.</typeparam>
      <returns>
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty" /> that has the given name and type; otherwise, 
            <see langword="null" /> if the object does not have an animatable property with this name or 
            type.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.AvatarPose.DigitalRune#Animation#IAnimatableObject#GetAnimatedProperties">
      <summary>
            Gets either the properties which are currently animated, or all properties which can be 
            animated. (See remarks.)
            </summary>
      <returns>
            The properties which are currently animated, or the all properties which can be animated.
            (See remarks.)
            </returns>
    </member>
    <member name="P:DigitalRune.Animation.Character.AvatarPose.Expression">
      <summary>
            Gets the facial expression at the current time position.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.AvatarPose.Microsoft#Xna#Framework#GamerServices#IAvatarAnimation#BoneTransforms">
      <summary>
            Gets the current position of the bones.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.AvatarPose.Microsoft#Xna#Framework#GamerServices#IAvatarAnimation#CurrentPosition">
      <summary>
            Not implemented.
            </summary>
      <exception cref="T:System.NotImplementedException">
        <see cref="T:DigitalRune.Animation.Character.AvatarPose" /> does not implement a setter for <strong>CurrentPosition</strong>.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.Character.AvatarPose.Microsoft#Xna#Framework#GamerServices#IAvatarAnimation#Length">
      <summary>
            Not implemented.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.AvatarPose.Microsoft#Xna#Framework#GamerServices#IAvatarAnimation#Update(System.TimeSpan,System.Boolean)">
      <summary>
            Updates the current time position of the avatar animation.
            </summary>
      <param name="elapsedAnimationTime">Ignored.</param>
      <param name="loop">Ignored.</param>
    </member>
    <member name="P:DigitalRune.Animation.Character.AvatarPose.Name">
      <summary>
            Gets or sets the name of the avatar pose. (Same as the name of the 
            <see cref="P:DigitalRune.Animation.Character.AvatarPose.SkeletonPose" />.)
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.AvatarPose.SkeletonPose">
      <summary>
            Gets the skeleton pose at the current time position.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Character.BoneMapper">
      <summary>
            Maps a bone transform of a skeleton to a bone transform of another skeleton.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.BoneMapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.BoneMapper" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.BoneMapper.Direction">
      <summary>
            Gets or sets the desired mapping direction.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.BoneMapper.Invalidate">
      <summary>
            Invalidates all cached data of this bone mapper.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.BoneMapper.MapAToB">
      <summary>
            Sets the bone transform in the second skeleton to match skeleton pose of the first skeleton.
            </summary>
      <exception cref="T:DigitalRune.Animation.AnimationException">
        <see cref="P:DigitalRune.Animation.Character.BoneMapper.SkeletonMapper" /> is not set.</exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.BoneMapper.MapBToA">
      <summary>
            Sets the bone transform in the first skeleton to match skeleton pose of the second
            skeleton.
            </summary>
      <exception cref="T:DigitalRune.Animation.AnimationException">
        <see cref="P:DigitalRune.Animation.Character.BoneMapper.SkeletonMapper" /> is not set.</exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.BoneMapper.OnInvalidate">
      <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.Invalidate" /> is called.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.BoneMapper.OnMapAToB">
      <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.MapAToB" /> was called.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.BoneMapper.OnMapBToA">
      <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.MapBToA" /> was called.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.BoneMapper.SkeletonMapper">
      <summary>
            Gets or sets the skeleton mapper. (This property is set automatically and should be
            treated as read-only.)
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Character.BoneMapperCollection">
      <summary>
            Represents a collection of <see cref="T:DigitalRune.Animation.Character.BoneMapper" /> instances.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.BoneMapperCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.BoneMapperCollection" /> class.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Character.BoneMappingDirection">
      <summary>
            Defines the mapping direction of a <see cref="T:DigitalRune.Animation.Character.BoneMapper" /></summary>
    </member>
    <member name="F:DigitalRune.Animation.Character.BoneMappingDirection.AToB">
      <summary>
            Skeleton A is mapped to skeleton B. 
            </summary>
    </member>
    <member name="F:DigitalRune.Animation.Character.BoneMappingDirection.BToA">
      <summary>
            Skeleton B is mapped to skeleton A. 
            </summary>
    </member>
    <member name="F:DigitalRune.Animation.Character.BoneMappingDirection.Both">
      <summary>
            The bone mapper maps in both directions.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Character.CcdIKSolver">
      <summary>
            Modifies a skeleton using the cyclic-coordinate descent (CCD) algorithm.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.CcdIKSolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.CcdIKSolver" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.CcdIKSolver.AllowedDeviation">
      <summary>
            Gets or sets the allowed distance error.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.CcdIKSolver.BoneGain">
      <summary>
            Gets or sets the bone gain.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.CcdIKSolver.LimitBoneTransforms">
      <summary>
            Gets or sets the a callback that enforces rotation limits.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.CcdIKSolver.NumberOfIterations">
      <summary>
            Gets or sets the number of iterations.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.CcdIKSolver.OnInvalidate">
      <summary>
            Called when the <see cref="T:DigitalRune.Animation.Character.SkeletonPose" /> was exchanged.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.CcdIKSolver.OnSolve(System.Single)">
      <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.IKSolver.Solve(System.Single)" /> is called.
            </summary>
      <param name="deltaTime">The current time step (in seconds).</param>
    </member>
    <member name="P:DigitalRune.Animation.Character.CcdIKSolver.RootBoneIndex">
      <summary>
            Gets or sets the index of the root bone.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.CcdIKSolver.TipBoneIndex">
      <summary>
            Gets or sets the index of the tip bone.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.CcdIKSolver.TipOffset">
      <summary>
            Gets or sets the tip offset in tip bone space.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Character.ChainBoneMapper">
      <summary>
            Maps the orientation of a whole bone chain.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.ChainBoneMapper.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.ChainBoneMapper" /> class.
            </summary>
      <param name="rootBoneIndexA">
            The bone index in the first skeleton where the bone chain starts.
            </param>
      <param name="tipBoneIndexA">
            The bone index in the first skeleton where the bone chain ends. This is the index 
            of the first bone that is NOT included in the chain (= the first bone after the chain).
            </param>
      <param name="rootBoneIndexB">
            The bone index in the second skeleton where the bone chain starts.
            </param>
      <param name="tipBoneIndexB">
            The bone index in the second skeleton where the bone chain ends. This is the index 
            of the first bone that is NOT included in the chain (= the first bone after the chain).
            </param>
    </member>
    <member name="P:DigitalRune.Animation.Character.ChainBoneMapper.MapFromBindPose">
      <summary>
            Gets or sets a value indicating whether the chain mapping uses the bind pose as the
            reference orientation for the target skeleton.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.ChainBoneMapper.OnInvalidate">
      <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.Invalidate" /> is called.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.ChainBoneMapper.OnMapAToB">
      <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.MapAToB" /> was called.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.ChainBoneMapper.OnMapBToA">
      <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.MapBToA" /> was called.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.ChainBoneMapper.RootBoneIndexA">
      <summary>
            Gets or sets the bone index of the first bone of the bone chain in the first skeleton.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.ChainBoneMapper.RootBoneIndexB">
      <summary>
            Gets or sets the bone index of the first bone of the bone chain in the second skeleton.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.ChainBoneMapper.TipBoneIndexA">
      <summary>
            Gets or sets the bone index where the bone chain of the first skeleton ends. This is the
            bone index of the first bone that is NOT included in the chain.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.ChainBoneMapper.TipBoneIndexB">
      <summary>
            Gets or sets the bone index where the bone chain of the second skeleton ends. This is the
            bone index of the first bone that is NOT included in the chain.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Character.ClosedFormIKSolver">
      <summary>
            Modifies a skeleton using a non-iterative, closed-form IK solver.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.ClosedFormIKSolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.ClosedFormIKSolver" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.ClosedFormIKSolver.OnInvalidate">
      <summary>
            Called when the <see cref="T:DigitalRune.Animation.Character.SkeletonPose" /> was exchanged.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.ClosedFormIKSolver.OnSolve(System.Single)">
      <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.IKSolver.Solve(System.Single)" /> is called.
            </summary>
      <param name="deltaTime">The current time step (in seconds).</param>
    </member>
    <member name="P:DigitalRune.Animation.Character.ClosedFormIKSolver.RootBoneIndex">
      <summary>
            Gets or sets the index of the root bone.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.ClosedFormIKSolver.TipBoneIndex">
      <summary>
            Gets or sets the index of the tip bone.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.ClosedFormIKSolver.TipOffset">
      <summary>
            Gets or sets the tip offset in tip bone space.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Character.DirectBoneMapper">
      <summary>
            Copies a bone transform from one skeleton to the other skeleton.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.DirectBoneMapper.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.DirectBoneMapper" /> class.
            </summary>
      <param name="boneIndexA">The bone index for the first skeleton.</param>
      <param name="boneIndexB">The bone index for the second skeleton.</param>
    </member>
    <member name="P:DigitalRune.Animation.Character.DirectBoneMapper.BoneIndexA">
      <summary>
            Gets or sets the bone index for the first skeleton.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.DirectBoneMapper.BoneIndexB">
      <summary>
            Gets or sets the bone index for the second skeleton.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.DirectBoneMapper.EstimateScale">
      <summary>
            Analyzes the skeletons and sets <see cref="P:DigitalRune.Animation.Character.DirectBoneMapper.ScaleAToB" /> to a guessed scale factor.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.DirectBoneMapper.MapAbsoluteTransforms">
      <summary>
            Gets or sets a value indicating whether the mapping is performed in model space.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.DirectBoneMapper.MapTranslations">
      <summary>
            Gets or sets a value indicating whether translations are mapped or ignored.
            (If <see cref="P:DigitalRune.Animation.Character.DirectBoneMapper.MapAbsoluteTransforms" /> is set, translations are always ignored
            and this property is not used.)
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.DirectBoneMapper.OnInvalidate">
      <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.Invalidate" /> is called.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.DirectBoneMapper.OnMapAToB">
      <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.MapAToB" /> was called.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.DirectBoneMapper.OnMapBToA">
      <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.MapBToA" /> was called.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.DirectBoneMapper.ScaleAToB">
      <summary>
            Gets or sets the scale of second skeleton relative to the first skeleton. (Only relevant if
            bone translations are mapped.)
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Character.IKSolver">
      <summary>
            Modifies a <see cref="P:DigitalRune.Animation.Character.IKSolver.SkeletonPose" /> using inverse kinematics (IK).
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.IKSolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.IKSolver" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.IKSolver.DigitalRune#Animation#IAnimatableObject#GetAnimatableProperty``1(System.String)">
      <summary>
            Gets the property with given name and type which can be animated.
            </summary>
      <param name="name">The name of the property.</param>
      <typeparam name="T">The type of the property.</typeparam>
      <returns>
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty" /> that has the given name and type; otherwise, 
            <see langword="null" /> if the object does not have an property with this name or type.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.IKSolver.DigitalRune#Animation#IAnimatableObject#GetAnimatedProperties">
      <summary>
            Gets the properties which are currently being animated.
            </summary>
      <returns>
            The properties which are currently being animated.
            </returns>
    </member>
    <member name="P:DigitalRune.Animation.Character.IKSolver.DigitalRune#INamedObject#Name">
      <summary>
            Not implemented.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.IKSolver.MaxAngularVelocity">
      <summary>
            Gets or sets the maximal angular velocity per bone.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.IKSolver.OnInvalidate">
      <summary>
            Called when the <see cref="P:DigitalRune.Animation.Character.IKSolver.SkeletonPose" /> was exchanged.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.IKSolver.OnSolve(System.Single)">
      <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.IKSolver.Solve(System.Single)" /> is called.
            </summary>
      <param name="deltaTime">The current time step (in seconds).</param>
    </member>
    <member name="P:DigitalRune.Animation.Character.IKSolver.SkeletonPose">
      <summary>
            Gets or sets the skeleton pose.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.IKSolver.Solve(System.Single)">
      <summary>
            Modifies the <see cref="P:DigitalRune.Animation.Character.IKSolver.SkeletonPose" /> to reach the <see cref="P:DigitalRune.Animation.Character.IKSolver.Target" /> position.
            </summary>
      <param name="deltaTime">The current time step (in seconds).</param>
    </member>
    <member name="P:DigitalRune.Animation.Character.IKSolver.Target">
      <summary>
            Gets or sets the target position in model space.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.IKSolver.Weight">
      <summary>
            Gets or sets the weight.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Character.JacobianTransposeIKSolver">
      <summary>
            Modifies a skeleton using the Jacobian Transpose method.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.JacobianTransposeIKSolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.JacobianTransposeIKSolver" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.AllowedDeviation">
      <summary>
            Gets or sets the allowed distance error.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.LimitBoneTransforms">
      <summary>
            Gets or sets the a callback that enforces rotation limits.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.NumberOfIterations">
      <summary>
            Gets or sets the number of iterations.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.JacobianTransposeIKSolver.OnInvalidate">
      <summary>
            Called when the <see cref="T:DigitalRune.Animation.Character.SkeletonPose" /> was exchanged.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.JacobianTransposeIKSolver.OnSolve(System.Single)">
      <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.IKSolver.Solve(System.Single)" /> is called.
            </summary>
      <param name="deltaTime">The current time step (in seconds).</param>
    </member>
    <member name="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.RootBoneIndex">
      <summary>
            Gets or sets the index of the root bone.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.StepSize">
      <summary>
            Gets or sets the size of the Euler integration step.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.TipBoneIndex">
      <summary>
            Gets or sets the index of the tip bone.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.TipOffset">
      <summary>
            Gets or sets the tip offset in tip bone space.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Character.LookAtIKSolver">
      <summary>
            Rotates a bone to look at a target.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.LookAtIKSolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.LookAtIKSolver" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.LookAtIKSolver.BoneIndex">
      <summary>
            Gets or sets the index of the bone.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.LookAtIKSolver.EyeOffset">
      <summary>
            Gets or sets the eye offset in bone space.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.LookAtIKSolver.Forward">
      <summary>
            Gets or sets the forward direction in bone space.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.LookAtIKSolver.Limit">
      <summary>
            Gets or sets the rotation limit.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.LookAtIKSolver.OnSolve(System.Single)">
      <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.IKSolver.Solve(System.Single)" /> is called.
            </summary>
      <param name="deltaTime">The current time step (in seconds).</param>
    </member>
    <member name="P:DigitalRune.Animation.Character.LookAtIKSolver.Up">
      <summary>
            Gets or sets the up direction in bone space.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Character.Ragdoll">
      <summary>
            Represents a ragdoll of a 3D animated character.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.Ragdoll.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.Ragdoll" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.Ragdoll.AddToSimulation(DigitalRune.Physics.Simulation)">
      <summary>
            Adds all parts of the ragdoll to a simulation. 
            </summary>
      <param name="simulation">The simulation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="simulation" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The ragdoll cannot be added to the simulation because it has already been added to another 
            simulation.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.Character.Ragdoll.Bodies">
      <summary>
            Gets the rigid bodies that represent the ragdoll limbs.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.Ragdoll.BodyOffsets">
      <summary>
            Gets the body offsets.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.Ragdoll.DisableJoints">
      <summary>
            Disables all joints.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.Ragdoll.DisableLimits">
      <summary>
            Disables all limits.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.Ragdoll.DisableMotors">
      <summary>
            Disables all motors.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.Ragdoll.DriveToPose(DigitalRune.Animation.Character.SkeletonPose,System.Single)">
      <summary>
            Drives the ragdoll bodies to the target pose using the <see cref="P:DigitalRune.Animation.Character.Ragdoll.Motors" />.
            </summary>
      <param name="skeletonPose">The target skeleton pose.</param>
      <param name="deltaTime">The current time step (in seconds).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="skeletonPose" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Ragdoll was not added to a simulation.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.Ragdoll.DriveToPose(DigitalRune.Animation.Character.SkeletonPose,System.TimeSpan)">
      <summary>
            Drives the ragdoll bodies to the target pose using the <see cref="P:DigitalRune.Animation.Character.Ragdoll.Motors" />.
            </summary>
      <param name="skeletonPose">The target skeleton pose.</param>
      <param name="deltaTime">The current time step.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="skeletonPose" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Ragdoll was not added to a simulation.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.Ragdoll.EnableJoints">
      <summary>
            Enables all joints.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.Ragdoll.EnableLimits">
      <summary>
            Enables all limits.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.Ragdoll.EnableMotors">
      <summary>
            Enables all motors.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.Ragdoll.Joints">
      <summary>
            Gets the joints.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.Ragdoll.Limits">
      <summary>
            Gets the limits.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.Ragdoll.Motors">
      <summary>
            Gets the motors.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.Ragdoll.Pose">
      <summary>
            Gets or sets the pose (position and orientation) of the character in world space.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.Ragdoll.RemoveFromSimulation">
      <summary>
            Removes all ragdoll parts from the simulation.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.Ragdoll.Simulation">
      <summary>
            Gets the simulation to which this ragdoll was added.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.Ragdoll.UpdateBodiesFromSkeleton(DigitalRune.Animation.Character.SkeletonPose)">
      <summary>
            Updates the poses of the bodies, so that the bodies match the bone transforms of the given 
            skeleton pose.
            </summary>
      <param name="skeletonPose">The skeleton pose.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="skeletonPose" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.Ragdoll.UpdateBodyFromSkeleton(DigitalRune.Animation.Character.SkeletonPose,System.Int32)">
      <summary>
            Updates the pose of a single body, so that the bodies match the bone transforms of the given
            bone.
            </summary>
      <param name="skeletonPose">The skeleton pose.</param>
      <param name="boneIndex">The index of the bone.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="skeletonPose" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.Ragdoll.UpdateSkeletonFromBodies(DigitalRune.Animation.Character.SkeletonPose)">
      <summary>
            Updates the bone transforms of the skeleton pose, so that the bones match the ragdoll 
            bodies.
            </summary>
      <param name="skeletonPose">The skeleton pose that is modified.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="skeletonPose" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Animation.Character.RagdollMotor">
      <summary>
            Drives a body of a ragdoll to a target position.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.RagdollMotor.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.RagdollMotor" /> class.
            </summary>
      <param name="boneIndex">The index of the controlled bone.</param>
      <param name="parentIndex">
            The index of the parent bone to which the controlled bone is connected.
            (Only relevant for constraint motors.)
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="boneIndex" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.Character.RagdollMotor.BoneIndex">
      <summary>
            Gets the index of the controlled bone.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.RagdollMotor.ConstraintDamping">
      <summary>
            Gets or sets the damping constant of a constraint motor.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.RagdollMotor.ConstraintSpring">
      <summary>
            Gets or sets the spring constant of a constraint motor.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.RagdollMotor.Enabled">
      <summary>
            Gets or sets a value indicating whether this motor is enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.RagdollMotor.Mode">
      <summary>
            Gets or sets the motor mode.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.RagdollMotor.ParentIndex">
      <summary>
            Gets the index of the parent bone to which the controlled bone is connected.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.RagdollMotor.Ragdoll">
      <summary>
            Gets the ragdoll.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Character.RagdollMotorMode">
      <summary>
            Defines the type of <see cref="T:DigitalRune.Animation.Character.RagdollMotor" />.
            </summary>
    </member>
    <member name="F:DigitalRune.Animation.Character.RagdollMotorMode.Velocity">
      <summary>
            A velocity motor directly sets the linear and angular velocity of controlled ragdoll bodies. 
            </summary>
    </member>
    <member name="F:DigitalRune.Animation.Character.RagdollMotorMode.Constraint">
      <summary>
            Constraint motors use <see cref="F:DigitalRune.Animation.Character.RagdollMotorMode.Constraint" />s to influence the controlled ragdoll bodies.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Character.Skeleton">
      <summary>
            Describes a skeleton for 3D character animation in the bind pose.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.Skeleton.#ctor(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{DigitalRune.Animation.Character.SrtTransform})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.Skeleton" /> class.
            </summary>
      <param name="boneParents">
            The bone parents. This list contains one entry per bone. The list element is the 
            parent bone index for each bone. If a bone has no parent, the array should contain -1.
            </param>
      <param name="boneNames">
            The bone names. This list contains one entry per bone. The list element is the name
            of the bone or <see langword="null" /> if the bone is unnamed.
            </param>
      <param name="bindPosesRelative">
            The bind poses. This list contains one entry per bone. The list element is the bone
            pose transformation relative to the parent bone.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="boneParents" />, <paramref name="boneNames" /> or 
            <paramref name="bindPosesRelative" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            Either the given lists are empty, have different length, or the 
            <paramref name="boneParents" /> are invalid (parent bones must come be before their child 
            bones).
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.Skeleton.GetBindPoseAbsoluteInverse(System.Int32)">
      <summary>
            Gets the bind pose transformation of a given bone relative to model space.
            </summary>
      <param name="boneIndex">The index of the bone.</param>
      <returns>
            The bind pose transformation relative to model space.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="boneIndex" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.Skeleton.GetBindPoseRelative(System.Int32)">
      <summary>
            Gets the bind pose transformation of a given bone relative to the parent bone.
            </summary>
      <param name="boneIndex">The index of the bone.</param>
      <returns>
            The bind pose transformation relative to the parent bone.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="boneIndex" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.Skeleton.GetChild(System.Int32,System.Int32)">
      <summary>
            Gets the bone index of a child bone of a given bone.
            </summary>
      <param name="boneIndex">The bone index.</param>
      <param name="childIndex">
            The child index. 0 is the first child bone, 1 is the second child bone, and so on.
            </param>
      <returns>
            The bone index of the child bone.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="boneIndex" /> or <paramref name="childIndex" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.Skeleton.GetIndex(System.String)">
      <summary>
            Gets the bone index for a given bone name.
            </summary>
      <param name="boneName">The name of the bone.</param>
      <returns>
            The bone index, or -1 if no bone with this name exists.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.Skeleton.GetName(System.Int32)">
      <summary>
            Gets the name of a given bone.
            </summary>
      <param name="boneIndex">The index of the bone.</param>
      <returns>
            The name of the bone, or <see langword="null" /> if the bone is unnamed.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.Skeleton.GetNumberOfChildren(System.Int32)">
      <summary>
            Gets the number of child bones of a given bone.
            </summary>
      <param name="boneIndex">The bone index.</param>
      <returns>
            The number of child bones that are attached to this bone. (Only direct child bones - not 
            children of children.)
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="boneIndex" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.Skeleton.GetParent(System.Int32)">
      <summary>
            Gets the index of the parent bone of a given bone.
            </summary>
      <param name="boneIndex">The bone index.</param>
      <returns>
            The bone index of the parent bone, or -1 if the bone is a root bone that does not have
            a parent bone.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="boneIndex" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.Character.Skeleton.Name">
      <summary>
            Gets or sets the name of the skeleton.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.Skeleton.NumberOfBones">
      <summary>
            Gets the number of bones in this skeleton.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Character.SkeletonHelper">
      <summary>
            Provides helper methods for working with skeletons.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonHelper.DrawBones(DigitalRune.Animation.Character.SkeletonPose,Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.BasicEffect,System.Single,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.SpriteFont,Microsoft.Xna.Framework.Color)">
      <summary>
            Draws the skeleton bones, bone space axes and bone names for debugging. 
            (Only available in the XNA-compatible build.)
            </summary>
      <param name="skeletonPose">The skeleton pose.</param>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="effect">
            An initialized basic effect instance. <strong>BasicEffect.World</strong>, 
            <strong>BasicEffect.View</strong> and <strong>BasicEffect.Projection</strong> must be 
            correctly initialized before this method is called.
            </param>
      <param name="axisLength">The visible length of the bone space axes.</param>
      <param name="spriteBatch">
            A <strong>SpriteBatch</strong>. Can be <see langword="null" /> to skip text rendering.
            </param>
      <param name="spriteFont">
            A <strong>SpriteFont</strong>. Can be <see langword="null" /> to skip text rendering.
            </param>
      <param name="color">
            The color for the bones and the bone names.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="skeletonPose" />, <paramref name="graphicsDevice" /> or 
            <paramref name="effect" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonHelper.GetChain(DigitalRune.Animation.Character.SkeletonPose,System.Int32,System.Int32,System.Collections.Generic.List{System.Int32})">
      <summary>
            Gets the bone indices of a bone chain.
            </summary>
      <param name="skeletonPose">The skeleton pose.</param>
      <param name="startBoneIndex">Index of the start bone (root of the chain). Can be -1.</param>
      <param name="endBoneIndex">Index of the end bone (tip of the chain). Must not be -1.</param>
      <param name="boneIndices">
            A list where the bone indices should be stored. Must not be <see langword="null" />. 
            The list is cleared before the new bones are added.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="skeletonPose" /> or <paramref name="boneIndices" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startBoneIndex" /> and <paramref name="endBoneIndex" /> do not form a valid
            bone chain.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonHelper.GetNumberOfBones(DigitalRune.Animation.Character.SkeletonPose,System.Int32,System.Int32)">
      <summary>
            Counts the number of bones in a bone chain.
            </summary>
      <param name="skeletonPose">The skeleton pose.</param>
      <param name="startBoneIndex">Index of the start bone (root of the chain). Can be -1.</param>
      <param name="endBoneIndex">Index of the end bone (tip of the chain). Must not be -1.</param>
      <returns>The number of bones in the chain; or 0 if the chain is invalid.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="skeletonPose" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonHelper.IsAncestor(DigitalRune.Animation.Character.SkeletonPose,System.Int32,System.Int32)">
      <summary>
            Determines whether the given bone indices form a valid bone chain.
            </summary>
      <param name="skeletonPose">The skeleton pose.</param>
      <param name="ancestorBoneIndex">Index of the start bone (root of the chain). Can be -1.</param>
      <param name="childBoneIndex">Index of the end bone (tip of the chain). Must not be -1.</param>
      <returns>
        <see langword="true" /> if bone indices describe a valid chain; otherwise, 
            <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="skeletonPose" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonHelper.IsAncestorOrSelf(DigitalRune.Animation.Character.SkeletonPose,System.Int32,System.Int32)">
      <summary>
            Determines whether the given bone indices form a valid bone chain.
            </summary>
      <param name="skeletonPose">The skeleton pose.</param>
      <param name="ancestorBoneIndex">Index of the start bone (root of the chain). Can be -1.</param>
      <param name="childBoneIndex">Index of the end bone (tip of the chain). Must not be -1.</param>
      <returns>
        <see langword="true" /> if bone indices describe a valid chain; otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="skeletonPose" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonHelper.ResetBoneTransforms(DigitalRune.Animation.Character.SkeletonPose,System.Int32,System.Int32)">
      <summary>
            Resets the bone transforms of all bones in a bone chain.
            </summary>
      <param name="skeletonPose">The skeleton pose.</param>
      <param name="startBoneIndex">Index of the start bone (root of the chain). Can be -1.</param>
      <param name="endBoneIndex">Index of the end bone (tip of the chain). Must not be -1.</param>
      <returns>The number of bones in the chain; or 0 if the chain is invalid.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="skeletonPose" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonHelper.ResetBoneTransforms(DigitalRune.Animation.Character.SkeletonPose,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Resets the bone transform components (scale, rotation or translation) of all bones in a 
            bone chain. 
            </summary>
      <param name="skeletonPose">The skeleton pose.</param>
      <param name="startBoneIndex">Index of the start bone (root of the chain). Can be -1.</param>
      <param name="endBoneIndex">Index of the end bone (tip of the chain). Must not be -1.</param>
      <param name="resetScale">If set to <see langword="true" />, the scale is reset.</param>
      <param name="resetRotation">If set to <see langword="true" />, the rotation is reset.</param>
      <param name="resetTranslation">If set to <see langword="true" />, the translation is reset.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="skeletonPose" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonHelper.ResetBoneTransformsInSubtree(DigitalRune.Animation.Character.SkeletonPose,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Resets the bone transform components (scale, rotation or translation) of all bones in a 
            bone subtree.
            </summary>
      <param name="skeletonPose">The skeleton pose.</param>
      <param name="boneIndex">
            Index of the root bone of the subtree. Must not be negative.
            </param>
      <param name="resetScale">If set to <see langword="true" />, the scale is reset.</param>
      <param name="resetRotation">If set to <see langword="true" />, the rotation is reset.</param>
      <param name="resetTranslation">If set to <see langword="true" />, the translation is reset.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="skeletonPose" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="boneIndex" /> is negative.</exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonHelper.RotateBoneAbsolute(DigitalRune.Animation.Character.SkeletonPose,System.Int32,DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Rotates a bone where the rotation is given in model space.
            </summary>
      <param name="skeletonPose">The skeleton pose.</param>
      <param name="boneIndex">The index of the bone.</param>
      <param name="rotation">The rotation in model space.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="skeletonPose" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonHelper.SetBonePoseAbsolute(DigitalRune.Animation.Character.SkeletonPose,System.Int32,DigitalRune.Animation.Character.SrtTransform)">
      <summary>
            Sets the bone transform to create a desired pose in model space.
            </summary>
      <param name="skeletonPose">The skeleton pose.</param>
      <param name="boneIndex">The index of the bone.</param>
      <param name="bonePoseAbsolute">The bone pose in model space.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="skeletonPose" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonHelper.SetBoneRotationAbsolute(DigitalRune.Animation.Character.SkeletonPose,System.Int32,DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Sets the bone rotation of a bone so that it matches the given rotation in model space.
            </summary>
      <param name="skeletonPose">The skeleton pose.</param>
      <param name="boneIndex">The index of the bone.</param>
      <param name="rotation">The rotation in model space.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="skeletonPose" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation">
      <summary>
            Animates a <see cref="T:DigitalRune.Animation.Character.SkeletonPose" /> based on predefined key frames.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.AddKeyFrame(System.Int32,System.TimeSpan,DigitalRune.Animation.Character.SrtTransform)">
      <summary>
            Adds a key frame for the specified bone.
            </summary>
      <param name="boneIndex">The index of the bone.</param>
      <param name="time">The time of the key frame.</param>
      <param name="boneTransform">The bone transform.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="boneIndex" /> is out of range.
            </exception>
      <exception cref="T:DigitalRune.Animation.AnimationException">
            The <see cref="T:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation" /> has already been finalized by calling 
            <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Freeze" />. It is no longer possible to add or remove key frames.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Clear">
      <summary>
            Removes all key frames and bone weights.
            </summary>
      <exception cref="T:DigitalRune.Animation.AnimationException">
            The <see cref="T:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation" /> has already been finalized by calling 
            <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Freeze" />. It is no longer possible to add or remove key frames.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Clone">
      <summary>
            Clones this instance.
            </summary>
      <returns>
            A copy of this key frame animation. The copy is is not frozen (<see cref="P:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.IsFrozen" /> is
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Compress(System.Single,System.Single,System.Single)">
      <summary>
            Compresses the animation using a simple lossy compression.
            </summary>
      <param name="scaleThreshold">The scale threshold.</param>
      <param name="rotationThreshold">The rotation threshold in degrees.</param>
      <param name="translationThreshold">The translation threshold.</param>
      <returns>
            The amount of removed key frames in the range [0, 1]. 0 means that no key frames
            have been removed. 0.5 means that 50% of the key frames have been removed. Etc.
            </returns>
      <exception cref="T:DigitalRune.Animation.AnimationException">
            The <see cref="T:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation" /> has already been finalized by calling
            <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Freeze" />. It is no longer possible to add or remove key frames.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.DigitalRune#Animation#IAnimation#CreateBlendAnimation">
      <summary>
            Creates a new <see cref="T:DigitalRune.Animation.BlendAnimation`1" />. (For internal use only.)
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Animation.BlendAnimation`1" />.
            </returns>
      <exception cref="T:DigitalRune.Animation.AnimationException">
            This animation is not frozen. <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Freeze" /> must be called before the animation can 
            be used.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.DigitalRune#Animation#ITimeline#CreateInstance">
      <summary>
            Creates an animation instance that can be used to play back the animation. 
            (For internal use only.)
            </summary>
      <returns>
            An <see cref="T:DigitalRune.Animation.AnimationInstance" /> that can be used to play back the animation.
            </returns>
      <exception cref="T:DigitalRune.Animation.AnimationException">
            This animation is not frozen. <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Freeze" /> must be called before the animation can 
            be used.
            </exception>
    </member>
    <member name="P:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.EnableInterpolation">
      <summary>
            Gets or sets a value indicating whether values between key frames are interpolated.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.FillBehavior">
      <summary>
            Gets or sets a value that specifies how the animation behaves when it reaches the end of its 
            duration.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Freeze">
      <summary>
            Prepares this animation for runtime usage. (Must be called after all key frames have been
            added!)
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.GetAnimationTime(System.TimeSpan)">
      <summary>
            Gets the animation time for the specified time on the timeline.
            </summary>
      <param name="time">The time on the timeline.</param>
      <returns>
            The animation time. (The return value is <see langword="null" /> if the animation is not 
            active at <paramref name="time" />.)
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.GetState(System.TimeSpan)">
      <summary>
            Gets the state of the animation for the specified time on the timeline.
            </summary>
      <param name="time">The time on the timeline.</param>
      <returns>The state of the animation.</returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.GetTotalDuration">
      <summary>
            Gets the total length of the timeline.
            </summary>
      <returns>The total length of the timeline.</returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.GetValue(System.TimeSpan,DigitalRune.Animation.Character.SkeletonPose@,DigitalRune.Animation.Character.SkeletonPose@,DigitalRune.Animation.Character.SkeletonPose@)">
      <summary>
            Gets the value of the animation at the specified time.
            </summary>
      <param name="time">The time value on the timeline.</param>
      <param name="defaultSource">
            In: The source value that should be used by the animation if the animation does not have its 
            own source value.
            </param>
      <param name="defaultTarget">
            In: The target value that should be used by the animation if the animation does not have its 
            own target value.
            </param>
      <param name="result">
            Out: The value of the animation at the given time. (The animation returns 
            <paramref name="defaultSource" /> if the animation is <see cref="F:DigitalRune.Animation.AnimationState.Delayed" /> 
            or <see cref="F:DigitalRune.Animation.AnimationState.Stopped" /> at <paramref name="time" />.)
            </param>
      <exception cref="T:DigitalRune.Animation.AnimationException">
            This animation is not frozen. <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Freeze" /> must be called before the animation can 
            be used.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.GetWeight(System.Int32)">
      <summary>
            Gets the weight for a specific bone animation channel.
            </summary>
      <param name="boneIndex">The index of the bone.</param>
      <returns>
            The weight. A value of 0 means that the channel is disabled. A value of 1 means that the
            channel is fully enabled. If the value is less than 1, then animation of the bone is mixed
            with preceding animations. If the animation does contain a bone animation channel for the 
            given bone then 1 (default value) is returned.
            </returns>
    </member>
    <member name="P:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.IsAdditive">
      <summary>
            Gets or sets a value indicating whether the output of the animation is added to the current
            value of the property that is being animated.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.IsBoneAnimated(System.Int32)">
      <summary>
            Determines whether this animation animates the specified bone.
            </summary>
      <param name="boneIndex">The index of the bone.</param>
      <returns>
        <see langword="true" /> if the bone is animated; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.IsFrozen">
      <summary>
            Gets a value indicating whether this animation is frozen.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.SetWeight(System.Int32,System.Single)">
      <summary>
            Sets the weight for a specific bone animation channel.
            </summary>
      <param name="boneIndex">The index of the bone.</param>
      <param name="weight">
            The weight. Use 0 to disable the channel. Use 1 to fully enable the channel. If the weight 
            is less than 1, the animation of the bone is mixed with preceding animations. The default
            weight of all bone animation channels is 1.
            </param>
    </member>
    <member name="P:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.TargetObject">
      <summary>
            Gets or sets the property to which the animation is applied by default.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.TargetProperty">
      <summary>
            Gets or sets the property to which the animation is applied by default.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Traits">
      <summary>
            Gets the traits of the animation values.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Character.SkeletonMapper">
      <summary>
            Controls the bone transforms of a <see cref="T:DigitalRune.Animation.Character.SkeletonPose" /> to resemble the posture of
            another <see cref="T:DigitalRune.Animation.Character.SkeletonPose" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonMapper.#ctor(DigitalRune.Animation.Character.SkeletonPose,DigitalRune.Animation.Character.SkeletonPose)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.SkeletonMapper" /> class.
            </summary>
      <param name="skeletonPoseA">The first skeleton pose. Can be <see langword="null" />.</param>
      <param name="skeletonPoseB">The second skeleton pose. Can be <see langword="null" />.</param>
    </member>
    <member name="P:DigitalRune.Animation.Character.SkeletonMapper.BoneMappers">
      <summary>
            Gets the bone mappers.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonMapper.MapAToB">
      <summary>
            Modifies the second skeleton pose to match the first skeleton pose.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonMapper.MapBToA">
      <summary>
            Modifies the first skeleton pose to match the second skeleton pose.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.SkeletonMapper.RotationOffset">
      <summary>
            Gets or sets the rotation offset between <see cref="P:DigitalRune.Animation.Character.SkeletonMapper.SkeletonPoseA" /> and
            <see cref="P:DigitalRune.Animation.Character.SkeletonMapper.SkeletonPoseB" />. (This a rotation that transforms rotations from model A space
            to model B space.)
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.SkeletonMapper.SkeletonPoseA">
      <summary>
            Gets or sets the first skeleton pose.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.SkeletonMapper.SkeletonPoseB">
      <summary>
            Gets or sets the second skeleton pose.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Character.SkeletonPose">
      <summary>
            Defines an animation pose of a <see cref="T:DigitalRune.Animation.Character.Skeleton" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonPose.#ctor(DigitalRune.Animation.Character.Skeleton)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.SkeletonPose" /> class.
            This constructor is used by the resource pool and derived classes.
            </summary>
      <param name="skeleton">The skeleton.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="skeleton" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonPose.Create(DigitalRune.Animation.Character.Skeleton)">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Animation.Character.SkeletonPose" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <param name="skeleton">The skeleton.</param>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Animation.Character.SkeletonPose" /> class.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="skeleton" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonPose.DigitalRune#Animation#IAnimatableObject#GetAnimatableProperty``1(System.String)">
      <summary>
            Gets the property with given name and type which can be animated.
            </summary>
      <param name="name">The name of the property.</param>
      <typeparam name="T">The type of the property.</typeparam>
      <returns>
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty" /> that has the given name and type; otherwise, 
            <see langword="null" /> if the object does not have an animatable property with this name or 
            type.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonPose.DigitalRune#Animation#IAnimatableObject#GetAnimatedProperties">
      <summary>
            Gets either the properties which are currently animated, or all properties which can be 
            animated. (See remarks.)
            </summary>
      <returns>
            The properties which are currently animated, or the all properties which can be animated.
            (See remarks.)
            </returns>
    </member>
    <member name="P:DigitalRune.Animation.Character.SkeletonPose.DigitalRune#Animation#IAnimatableProperty#AnimationValue">
      <summary>
            Gets the animation value.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.SkeletonPose.DigitalRune#Animation#IAnimatableProperty#BaseValue">
      <summary>
            Gets the base value.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.SkeletonPose.DigitalRune#Animation#IAnimatableProperty#HasBaseValue">
      <summary>
            Gets a value indicating whether this property has a base value.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.SkeletonPose.DigitalRune#Animation#IAnimatableProperty#IsAnimated">
      <summary>
            Gets or sets a value indicating whether this property is animated by the animation system.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.SkeletonPose.DigitalRune#Animation#IAnimatableProperty{DigitalRune#Animation#Character#SkeletonPose}#AnimationValue">
      <summary>
            Gets or sets the animation value.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.SkeletonPose.DigitalRune#Animation#IAnimatableProperty{DigitalRune#Animation#Character#SkeletonPose}#BaseValue">
      <summary>
            Gets the base value.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonPose.GetBonePoseAbsolute(System.Int32)">
      <summary>
            Gets the absolute bone pose of the specified bone.
            </summary>
      <param name="boneIndex">The index of the bone.</param>
      <returns>
            The bone pose transformation of the specified bone relative to model space.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonPose.GetBonePoseRelative(System.Int32)">
      <summary>
            Gets the relative bone pose of the specified bone.
            </summary>
      <param name="boneIndex">The index of the bone.</param>
      <returns>
            The bone pose transformation of the specified bone relative to the parent bone space.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonPose.GetBoneTransform(System.Int32)">
      <summary>
            Gets the bone transform of the specified bone.
            </summary>
      <param name="boneIndex">The index of the bone.</param>
      <returns>
            The bone transform.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonPose.Invalidate">
      <summary>
            Invalidates all cached information.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.SkeletonPose.Name">
      <summary>
            Gets or sets the name of the skeleton pose.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonPose.OnUpdate">
      <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.SkeletonPose.Update" /> is called.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonPose.Recycle">
      <summary>
            Recycles this instance of the <see cref="T:DigitalRune.Animation.Character.SkeletonPose" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonPose.ResetBoneTransform(System.Int32)">
      <summary>
            Resets the bone transforms of the specified bone.
            </summary>
      <param name="boneIndex">The bone index.</param>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonPose.ResetBoneTransforms">
      <summary>
            Resets the bone transforms of all bones in the skeleton.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonPose.SetBoneTransform(System.Int32,DigitalRune.Animation.Character.SrtTransform)">
      <summary>
            Sets the bone transform of the specified bone.
            </summary>
      <param name="boneIndex">The index of the bone.</param>
      <param name="boneTransform">The bone transform.</param>
    </member>
    <member name="P:DigitalRune.Animation.Character.SkeletonPose.Skeleton">
      <summary>
            Gets the skeleton.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.SkeletonPose.SkinningMatrices">
      <summary>
            Gets the skinning matrices. 
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.SkeletonPose.SkinningMatricesXna">
      <summary>
            Gets the skinning matrices. (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.SkeletonPose.Update">
      <summary>
            Updates all bone transformations.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Character.SrtTransform">
      <summary>
            Defines a transformation that scales, rotates and translates (SRT) an object.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.#ctor(DigitalRune.Mathematics.Algebra.Matrix33F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.SrtTransform" /> struct with the given rotation.
            </summary>
      <param name="rotation">The rotation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.#ctor(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.SrtTransform" /> struct with the given rotation
            and translation.
            </summary>
      <param name="rotation">The rotation.</param>
      <param name="translation">The translation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.#ctor(DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.SrtTransform" /> struct with the given rotation.
            </summary>
      <param name="rotation">The rotation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.#ctor(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.SrtTransform" /> struct with the given rotation
            and translation.
            </summary>
      <param name="rotation">The rotation.</param>
      <param name="translation">The translation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.SrtTransform" /> struct with the given scale,
            rotation and translation.
            </summary>
      <param name="scale">The scale.</param>
      <param name="rotation">The rotation.</param>
      <param name="translation">The translation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.SrtTransform" /> struct with the given scale,
            rotation and translation.
            </summary>
      <param name="scale">The scale.</param>
      <param name="rotation">The rotation.</param>
      <param name="translation">The translation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.AreNumericallyEqual(DigitalRune.Animation.Character.SrtTransform,DigitalRune.Animation.Character.SrtTransform)">
      <summary>
            Determines whether two SRT transforms are equal (within a numerical tolerance).
            </summary>
      <param name="srtA">The first transform.</param>
      <param name="srtB">The second transform.</param>
      <returns>
        <see langword="true" /> if the given transforms are numerically equal; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.Equals(DigitalRune.Animation.Character.SrtTransform)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and
            represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.FromMatrix(DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Creates an <see cref="T:DigitalRune.Animation.Character.SrtTransform" /> from a matrix that contains a scale, a rotation, and a
            translation.
            </summary>
      <param name="srtMatrix">The SRT matrix.</param>
      <returns>
            An SRT transform that represents the same transformation as the 4x4-matrix.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.FromMatrix(Microsoft.Xna.Framework.Matrix)">
      <summary>
            Creates an <see cref="T:DigitalRune.Animation.Character.SrtTransform" /> from a matrix that contains a scale, a rotation and 
            a translation. (Only available in the XNA-compatible build.)
            </summary>
      <param name="srtMatrix">The SRT matrix.</param>
      <returns>
            An SRT transform that represents the same transformation as the 4x4-matrix.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.FromPose(DigitalRune.Geometry.Pose)">
      <summary>
            Creates an <see cref="T:DigitalRune.Animation.Character.SrtTransform" /> from a <see cref="T:DigitalRune.Geometry.Pose" />.
            </summary>
      <param name="pose">The pose.</param>
      <returns>
            An <see cref="T:DigitalRune.Animation.Character.SrtTransform" /> that represents the same rotation and translation as
            the <paramref name="pose" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="P:DigitalRune.Animation.Character.SrtTransform.HasRotation">
      <summary>
            Gets a value indicating whether the rotation is not the default rotation.
            (Using a numerical tolerant comparison, see <see cref="T:DigitalRune.Mathematics.Numeric" />.)
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.SrtTransform.HasScale">
      <summary>
            Gets a value indicating whether the scale is not (1, 1, 1). 
            (Using a numerical tolerant comparison, see <see cref="T:DigitalRune.Mathematics.Numeric" />.)
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.SrtTransform.HasTranslation">
      <summary>
            Gets a value indicating whether the translation is not 0.
            (Using a numerical tolerant comparison, see <see cref="T:DigitalRune.Mathematics.Numeric" />.)
            </summary>
    </member>
    <member name="F:DigitalRune.Animation.Character.SrtTransform.Identity">
      <summary>
            An SRT transform with no scale, rotation and translation.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.Interpolate(DigitalRune.Animation.Character.SrtTransform,DigitalRune.Animation.Character.SrtTransform,System.Single)">
      <summary>
            Interpolates two SRT transforms.
            </summary>
      <param name="startTransform">The start transform.</param>
      <param name="endTransform">The end transform.</param>
      <param name="parameter">
            The interpolation parameter. If the value is 0, the <paramref name="startTransform" /> is
            returned. If the value is 1, the <paramref name="endTransform" /> is returned. For values 
            between 0 and 1 an interpolated <see cref="T:DigitalRune.Animation.Character.SrtTransform" /> is returned.
            </param>
      <returns>An interpolated SRT transform.</returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.Interpolate(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@,System.Single,DigitalRune.Animation.Character.SrtTransform@)">
      <summary>
            Interpolates two SRT transforms.
            </summary>
      <param name="startTransform">The start transform.</param>
      <param name="endTransform">The end transform.</param>
      <param name="parameter">
            The interpolation parameter. If the value is 0, the <paramref name="startTransform" /> is
            returned. If the value is 1, the <paramref name="endTransform" /> is returned. For values 
            between 0 and 1 an interpolated <see cref="T:DigitalRune.Animation.Character.SrtTransform" /> is returned.
            </param>
      <param name="result">The interpolation result.</param>
    </member>
    <member name="P:DigitalRune.Animation.Character.SrtTransform.Inverse">
      <summary>
            Gets the inverse of this SRT transform.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.Invert">
      <summary>
            Inverts the SRT transform.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.IsValid(DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Determines whether the specified matrix is a valid SRT matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>
        <see langword="true" /> if the specified matrix is a valid SRT matrix; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.Multiply(DigitalRune.Animation.Character.SrtTransform,DigitalRune.Animation.Character.SrtTransform)">
      <summary>
            Multiplies two SRT transforms.
            </summary>
      <param name="srt1">The first transform.</param>
      <param name="srt2">The second transform.</param>
      <returns>The product of srt1 and srt2: srt1 * srt2.</returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.Multiply(DigitalRune.Animation.Character.SrtTransform,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Multiplies an <see cref="T:DigitalRune.Animation.Character.SrtTransform" /> with a vector.
            </summary>
      <param name="srt">The transform.</param>
      <param name="vector">The vector.</param>
      <returns>The transformed vector.</returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.Multiply(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@)">
      <summary>
            Multiplies two SRT transforms.
            </summary>
      <param name="srt1">In: The first transform.</param>
      <param name="srt2">In: The second transform.</param>
      <param name="result">Out: The product of srt1 and srt2: srt1 * srt2.</param>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.Multiply(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Mathematics.Algebra.Matrix44F@)">
      <summary>
            Multiplies two SRT transforms.
            </summary>
      <param name="srt1">In: The first transform.</param>
      <param name="srt2">In: The second transform.</param>
      <param name="result">Out: The product of srt1 and srt2 as 4 x 4 matrix: srt1 * srt2.</param>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.Multiply(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@,Microsoft.Xna.Framework.Matrix@)">
      <summary>
            Multiplies two SRT transforms. (Only available in the XNA-compatible build.)
            </summary>
      <param name="srt1">In: The first transform.</param>
      <param name="srt2">In: The second transform.</param>
      <param name="result">Out: The product of srt1 and srt2 as 4 x 4 matrix: srt1 * srt2.</param>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.op_Equality(DigitalRune.Animation.Character.SrtTransform,DigitalRune.Animation.Character.SrtTransform)">
      <summary>
            Compares two <see cref="T:DigitalRune.Animation.Character.SrtTransform" />s to determine whether they are the same.
            </summary>
      <param name="srt1">The first transform.</param>
      <param name="srt2">The second transform.</param>
      <returns>
        <see langword="true" /> if the transforms are equal; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.op_Explicit(DigitalRune.Animation.Character.SrtTransform)~DigitalRune.Geometry.Pose">
      <summary>
            Converts an SRT transform to a <see cref="T:DigitalRune.Geometry.Pose" />. (<see cref="F:DigitalRune.Animation.Character.SrtTransform.Scale" /> will be ignored!)
            </summary>
      <param name="srt">The transform.</param>
      <returns>
            A pose that represents the same rotation and translation (ignoring all scalings).
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.op_Implicit(DigitalRune.Animation.Character.SrtTransform)~Microsoft.Xna.Framework.Matrix">
      <summary>
            Converts a SRT transform to a 4x4 transformation matrix (XNA Framework). (Only available in 
            the XNA-compatible build.)
            </summary>
      <param name="srt">The transform.</param>
      <returns>
            A 4x4-matrix that represents the same transformation as the SRT transform.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.op_Implicit(DigitalRune.Animation.Character.SrtTransform)~DigitalRune.Mathematics.Algebra.Matrix44F">
      <summary>
            Converts an SRT transform to a 4x4 transformation matrix.
            </summary>
      <param name="srt">The transform.</param>
      <returns>
            A 4x4-matrix that represents the same transformation as the SRT transform.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.op_Implicit(DigitalRune.Geometry.Pose)~DigitalRune.Animation.Character.SrtTransform">
      <summary>
            Converts a <see cref="T:DigitalRune.Geometry.Pose" /> to an SRT transform.
            </summary>
      <param name="pose">The pose.</param>
      <returns>
            An <see cref="T:DigitalRune.Animation.Character.SrtTransform" /> that represents the same rotation and translation as
            the <paramref name="pose" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.op_Inequality(DigitalRune.Animation.Character.SrtTransform,DigitalRune.Animation.Character.SrtTransform)">
      <summary>
            Compares two <see cref="T:DigitalRune.Animation.Character.SrtTransform" />s to determine whether they are the different.
            </summary>
      <param name="srt1">The first transform.</param>
      <param name="srt2">The second transform.</param>
      <returns>
        <see langword="true" /> if the transforms are different; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.op_Multiply(DigitalRune.Animation.Character.SrtTransform,DigitalRune.Animation.Character.SrtTransform)">
      <summary>
            Multiplies two SRT transforms.
            </summary>
      <param name="srt1">The first transform.</param>
      <param name="srt2">The second transform.</param>
      <returns>The product of srt1 and srt2: srt1 * srt2.</returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.op_Multiply(DigitalRune.Animation.Character.SrtTransform,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Multiplies an <see cref="T:DigitalRune.Animation.Character.SrtTransform" /> with a vector.
            </summary>
      <param name="srt">The SRT transform.</param>
      <param name="vector">The vector.</param>
      <returns>The transformed vector.</returns>
    </member>
    <member name="F:DigitalRune.Animation.Character.SrtTransform.Rotation">
      <summary>
            The rotation.
            </summary>
    </member>
    <member name="F:DigitalRune.Animation.Character.SrtTransform.Scale">
      <summary>
            The scale.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.ToLocalDirection(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Converts a direction vector from parent space to local space.
            </summary>
      <param name="worldDirection">The direction in parent space.</param>
      <returns>The direction in local space.</returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.ToLocalPosition(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Converts a position vector from parent space to local space.
            </summary>
      <param name="worldPosition">The position in parent space.</param>
      <returns>The position in local space.</returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.ToMatrix44F">
      <summary>
            Converts this SRT transform to a 4x4 transformation matrix.
            </summary>
      <returns>
            A 4x4-matrix that represents the same transformation as the SRT transform.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.ToParentDirection(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Converts a direction vector from local space to parent space.
            </summary>
      <param name="localDirection">The direction in local space.</param>
      <returns>The direction in parent space.</returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.ToParentPosition(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Converts a position vector from local space to parent space.
            </summary>
      <param name="localPosition">The position in local space.</param>
      <returns>The position in parent space.</returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.ToPose">
      <summary>
            Creates a <see cref="T:DigitalRune.Geometry.Pose" /> from an <see cref="T:DigitalRune.Animation.Character.SrtTransform" /> (<see cref="F:DigitalRune.Animation.Character.SrtTransform.Scale" />
            will be ignored!).
            </summary>
      <returns>
            A pose that represents the same rotation and translation (ignoring all scalings).
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.ToString">
      <summary>
            Returns the string representation of this SRT transform.
            </summary>
      <returns>
            The string representation of this SRT transform.
            </returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of this SRT transform using the specified culture-specific format
            information.
            </summary>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>The string representation of this SRT transform.</returns>
    </member>
    <member name="M:DigitalRune.Animation.Character.SrtTransform.ToXna">
      <summary>
            Converts an SRT transform to a 4x4 transformation matrix (XNA Framework). (Only available in
            the XNA-compatible build.)
            </summary>
      <returns>
            An 4x4-matrix that represents the same transformation as the SRT transform.
            </returns>
    </member>
    <member name="F:DigitalRune.Animation.Character.SrtTransform.Translation">
      <summary>
            The translation.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Character.TwoJointIKSolver">
      <summary>
            Modifies a two-bone chain to reach a certain target.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.TwoJointIKSolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.TwoJointIKSolver" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.TwoJointIKSolver.HingeAxis">
      <summary>
            Gets or sets the hinge axis relative to the root bone.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.TwoJointIKSolver.HingeBoneIndex">
      <summary>
            Gets or sets the index of the hinge bone.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.TwoJointIKSolver.MaxHingeAngle">
      <summary>
            Gets or sets the max hinge angle.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.TwoJointIKSolver.MinHingeAngle">
      <summary>
            Gets or sets the min hinge angle.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.TwoJointIKSolver.OnInvalidate">
      <summary>
            Called when the <see cref="T:DigitalRune.Animation.Character.SkeletonPose" /> was exchanged.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.TwoJointIKSolver.OnSolve(System.Single)">
      <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.IKSolver.Solve(System.Single)" /> is called.
            </summary>
      <param name="deltaTime">The current time step (in seconds).</param>
    </member>
    <member name="P:DigitalRune.Animation.Character.TwoJointIKSolver.RootBoneIndex">
      <summary>
            Gets or sets the index of the root bone.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.TwoJointIKSolver.TipBoneIndex">
      <summary>
            Gets or sets the index of the tip bone that determines the end of the chain.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.TwoJointIKSolver.TipBoneOrientation">
      <summary>
            Gets or sets the desired absolute tip bone rotation.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.TwoJointIKSolver.TipOffset">
      <summary>
            Gets or sets the tip offset relative to the tip bone.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Character.UpperBackBoneMapper">
      <summary>
            Maps the orientation of a spine bone in the upper back of a character.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.UpperBackBoneMapper.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.UpperBackBoneMapper" /> class.
            </summary>
      <param name="spineBoneIndexA">The spine bone index in the first skeleton.</param>
      <param name="neckBoneIndexA">The neck bone index in the first skeleton.</param>
      <param name="leftShoulderBoneIndexA">The left shoulder bone index in the first skeleton.</param>
      <param name="rightShoulderBoneIndexA">The right shoulder bone index in the first skeleton.</param>
      <param name="spineBoneIndexB">The spine bone in the second skeleton.</param>
      <param name="neckBoneIndexB">The neck bone index in the second skeleton.</param>
      <param name="leftShoulderBoneIndexB">The left shoulder bone index in the second skeleton.</param>
      <param name="rightShoulderBoneIndexB">The right shoulder bone index in the second skeleton.</param>
    </member>
    <member name="P:DigitalRune.Animation.Character.UpperBackBoneMapper.LeftShoulderBoneIndexA">
      <summary>
            Gets or sets the left shoulder bone index for the first skeleton.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.UpperBackBoneMapper.LeftShoulderBoneIndexB">
      <summary>
            Gets or sets the left shoulder bone index for the second skeleton.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.UpperBackBoneMapper.NeckBoneIndexA">
      <summary>
            Gets or sets the neck bone index for the first skeleton.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.UpperBackBoneMapper.NeckBoneIndexB">
      <summary>
            Gets or sets the neck bone index for the second skeleton.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.UpperBackBoneMapper.OnInvalidate">
      <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.Invalidate" /> is called.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.UpperBackBoneMapper.OnMapAToB">
      <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.MapAToB" /> was called.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Character.UpperBackBoneMapper.OnMapBToA">
      <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.MapBToA" /> was called.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.UpperBackBoneMapper.RightShoulderBoneIndexA">
      <summary>
            Gets or sets the right shoulder bone index for the first skeleton.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.UpperBackBoneMapper.RightShoulderBoneIndexB">
      <summary>
            Gets or sets the right shoulder bone index for the second skeleton.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.UpperBackBoneMapper.SpineBoneIndexA">
      <summary>
            Gets or sets the spine bone index for the first skeleton.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Character.UpperBackBoneMapper.SpineBoneIndexB">
      <summary>
            Gets or sets the spine bone index for the second skeleton.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Easing.BackEase">
      <summary>
            Represents an easing function that moves slightly in the opposite direction but then starts
            to accelerate towards the target value.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.BackEase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Easing.BackEase" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Easing.BackEase.Amplitude">
      <summary>
            Gets or sets the amplitude of the backwards motion.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.BackEase.EaseIn(System.Single)">
      <summary>
            Evaluates the easing function.
            </summary>
      <param name="normalizedTime">The normalized time.</param>
      <returns>The current progress of the transition.</returns>
    </member>
    <member name="T:DigitalRune.Animation.Easing.BounceEase">
      <summary>
            Represents an easing function that creates a bouncing effect.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.BounceEase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Easing.BounceEase" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Easing.BounceEase.Bounces">
      <summary>
            Gets or sets the number of bounces before the final bounce to the target value.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Easing.BounceEase.Bounciness">
      <summary>
            Gets or sets the bounciness of the animation.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.BounceEase.EaseIn(System.Single)">
      <summary>
            Evaluates the easing function.
            </summary>
      <param name="normalizedTime">The normalized time.</param>
      <returns>The current progress of the transition.</returns>
    </member>
    <member name="T:DigitalRune.Animation.Easing.CircleEase">
      <summary>
            Represents an easing function that accelerates towards the target value using a circular 
            function.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.CircleEase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Easing.CircleEase" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.CircleEase.EaseIn(System.Single)">
      <summary>
            Evaluates the easing function.
            </summary>
      <param name="normalizedTime">The normalized time.</param>
      <returns>The current progress of the transition.</returns>
    </member>
    <member name="T:DigitalRune.Animation.Easing.CubicEase">
      <summary>
            Represents an easing function that accelerates towards the target value using a cubic 
            function f(t)=t<sup>3</sup>.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.CubicEase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Easing.CubicEase" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.CubicEase.EaseIn(System.Single)">
      <summary>
            Evaluates the easing function.
            </summary>
      <param name="normalizedTime">The normalized time.</param>
      <returns>The current progress of the transition.</returns>
    </member>
    <member name="T:DigitalRune.Animation.Easing.EasingFunction">
      <summary>
            Provides the base implementation for all easing functions.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.EasingFunction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Easing.EasingFunction" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.EasingFunction.Ease(System.Single)">
      <summary>
            Determines the current progress of a transition.
            </summary>
      <param name="normalizedTime">
            The normalized time of the transition. (0 represents the start and 1 represents the end of
            the transition.)
            </param>
      <returns>
            The current progress of the transition. (0 represents the start and 1
            represents the end of the transition.)
            </returns>
      <exception cref="T:DigitalRune.Animation.InvalidAnimationException">
            Invalid enumeration value set in property <see cref="P:DigitalRune.Animation.Easing.EasingFunction.Mode" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Easing.EasingFunction.EaseIn(System.Single)">
      <summary>
            Evaluates the easing function.
            </summary>
      <param name="normalizedTime">The normalized time.</param>
      <returns>The current progress of the transition.</returns>
    </member>
    <member name="P:DigitalRune.Animation.Easing.EasingFunction.Mode">
      <summary>
            Gets or sets a value that indicates how the easing function interpolates.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Easing.EasingMode">
      <summary>
            Defines how the easing functions interpolate.
            </summary>
    </member>
    <member name="F:DigitalRune.Animation.Easing.EasingMode.EaseIn">
      <summary>
             The interpolation follows the formula of the easing function.
            </summary>
    </member>
    <member name="F:DigitalRune.Animation.Easing.EasingMode.EaseOut">
      <summary>
            The interpolation follows the reverse of the formula of the easing function.
            </summary>
    </member>
    <member name="F:DigitalRune.Animation.Easing.EasingMode.EaseInOut">
      <summary>
            The interpolation uses <see cref="F:DigitalRune.Animation.Easing.EasingMode.EaseIn" /> for the first half of the interpolation and
            <see cref="F:DigitalRune.Animation.Easing.EasingMode.EaseOut" /> for the second half.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Easing.ElasticEase">
      <summary>
            Represents an easing function that models a spring that starts to oscillate until it reaches
            the target value.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.ElasticEase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Easing.ElasticEase" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.ElasticEase.EaseIn(System.Single)">
      <summary>
            Evaluates the easing function.
            </summary>
      <param name="normalizedTime">The normalized time.</param>
      <returns>The current progress of the transition.</returns>
    </member>
    <member name="P:DigitalRune.Animation.Easing.ElasticEase.Oscillations">
      <summary>
            Gets or sets the number of oscillations periods.
            </summary>
    </member>
    <member name="P:DigitalRune.Animation.Easing.ElasticEase.Springiness">
      <summary>
            Gets or sets the stiffness of the spring.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Easing.ExponentialEase">
      <summary>
            Represents an easing function that accelerates/decelerates towards the target value using an 
            exponential function.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.ExponentialEase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Easing.ExponentialEase" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.ExponentialEase.EaseIn(System.Single)">
      <summary>
            Evaluates the easing function.
            </summary>
      <param name="normalizedTime">The normalized time.</param>
      <returns>The current progress of the transition.</returns>
    </member>
    <member name="P:DigitalRune.Animation.Easing.ExponentialEase.Exponent">
      <summary>
            Gets or sets the exponent of the easing function.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Easing.HermiteEase">
      <summary>
            Represents an easing function based on cubic Hermite interpolation (also known as "smooth 
            step").
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.HermiteEase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Easing.HermiteEase" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.HermiteEase.EaseIn(System.Single)">
      <summary>
            Evaluates the easing function.
            </summary>
      <param name="normalizedTime">The normalized time.</param>
      <returns>The current progress of the transition.</returns>
    </member>
    <member name="T:DigitalRune.Animation.Easing.IEasingFunction">
      <summary>
            Defines a function that controls the pace of a transition.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.IEasingFunction.Ease(System.Single)">
      <summary>
            Determines the current progress of a transition.
            </summary>
      <param name="normalizedTime">
            The normalized time of the transition. (0 represents the start and 1
            represents the end of the transition.)
            </param>
      <returns>
            The current progress of the transition. (0 represents the start and 1
            represents the end of the transition.)
            </returns>
    </member>
    <member name="T:DigitalRune.Animation.Easing.LogarithmicEase">
      <summary>
            Represents an easing function that decelerates/accelerates towards the target value using a
            logarithmic function.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.LogarithmicEase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Easing.LogarithmicEase" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.Easing.LogarithmicEase.Base">
      <summary>
            Gets or sets the base of the logarithm.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.LogarithmicEase.EaseIn(System.Single)">
      <summary>
            Evaluates the easing function.
            </summary>
      <param name="normalizedTime">The normalized time.</param>
      <returns>The current progress of the transition.</returns>
    </member>
    <member name="T:DigitalRune.Animation.Easing.PowerEase">
      <summary>
            Represents an easing function that accelerates/decelerates towards the target value using the
            function f(t)=t<sup>p</sup>.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.PowerEase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Easing.PowerEase" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.PowerEase.EaseIn(System.Single)">
      <summary>
            Evaluates the easing function.
            </summary>
      <param name="normalizedTime">The normalized time.</param>
      <returns>The current progress of the transition.</returns>
    </member>
    <member name="P:DigitalRune.Animation.Easing.PowerEase.Power">
      <summary>
            Gets or sets the exponent of the easing function.
            </summary>
    </member>
    <member name="T:DigitalRune.Animation.Easing.QuadraticEase">
      <summary>
            Represents an easing function that accelerates towards the target value using the quadratic
            function f(t)=t<sup>2</sup>.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.QuadraticEase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Easing.QuadraticEase" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.QuadraticEase.EaseIn(System.Single)">
      <summary>
            Evaluates the easing function.
            </summary>
      <param name="normalizedTime">The normalized time.</param>
      <returns>The current progress of the transition.</returns>
    </member>
    <member name="T:DigitalRune.Animation.Easing.QuarticEase">
      <summary>
            Represents an easing function that accelerates towards the target value using the function 
            f(t)=t<sup>4</sup>.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.QuarticEase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Easing.QuarticEase" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.QuarticEase.EaseIn(System.Single)">
      <summary>
            Evaluates the easing function.
            </summary>
      <param name="normalizedTime">The normalized time.</param>
      <returns>The current progress of the transition.</returns>
    </member>
    <member name="T:DigitalRune.Animation.Easing.QuinticEase">
      <summary>
            Represents an easing function that accelerates towards the target value using the function 
            f(t)=t<sup>5</sup>.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.QuinticEase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Easing.QuinticEase" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.QuinticEase.EaseIn(System.Single)">
      <summary>
            Evaluates the easing function.
            </summary>
      <param name="normalizedTime">The normalized time.</param>
      <returns>The current progress of the transition.</returns>
    </member>
    <member name="T:DigitalRune.Animation.Easing.SineEase">
      <summary>
            Represents an easing function that accelerates towards the target value using a sine 
            function.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.SineEase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Easing.SineEase" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.Easing.SineEase.EaseIn(System.Single)">
      <summary>
            Evaluates the easing function.
            </summary>
      <param name="normalizedTime">The normalized time.</param>
      <returns>The current progress of the transition.</returns>
    </member>
    <member name="T:DigitalRune.Animation.Traits.AvatarExpressionTraits">
      <summary>
            Describes the properties of an <see cref="T:Microsoft.Xna.Framework.GamerServices.AvatarExpression" />. 
            (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.AvatarExpressionTraits.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Traits.AvatarExpressionTraits" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.AvatarExpressionTraits.Add(Microsoft.Xna.Framework.GamerServices.AvatarExpression@,Microsoft.Xna.Framework.GamerServices.AvatarExpression@,Microsoft.Xna.Framework.GamerServices.AvatarExpression@)">
      <summary>
            Adds the given animation values.
            </summary>
      <param name="value0">In: The first value.</param>
      <param name="value1">In: The second value.</param>
      <param name="result">
            Out: The sum <paramref name="value0" /> + <paramref name="value1" />.
            </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:Microsoft.Xna.Framework.GamerServices.AvatarExpression" />s cannot be added.</exception>
    </member>
    <member name="M:DigitalRune.Animation.Traits.AvatarExpressionTraits.BeginBlend(Microsoft.Xna.Framework.GamerServices.AvatarExpression@)">
      <summary>
            Begins the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">Out: The start value of the blend operation.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:Microsoft.Xna.Framework.GamerServices.AvatarExpression" />s cannot be blended.</exception>
    </member>
    <member name="M:DigitalRune.Animation.Traits.AvatarExpressionTraits.BlendNext(Microsoft.Xna.Framework.GamerServices.AvatarExpression@,Microsoft.Xna.Framework.GamerServices.AvatarExpression@,System.Single)">
      <summary>
            Blends the given animation value to the current value.
            </summary>
      <param name="value">
            In/Out: The current animation value. (The intermediate result of the blend operation).
            </param>
      <param name="nextValue">
            In: The next animation value which should be blended to <paramref name="value" />.
            </param>
      <param name="normalizedWeight">
            The normalized weight of <paramref name="nextValue" />. ('Normalized' means that the sum of 
            the animation weights need to be 1.)
            </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:Microsoft.Xna.Framework.GamerServices.AvatarExpression" />s cannot be blended.</exception>
    </member>
    <member name="M:DigitalRune.Animation.Traits.AvatarExpressionTraits.Copy(Microsoft.Xna.Framework.GamerServices.AvatarExpression@,Microsoft.Xna.Framework.GamerServices.AvatarExpression@)">
      <summary>
            Copies the specified animation value.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">Out: The target value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.AvatarExpressionTraits.Create(Microsoft.Xna.Framework.GamerServices.AvatarExpression@,Microsoft.Xna.Framework.GamerServices.AvatarExpression@)">
      <summary>
            Creates an animation value. (If the animation value is a heap object, then method reuses any
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <param name="reference">
            In: A reference value. This value serves as a reference for allocating a new value of the 
            same type. For example, if <paramref name="value" /> needs to be initialized with a certain
            settings, the settings can be copied from <paramref name="reference" />.
            </param>
      <param name="value">Out: A new animation value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.AvatarExpressionTraits.EndBlend(Microsoft.Xna.Framework.GamerServices.AvatarExpression@)">
      <summary>
            Finalizes the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">
            In: The current animation value. (The intermediate result of the blend operation.)<br />
            Out: The result of the blend operation.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.AvatarExpressionTraits.Interpolate(Microsoft.Xna.Framework.GamerServices.AvatarExpression@,Microsoft.Xna.Framework.GamerServices.AvatarExpression@,System.Single,Microsoft.Xna.Framework.GamerServices.AvatarExpression@)">
      <summary>
            Performs a linear interpolation between two animation values.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">In: The target value.</param>
      <param name="parameter">
            The interpolation parameter; also known as <i>interpolation factor</i> or <i>weight of the 
            target value</i>.    
            </param>
      <param name="result">Out: The result of the interpolation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.AvatarExpressionTraits.Invert(Microsoft.Xna.Framework.GamerServices.AvatarExpression@,Microsoft.Xna.Framework.GamerServices.AvatarExpression@)">
      <summary>
            Gets the inverse of an animation value.
            </summary>
      <param name="value">In: The animation value.</param>
      <param name="inverse">Out: The inverse of <paramref name="value" />.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:Microsoft.Xna.Framework.GamerServices.AvatarExpression" /> does not have an inverse.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Traits.AvatarExpressionTraits.Multiply(Microsoft.Xna.Framework.GamerServices.AvatarExpression@,System.Int32,Microsoft.Xna.Framework.GamerServices.AvatarExpression@)">
      <summary>
            Multiplies an animation value by a given factor.
            </summary>
      <param name="value">In: The value.</param>
      <param name="factor">The factor.</param>
      <param name="result">
            Out: The product of <paramref name="value" /> and <paramref name="factor" />.
            </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:Microsoft.Xna.Framework.GamerServices.AvatarExpression" />s cannot be multiplied.</exception>
    </member>
    <member name="M:DigitalRune.Animation.Traits.AvatarExpressionTraits.Recycle(Microsoft.Xna.Framework.GamerServices.AvatarExpression@)">
      <summary>
            Recycles an animation value.
            </summary>
      <param name="value">In/Out: The animation value to be recycled.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.AvatarExpressionTraits.Reset(DigitalRune.Animation.IAnimatableProperty{Microsoft.Xna.Framework.GamerServices.AvatarExpression})">
      <summary>
            Resets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="property">The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.AvatarExpressionTraits.Set(Microsoft.Xna.Framework.GamerServices.AvatarExpression@,DigitalRune.Animation.IAnimatableProperty{Microsoft.Xna.Framework.GamerServices.AvatarExpression})">
      <summary>
            Sets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="value">In: The value to write to <paramref name="property" />.</param>
      <param name="property">
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" /> that stores the animation value.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.AvatarExpressionTraits.SetIdentity(Microsoft.Xna.Framework.GamerServices.AvatarExpression@)">
      <summary>
            Gets the identity.
            </summary>
      <param name="identity">Out: The identity.</param>
    </member>
    <member name="T:DigitalRune.Animation.Traits.ColorTraits">
      <summary>
            Describes the properties of a <see cref="T:Microsoft.Xna.Framework.Color" />. 
            (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.ColorTraits.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Traits.ColorTraits" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.ColorTraits.Add(Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@)">
      <summary>
            Adds the given animation values.
            </summary>
      <param name="value0">In: The first value.</param>
      <param name="value1">In: The second value.</param>
      <param name="result">
            Out: The sum <paramref name="value0" /> + <paramref name="value1" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.ColorTraits.BeginBlend(Microsoft.Xna.Framework.Color@)">
      <summary>
            Begins the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">Out: The start value of the blend operation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.ColorTraits.BlendNext(Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@,System.Single)">
      <summary>
            Blends the given animation value to the current value.
            </summary>
      <param name="value">
            In/Out: The current animation value. (The intermediate result of the blend operation).
            </param>
      <param name="nextValue">
            In: The next animation value which should be blended to <paramref name="value" />.
            </param>
      <param name="normalizedWeight">
            The normalized weight of <paramref name="nextValue" />. ('Normalized' means that the sum of 
            the animation weights need to be 1.)
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.ColorTraits.Copy(Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@)">
      <summary>
            Copies the specified animation value.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">Out: The target value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.ColorTraits.Create(Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@)">
      <summary>
            Creates an animation value. (If the animation value is a heap object, then method reuses any
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <param name="reference">
            In: A reference value. This value serves as a reference for allocating a new value of the 
            same type. For example, if <paramref name="value" /> needs to be initialized with a certain
            settings, the settings can be copied from <paramref name="reference" />.
            </param>
      <param name="value">Out: A new animation value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.ColorTraits.EndBlend(Microsoft.Xna.Framework.Color@)">
      <summary>
            Finalizes the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">
            In: The current animation value. (The intermediate result of the blend operation.)<br />
            Out: The result of the blend operation.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.ColorTraits.Interpolate(Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@,System.Single,Microsoft.Xna.Framework.Color@)">
      <summary>
            Performs a linear interpolation between two animation values.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">In: The target value.</param>
      <param name="parameter">
            The interpolation parameter; also known as <i>interpolation factor</i> or <i>weight of the 
            target value</i>.    
            </param>
      <param name="result">Out: The result of the interpolation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.ColorTraits.Invert(Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@)">
      <summary>
            Gets the inverse of an animation value.
            </summary>
      <param name="value">In: The animation value.</param>
      <param name="inverse">Out: The inverse of <paramref name="value" />.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:Microsoft.Xna.Framework.Color" /> does not have an inverse.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Traits.ColorTraits.Multiply(Microsoft.Xna.Framework.Color@,System.Int32,Microsoft.Xna.Framework.Color@)">
      <summary>
            Multiplies an animation value by a given factor.
            </summary>
      <param name="value">In: The value.</param>
      <param name="factor">The factor.</param>
      <param name="result">
            Out: The product of <paramref name="value" /> and <paramref name="factor" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.ColorTraits.Recycle(Microsoft.Xna.Framework.Color@)">
      <summary>
            Recycles an animation value.
            </summary>
      <param name="value">In/Out: The animation value to be recycled.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.ColorTraits.Reset(DigitalRune.Animation.IAnimatableProperty{Microsoft.Xna.Framework.Color})">
      <summary>
            Resets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="property">The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.ColorTraits.Set(Microsoft.Xna.Framework.Color@,DigitalRune.Animation.IAnimatableProperty{Microsoft.Xna.Framework.Color})">
      <summary>
            Sets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="value">In: The value to write to <paramref name="property" />.</param>
      <param name="property">
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" /> that stores the animation value.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.ColorTraits.SetIdentity(Microsoft.Xna.Framework.Color@)">
      <summary>
            Gets the identity.
            </summary>
      <param name="identity">Out: The identity.</param>
    </member>
    <member name="T:DigitalRune.Animation.Traits.IAnimationValueTraits`1">
      <summary>
            Describes the properties of an animation value and defines operations that can be applied to
            animation values.
            </summary>
      <typeparam name="T">The type of the animation value.</typeparam>
    </member>
    <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Add(`0@,`0@,`0@)">
      <summary>
            Adds the given animation values.
            </summary>
      <param name="value0">In: The first value.</param>
      <param name="value1">In: The second value.</param>
      <param name="result">
            Out: The sum <paramref name="value0" /> + <paramref name="value1" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.BeginBlend(`0@)">
      <summary>
            Begins the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">Out: The start value of the blend operation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.BlendNext(`0@,`0@,System.Single)">
      <summary>
            Blends the given animation value to the current value.
            </summary>
      <param name="value">
            In/Out: The current animation value. (The intermediate result of the blend operation).
            </param>
      <param name="nextValue">
            In: The next animation value which should be blended to <paramref name="value" />.
            </param>
      <param name="normalizedWeight">
            The normalized weight of <paramref name="nextValue" />. ('Normalized' means that the sum of 
            the animation weights need to be 1.)
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Copy(`0@,`0@)">
      <summary>
            Copies the specified animation value.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">Out: The target value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Create(`0@,`0@)">
      <summary>
            Creates an animation value. (If the animation value is a heap object, then method reuses any
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <param name="reference">
            In: A reference value. This value serves as a reference for allocating a new value of the 
            same type. For example, if <paramref name="value" /> needs to be initialized with a certain
            settings, the settings can be copied from <paramref name="reference" />.
            </param>
      <param name="value">Out: A new animation value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.EndBlend(`0@)">
      <summary>
            Finalizes the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">
            In: The current animation value. (The intermediate result of the blend operation.)<br />
            Out: The result of the blend operation.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Interpolate(`0@,`0@,System.Single,`0@)">
      <summary>
            Performs a linear interpolation between two animation values.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">In: The target value.</param>
      <param name="parameter">
            The interpolation parameter; also known as <i>interpolation factor</i> or <i>weight of the 
            target value</i>.    
            </param>
      <param name="result">Out: The result of the interpolation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Invert(`0@,`0@)">
      <summary>
            Gets the inverse of an animation value.
            </summary>
      <param name="value">In: The animation value.</param>
      <param name="inverse">Out: The inverse of <paramref name="value" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Multiply(`0@,System.Int32,`0@)">
      <summary>
            Multiplies an animation value by a given factor.
            </summary>
      <param name="value">In: The value.</param>
      <param name="factor">The factor.</param>
      <param name="result">
            Out: The product of <paramref name="value" /> and <paramref name="factor" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Recycle(`0@)">
      <summary>
            Recycles an animation value.
            </summary>
      <param name="value">In/Out: The animation value to be recycled.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Reset(DigitalRune.Animation.IAnimatableProperty{`0})">
      <summary>
            Resets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="property">The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Set(`0@,DigitalRune.Animation.IAnimatableProperty{`0})">
      <summary>
            Sets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="value">In: The value to write to <paramref name="property" />.</param>
      <param name="property">
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" /> that stores the animation value.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.SetIdentity(`0@)">
      <summary>
            Gets the identity.
            </summary>
      <param name="identity">Out: The identity.</param>
    </member>
    <member name="T:DigitalRune.Animation.Traits.QuaternionFTraits">
      <summary>
            Describes the properties of a <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Traits.QuaternionFTraits" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.Add(DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@)">
      <summary>
            Adds the given animation values.
            </summary>
      <param name="value0">In: The first value.</param>
      <param name="value1">In: The second value.</param>
      <param name="result">
            Out: The sum <paramref name="value0" /> + <paramref name="value1" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.BeginBlend(DigitalRune.Mathematics.Algebra.QuaternionF@)">
      <summary>
            Begins the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">Out: The start value of the blend operation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.BlendNext(DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@,System.Single)">
      <summary>
            Blends the given animation value to the current value.
            </summary>
      <param name="value">
            In/Out: The current animation value. (The intermediate result of the blend operation).
            </param>
      <param name="nextValue">
            In: The next animation value which should be blended to <paramref name="value" />.
            </param>
      <param name="normalizedWeight">
            The normalized weight of <paramref name="nextValue" />. ('Normalized' means that the sum of 
            the animation weights need to be 1.)
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.Copy(DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@)">
      <summary>
            Copies the specified animation value.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">Out: The target value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.Create(DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@)">
      <summary>
            Creates an animation value. (If the animation value is a heap object, then method reuses any
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <param name="reference">
            In: A reference value. This value serves as a reference for allocating a new value of the 
            same type. For example, if <paramref name="value" /> needs to be initialized with a certain
            settings, the settings can be copied from <paramref name="reference" />.
            </param>
      <param name="value">Out: A new animation value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.EndBlend(DigitalRune.Mathematics.Algebra.QuaternionF@)">
      <summary>
            Finalizes the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">
            In: The current animation value. (The intermediate result of the blend operation.)<br />
            Out: The result of the blend operation.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.Interpolate(DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@,System.Single,DigitalRune.Mathematics.Algebra.QuaternionF@)">
      <summary>
            Performs a linear interpolation between two animation values.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">In: The target value.</param>
      <param name="parameter">
            The interpolation parameter; also known as <i>interpolation factor</i> or <i>weight of the 
            target value</i>.    
            </param>
      <param name="result">Out: The result of the interpolation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.Invert(DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@)">
      <summary>
            Gets the inverse of an animation value.
            </summary>
      <param name="value">In: The animation value.</param>
      <param name="inverse">Out: The inverse of <paramref name="value" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.Multiply(DigitalRune.Mathematics.Algebra.QuaternionF@,System.Int32,DigitalRune.Mathematics.Algebra.QuaternionF@)">
      <summary>
            Multiplies an animation value by a given factor.
            </summary>
      <param name="value">In: The value.</param>
      <param name="factor">The factor.</param>
      <param name="result">
            Out: The product of <paramref name="value" /> and <paramref name="factor" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.Recycle(DigitalRune.Mathematics.Algebra.QuaternionF@)">
      <summary>
            Recycles an animation value.
            </summary>
      <param name="value">In/Out: The animation value to be recycled.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.Reset(DigitalRune.Animation.IAnimatableProperty{DigitalRune.Mathematics.Algebra.QuaternionF})">
      <summary>
            Resets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="property">The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.Set(DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Animation.IAnimatableProperty{DigitalRune.Mathematics.Algebra.QuaternionF})">
      <summary>
            Sets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="value">In: The value to write to <paramref name="property" />.</param>
      <param name="property">
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" /> that stores the animation value.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.SetIdentity(DigitalRune.Mathematics.Algebra.QuaternionF@)">
      <summary>
            Gets the identity.
            </summary>
      <param name="identity">Out: The identity.</param>
    </member>
    <member name="T:DigitalRune.Animation.Traits.QuaternionTraits">
      <summary>
            Describes the properties of a <see cref="T:Microsoft.Xna.Framework.Quaternion" />.
            (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Traits.QuaternionTraits" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.Add(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>
            Adds the given animation values.
            </summary>
      <param name="value0">In: The first value.</param>
      <param name="value1">In: The second value.</param>
      <param name="result">
            Out: The sum <paramref name="value0" /> + <paramref name="value1" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.BeginBlend(Microsoft.Xna.Framework.Quaternion@)">
      <summary>
            Begins the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">Out: The start value of the blend operation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.BlendNext(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single)">
      <summary>
            Blends the given animation value to the current value.
            </summary>
      <param name="value">
            In/Out: The current animation value. (The intermediate result of the blend operation).
            </param>
      <param name="nextValue">
            In: The next animation value which should be blended to <paramref name="value" />.
            </param>
      <param name="normalizedWeight">
            The normalized weight of <paramref name="nextValue" />. ('Normalized' means that the sum of 
            the animation weights need to be 1.)
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.Copy(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>
            Copies the specified animation value.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">Out: The target value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.Create(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>
            Creates an animation value. (If the animation value is a heap object, then method reuses any
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <param name="reference">
            In: A reference value. This value serves as a reference for allocating a new value of the 
            same type. For example, if <paramref name="value" /> needs to be initialized with a certain
            settings, the settings can be copied from <paramref name="reference" />.
            </param>
      <param name="value">Out: A new animation value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.EndBlend(Microsoft.Xna.Framework.Quaternion@)">
      <summary>
            Finalizes the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">
            In: The current animation value. (The intermediate result of the blend operation.)<br />
            Out: The result of the blend operation.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.Interpolate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
      <summary>
            Performs a linear interpolation between two animation values.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">In: The target value.</param>
      <param name="parameter">
            The interpolation parameter; also known as <i>interpolation factor</i> or <i>weight of the 
            target value</i>.    
            </param>
      <param name="result">Out: The result of the interpolation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.Invert(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>
            Gets the inverse of an animation value.
            </summary>
      <param name="value">In: The animation value.</param>
      <param name="inverse">Out: The inverse of <paramref name="value" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.Multiply(Microsoft.Xna.Framework.Quaternion@,System.Int32,Microsoft.Xna.Framework.Quaternion@)">
      <summary>
            Multiplies an animation value by a given factor.
            </summary>
      <param name="value">In: The value.</param>
      <param name="factor">The factor.</param>
      <param name="result">
            Out: The product of <paramref name="value" /> and <paramref name="factor" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.Recycle(Microsoft.Xna.Framework.Quaternion@)">
      <summary>
            Recycles an animation value.
            </summary>
      <param name="value">In/Out: The animation value to be recycled.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.Reset(DigitalRune.Animation.IAnimatableProperty{Microsoft.Xna.Framework.Quaternion})">
      <summary>
            Resets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="property">The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.Set(Microsoft.Xna.Framework.Quaternion@,DigitalRune.Animation.IAnimatableProperty{Microsoft.Xna.Framework.Quaternion})">
      <summary>
            Sets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="value">In: The value to write to <paramref name="property" />.</param>
      <param name="property">
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" /> that stores the animation value.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.SetIdentity(Microsoft.Xna.Framework.Quaternion@)">
      <summary>
            Gets the identity.
            </summary>
      <param name="identity">Out: The identity.</param>
    </member>
    <member name="T:DigitalRune.Animation.Traits.SingleTraits">
      <summary>
            Describes the properties of a <see cref="T:System.Single" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SingleTraits.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Traits.SingleTraits" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SingleTraits.Add(System.Single@,System.Single@,System.Single@)">
      <summary>
            Adds the given animation values.
            </summary>
      <param name="value0">In: The first value.</param>
      <param name="value1">In: The second value.</param>
      <param name="result">
            Out: The sum <paramref name="value0" /> + <paramref name="value1" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SingleTraits.BeginBlend(System.Single@)">
      <summary>
            Begins the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">Out: The start value of the blend operation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SingleTraits.BlendNext(System.Single@,System.Single@,System.Single)">
      <summary>
            Blends the given animation value to the current value.
            </summary>
      <param name="value">
            In/Out: The current animation value. (The intermediate result of the blend operation).
            </param>
      <param name="nextValue">
            In: The next animation value which should be blended to <paramref name="value" />.
            </param>
      <param name="normalizedWeight">
            The normalized weight of <paramref name="nextValue" />. ('Normalized' means that the sum of 
            the animation weights need to be 1.)
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SingleTraits.Copy(System.Single@,System.Single@)">
      <summary>
            Copies the specified animation value.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">Out: The target value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SingleTraits.Create(System.Single@,System.Single@)">
      <summary>
            Creates an animation value. (If the animation value is a heap object, then method reuses any
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <param name="reference">
            In: A reference value. This value serves as a reference for allocating a new value of the 
            same type. For example, if <paramref name="value" /> needs to be initialized with a certain
            settings, the settings can be copied from <paramref name="reference" />.
            </param>
      <param name="value">Out: A new animation value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SingleTraits.EndBlend(System.Single@)">
      <summary>
            Finalizes the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">
            In: The current animation value. (The intermediate result of the blend operation.)<br />
            Out: The result of the blend operation.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SingleTraits.Interpolate(System.Single@,System.Single@,System.Single,System.Single@)">
      <summary>
            Performs a linear interpolation between two animation values.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">In: The target value.</param>
      <param name="parameter">
            The interpolation parameter; also known as <i>interpolation factor</i> or <i>weight of the 
            target value</i>.    
            </param>
      <param name="result">Out: The result of the interpolation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SingleTraits.Invert(System.Single@,System.Single@)">
      <summary>
            Gets the inverse of an animation value.
            </summary>
      <param name="value">In: The animation value.</param>
      <param name="inverse">Out: The inverse of <paramref name="value" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SingleTraits.Multiply(System.Single@,System.Int32,System.Single@)">
      <summary>
            Multiplies an animation value by a given factor.
            </summary>
      <param name="value">In: The value.</param>
      <param name="factor">The factor.</param>
      <param name="result">
            Out: The product of <paramref name="value" /> and <paramref name="factor" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SingleTraits.Recycle(System.Single@)">
      <summary>
            Recycles an animation value.
            </summary>
      <param name="value">In/Out: The animation value to be recycled.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SingleTraits.Reset(DigitalRune.Animation.IAnimatableProperty{System.Single})">
      <summary>
            Resets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="property">The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SingleTraits.Set(System.Single@,DigitalRune.Animation.IAnimatableProperty{System.Single})">
      <summary>
            Sets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="value">In: The value to write to <paramref name="property" />.</param>
      <param name="property">
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" /> that stores the animation value.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SingleTraits.SetIdentity(System.Single@)">
      <summary>
            Gets the identity.
            </summary>
      <param name="identity">Out: The identity.</param>
    </member>
    <member name="T:DigitalRune.Animation.Traits.SkeletonPoseTraits">
      <summary>
            Describes the properties of a <see cref="T:DigitalRune.Animation.Character.SkeletonPose" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Traits.SkeletonPoseTraits" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.Add(DigitalRune.Animation.Character.SkeletonPose@,DigitalRune.Animation.Character.SkeletonPose@,DigitalRune.Animation.Character.SkeletonPose@)">
      <summary>
            Adds the given animation values.
            </summary>
      <param name="value0">In: The first value.</param>
      <param name="value1">In: The second value.</param>
      <param name="result">
            Out: The sum <paramref name="value0" /> + <paramref name="value1" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value0" />, <paramref name="value1" /> or <paramref name="result" /> is 
            <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.BeginBlend(DigitalRune.Animation.Character.SkeletonPose@)">
      <summary>
            Begins the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">Out: The start value of the blend operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.BlendNext(DigitalRune.Animation.Character.SkeletonPose@,DigitalRune.Animation.Character.SkeletonPose@,System.Single)">
      <summary>
            Blends the given animation value to the current value.
            </summary>
      <param name="value">
            In/Out: The current animation value. (The intermediate result of the blend operation).
            </param>
      <param name="nextValue">
            In: The next animation value which should be blended to <paramref name="value" />.
            </param>
      <param name="normalizedWeight">
            The normalized weight of <paramref name="nextValue" />. ('Normalized' means that the sum of 
            the animation weights need to be 1.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> or <paramref name="nextValue" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.Copy(DigitalRune.Animation.Character.SkeletonPose@,DigitalRune.Animation.Character.SkeletonPose@)">
      <summary>
            Copies the specified animation value.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">Out: The target value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.Create(DigitalRune.Animation.Character.SkeletonPose@,DigitalRune.Animation.Character.SkeletonPose@)">
      <summary>
            Creates an animation value. (If the animation value is a heap object, then method reuses any
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <param name="reference">
            In: A reference value. This value serves as a reference for allocating a new value of the 
            same type. For example, if <paramref name="value" /> needs to be initialized with a certain
            settings, the settings can be copied from <paramref name="reference" />.
            </param>
      <param name="value">Out: A new animation value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reference" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.EndBlend(DigitalRune.Animation.Character.SkeletonPose@)">
      <summary>
            Finalizes the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">
            In: The current animation value. (The intermediate result of the blend operation.)<br />
            Out: The result of the blend operation.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.Interpolate(DigitalRune.Animation.Character.SkeletonPose@,DigitalRune.Animation.Character.SkeletonPose@,System.Single,DigitalRune.Animation.Character.SkeletonPose@)">
      <summary>
            Performs a linear interpolation between two animation values.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">In: The target value.</param>
      <param name="parameter">
            The interpolation parameter; also known as <i>interpolation factor</i> or <i>weight of the 
            target value</i>.    
            </param>
      <param name="result">Out: The result of the interpolation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="target" /> or <paramref name="result" /> is 
            <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.Invert(DigitalRune.Animation.Character.SkeletonPose@,DigitalRune.Animation.Character.SkeletonPose@)">
      <summary>
            Gets the inverse of an animation value.
            </summary>
      <param name="value">In: The animation value.</param>
      <param name="inverse">Out: The inverse of <paramref name="value" />.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:DigitalRune.Animation.Character.SkeletonPose" />s do not have inverse.</exception>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.Multiply(DigitalRune.Animation.Character.SkeletonPose@,System.Int32,DigitalRune.Animation.Character.SkeletonPose@)">
      <summary>
            Multiplies an animation value by a given factor.
            </summary>
      <param name="value">In: The value.</param>
      <param name="factor">The factor.</param>
      <param name="result">
            Out: The product of <paramref name="value" /> and <paramref name="factor" />.
            </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:DigitalRune.Animation.Character.SkeletonPose" />s cannot be multiplied.</exception>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.Recycle(DigitalRune.Animation.Character.SkeletonPose@)">
      <summary>
            Recycles an animation value.
            </summary>
      <param name="value">In/Out: The animation value to be recycled.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.Reset(DigitalRune.Animation.IAnimatableProperty{DigitalRune.Animation.Character.SkeletonPose})">
      <summary>
            Resets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="property">The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.Set(DigitalRune.Animation.Character.SkeletonPose@,DigitalRune.Animation.IAnimatableProperty{DigitalRune.Animation.Character.SkeletonPose})">
      <summary>
            Sets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="value">In: The value to write to <paramref name="property" />.</param>
      <param name="property">
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" /> that stores the animation value.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> or <paramref name="property" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The value of <paramref name="property" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.SetIdentity(DigitalRune.Animation.Character.SkeletonPose@)">
      <summary>
            Gets the identity.
            </summary>
      <param name="identity">Out: The identity.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identity" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Animation.Traits.SrtTransformTraits">
      <summary>
            Describes the properties of a <see cref="T:DigitalRune.Animation.Character.SrtTransform" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Traits.SrtTransformTraits" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.Add(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@)">
      <summary>
            Adds the given animation values.
            </summary>
      <param name="value0">In: The first value.</param>
      <param name="value1">In: The second value.</param>
      <param name="result">
            Out: The sum <paramref name="value0" /> + <paramref name="value1" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.BeginBlend(DigitalRune.Animation.Character.SrtTransform@)">
      <summary>
            Begins the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">Out: The start value of the blend operation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.BlendNext(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@,System.Single)">
      <summary>
            Blends the given animation value to the current value.
            </summary>
      <param name="value">
            In/Out: The current animation value. (The intermediate result of the blend operation).
            </param>
      <param name="nextValue">
            In: The next animation value which should be blended to <paramref name="value" />.
            </param>
      <param name="normalizedWeight">
            The normalized weight of <paramref name="nextValue" />. ('Normalized' means that the sum of 
            the animation weights need to be 1.)
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.Copy(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@)">
      <summary>
            Copies the specified animation value.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">Out: The target value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.Create(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@)">
      <summary>
            Creates an animation value. (If the animation value is a heap object, then method reuses any
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <param name="reference">
            In: A reference value. This value serves as a reference for allocating a new value of the 
            same type. For example, if <paramref name="value" /> needs to be initialized with a certain
            settings, the settings can be copied from <paramref name="reference" />.
            </param>
      <param name="value">Out: A new animation value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.EndBlend(DigitalRune.Animation.Character.SrtTransform@)">
      <summary>
            Finalizes the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">
            In: The current animation value. (The intermediate result of the blend operation.)<br />
            Out: The result of the blend operation.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.Interpolate(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@,System.Single,DigitalRune.Animation.Character.SrtTransform@)">
      <summary>
            Performs a linear interpolation between two animation values.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">In: The target value.</param>
      <param name="parameter">
            The interpolation parameter; also known as <i>interpolation factor</i> or <i>weight of the 
            target value</i>.    
            </param>
      <param name="result">Out: The result of the interpolation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.Invert(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@)">
      <summary>
            Gets the inverse of an animation value.
            </summary>
      <param name="value">In: The animation value.</param>
      <param name="inverse">Out: The inverse of <paramref name="value" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.Multiply(DigitalRune.Animation.Character.SrtTransform@,System.Int32,DigitalRune.Animation.Character.SrtTransform@)">
      <summary>
            Multiplies an animation value by a given factor.
            </summary>
      <param name="value">In: The value.</param>
      <param name="factor">The factor.</param>
      <param name="result">
            Out: The product of <paramref name="value" /> and <paramref name="factor" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.Recycle(DigitalRune.Animation.Character.SrtTransform@)">
      <summary>
            Recycles an animation value.
            </summary>
      <param name="value">In/Out: The animation value to be recycled.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.Reset(DigitalRune.Animation.IAnimatableProperty{DigitalRune.Animation.Character.SrtTransform})">
      <summary>
            Resets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="property">The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.Set(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.IAnimatableProperty{DigitalRune.Animation.Character.SrtTransform})">
      <summary>
            Sets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="value">In: The value to write to <paramref name="property" />.</param>
      <param name="property">
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" /> that stores the animation value.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.SetIdentity(DigitalRune.Animation.Character.SrtTransform@)">
      <summary>
            Gets the identity.
            </summary>
      <param name="identity">Out: The identity.</param>
    </member>
    <member name="T:DigitalRune.Animation.Traits.Vector2FTraits">
      <summary>
            Describes the properties of a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Traits.Vector2FTraits" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.Add(DigitalRune.Mathematics.Algebra.Vector2F@,DigitalRune.Mathematics.Algebra.Vector2F@,DigitalRune.Mathematics.Algebra.Vector2F@)">
      <summary>
            Adds the given animation values.
            </summary>
      <param name="value0">In: The first value.</param>
      <param name="value1">In: The second value.</param>
      <param name="result">
            Out: The sum <paramref name="value0" /> + <paramref name="value1" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.BeginBlend(DigitalRune.Mathematics.Algebra.Vector2F@)">
      <summary>
            Begins the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">Out: The start value of the blend operation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.BlendNext(DigitalRune.Mathematics.Algebra.Vector2F@,DigitalRune.Mathematics.Algebra.Vector2F@,System.Single)">
      <summary>
            Blends the given animation value to the current value.
            </summary>
      <param name="value">
            In/Out: The current animation value. (The intermediate result of the blend operation).
            </param>
      <param name="nextValue">
            In: The next animation value which should be blended to <paramref name="value" />.
            </param>
      <param name="normalizedWeight">
            The normalized weight of <paramref name="nextValue" />. ('Normalized' means that the sum of 
            the animation weights need to be 1.)
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.Copy(DigitalRune.Mathematics.Algebra.Vector2F@,DigitalRune.Mathematics.Algebra.Vector2F@)">
      <summary>
            Copies the specified animation value.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">Out: The target value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.Create(DigitalRune.Mathematics.Algebra.Vector2F@,DigitalRune.Mathematics.Algebra.Vector2F@)">
      <summary>
            Creates an animation value. (If the animation value is a heap object, then method reuses any
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <param name="reference">
            In: A reference value. This value serves as a reference for allocating a new value of the 
            same type. For example, if <paramref name="value" /> needs to be initialized with a certain
            settings, the settings can be copied from <paramref name="reference" />.
            </param>
      <param name="value">Out: A new animation value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.EndBlend(DigitalRune.Mathematics.Algebra.Vector2F@)">
      <summary>
            Finalizes the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">
            In: The current animation value. (The intermediate result of the blend operation.)<br />
            Out: The result of the blend operation.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.Interpolate(DigitalRune.Mathematics.Algebra.Vector2F@,DigitalRune.Mathematics.Algebra.Vector2F@,System.Single,DigitalRune.Mathematics.Algebra.Vector2F@)">
      <summary>
            Performs a linear interpolation between two animation values.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">In: The target value.</param>
      <param name="parameter">
            The interpolation parameter; also known as <i>interpolation factor</i> or <i>weight of the 
            target value</i>.    
            </param>
      <param name="result">Out: The result of the interpolation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.Invert(DigitalRune.Mathematics.Algebra.Vector2F@,DigitalRune.Mathematics.Algebra.Vector2F@)">
      <summary>
            Gets the inverse of an animation value.
            </summary>
      <param name="value">In: The animation value.</param>
      <param name="inverse">Out: The inverse of <paramref name="value" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.Multiply(DigitalRune.Mathematics.Algebra.Vector2F@,System.Int32,DigitalRune.Mathematics.Algebra.Vector2F@)">
      <summary>
            Multiplies an animation value by a given factor.
            </summary>
      <param name="value">In: The value.</param>
      <param name="factor">The factor.</param>
      <param name="result">
            Out: The product of <paramref name="value" /> and <paramref name="factor" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.Recycle(DigitalRune.Mathematics.Algebra.Vector2F@)">
      <summary>
            Recycles an animation value.
            </summary>
      <param name="value">In/Out: The animation value to be recycled.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.Reset(DigitalRune.Animation.IAnimatableProperty{DigitalRune.Mathematics.Algebra.Vector2F})">
      <summary>
            Resets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="property">The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.Set(DigitalRune.Mathematics.Algebra.Vector2F@,DigitalRune.Animation.IAnimatableProperty{DigitalRune.Mathematics.Algebra.Vector2F})">
      <summary>
            Sets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="value">In: The value to write to <paramref name="property" />.</param>
      <param name="property">
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" /> that stores the animation value.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.SetIdentity(DigitalRune.Mathematics.Algebra.Vector2F@)">
      <summary>
            Gets the identity.
            </summary>
      <param name="identity">Out: The identity.</param>
    </member>
    <member name="T:DigitalRune.Animation.Traits.Vector2Traits">
      <summary>
            Describes the properties of a <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2Traits.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Traits.Vector2Traits" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2Traits.Add(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>
            Adds the given animation values.
            </summary>
      <param name="value0">In: The first value.</param>
      <param name="value1">In: The second value.</param>
      <param name="result">
            Out: The sum <paramref name="value0" /> + <paramref name="value1" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2Traits.BeginBlend(Microsoft.Xna.Framework.Vector2@)">
      <summary>
            Begins the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">Out: The start value of the blend operation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2Traits.BlendNext(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single)">
      <summary>
            Blends the given animation value to the current value.
            </summary>
      <param name="value">
            In/Out: The current animation value. (The intermediate result of the blend operation).
            </param>
      <param name="nextValue">
            In: The next animation value which should be blended to <paramref name="value" />.
            </param>
      <param name="normalizedWeight">
            The normalized weight of <paramref name="nextValue" />. ('Normalized' means that the sum of 
            the animation weights need to be 1.)
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2Traits.Copy(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>
            Copies the specified animation value.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">Out: The target value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2Traits.Create(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>
            Creates an animation value. (If the animation value is a heap object, then method reuses any
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <param name="reference">
            In: A reference value. This value serves as a reference for allocating a new value of the 
            same type. For example, if <paramref name="value" /> needs to be initialized with a certain
            settings, the settings can be copied from <paramref name="reference" />.
            </param>
      <param name="value">Out: A new animation value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2Traits.EndBlend(Microsoft.Xna.Framework.Vector2@)">
      <summary>
            Finalizes the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">
            In: The current animation value. (The intermediate result of the blend operation.)<br />
            Out: The result of the blend operation.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2Traits.Interpolate(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>
            Performs a linear interpolation between two animation values.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">In: The target value.</param>
      <param name="parameter">
            The interpolation parameter; also known as <i>interpolation factor</i> or <i>weight of the 
            target value</i>.    
            </param>
      <param name="result">Out: The result of the interpolation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2Traits.Invert(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>
            Gets the inverse of an animation value.
            </summary>
      <param name="value">In: The animation value.</param>
      <param name="inverse">Out: The inverse of <paramref name="value" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2Traits.Multiply(Microsoft.Xna.Framework.Vector2@,System.Int32,Microsoft.Xna.Framework.Vector2@)">
      <summary>
            Multiplies an animation value by a given factor.
            </summary>
      <param name="value">In: The value.</param>
      <param name="factor">The factor.</param>
      <param name="result">
            Out: The product of <paramref name="value" /> and <paramref name="factor" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2Traits.Recycle(Microsoft.Xna.Framework.Vector2@)">
      <summary>
            Recycles an animation value.
            </summary>
      <param name="value">In/Out: The animation value to be recycled.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2Traits.Reset(DigitalRune.Animation.IAnimatableProperty{Microsoft.Xna.Framework.Vector2})">
      <summary>
            Resets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="property">The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2Traits.Set(Microsoft.Xna.Framework.Vector2@,DigitalRune.Animation.IAnimatableProperty{Microsoft.Xna.Framework.Vector2})">
      <summary>
            Sets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="value">In: The value to write to <paramref name="property" />.</param>
      <param name="property">
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" /> that stores the animation value.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector2Traits.SetIdentity(Microsoft.Xna.Framework.Vector2@)">
      <summary>
            Gets the identity.
            </summary>
      <param name="identity">Out: The identity.</param>
    </member>
    <member name="T:DigitalRune.Animation.Traits.Vector3FTraits">
      <summary>
            Describes the properties of a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Traits.Vector3FTraits" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.Add(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Adds the given animation values.
            </summary>
      <param name="value0">In: The first value.</param>
      <param name="value1">In: The second value.</param>
      <param name="result">
            Out: The sum <paramref name="value0" /> + <paramref name="value1" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.BeginBlend(DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Begins the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">Out: The start value of the blend operation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.BlendNext(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@,System.Single)">
      <summary>
            Blends the given animation value to the current value.
            </summary>
      <param name="value">
            In/Out: The current animation value. (The intermediate result of the blend operation).
            </param>
      <param name="nextValue">
            In: The next animation value which should be blended to <paramref name="value" />.
            </param>
      <param name="normalizedWeight">
            The normalized weight of <paramref name="nextValue" />. ('Normalized' means that the sum of 
            the animation weights need to be 1.)
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.Copy(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Copies the specified animation value.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">Out: The target value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.Create(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Creates an animation value. (If the animation value is a heap object, then method reuses any
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <param name="reference">
            In: A reference value. This value serves as a reference for allocating a new value of the 
            same type. For example, if <paramref name="value" /> needs to be initialized with a certain
            settings, the settings can be copied from <paramref name="reference" />.
            </param>
      <param name="value">Out: A new animation value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.EndBlend(DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Finalizes the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">
            In: The current animation value. (The intermediate result of the blend operation.)<br />
            Out: The result of the blend operation.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.Interpolate(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@,System.Single,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Performs a linear interpolation between two animation values.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">In: The target value.</param>
      <param name="parameter">
            The interpolation parameter; also known as <i>interpolation factor</i> or <i>weight of the 
            target value</i>.    
            </param>
      <param name="result">Out: The result of the interpolation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.Invert(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Gets the inverse of an animation value.
            </summary>
      <param name="value">In: The animation value.</param>
      <param name="inverse">Out: The inverse of <paramref name="value" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.Multiply(DigitalRune.Mathematics.Algebra.Vector3F@,System.Int32,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Multiplies an animation value by a given factor.
            </summary>
      <param name="value">In: The value.</param>
      <param name="factor">The factor.</param>
      <param name="result">
            Out: The product of <paramref name="value" /> and <paramref name="factor" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.Recycle(DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Recycles an animation value.
            </summary>
      <param name="value">In/Out: The animation value to be recycled.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.Reset(DigitalRune.Animation.IAnimatableProperty{DigitalRune.Mathematics.Algebra.Vector3F})">
      <summary>
            Resets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="property">The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.Set(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Animation.IAnimatableProperty{DigitalRune.Mathematics.Algebra.Vector3F})">
      <summary>
            Sets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="value">In: The value to write to <paramref name="property" />.</param>
      <param name="property">
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" /> that stores the animation value.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.SetIdentity(DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Gets the identity.
            </summary>
      <param name="identity">Out: The identity.</param>
    </member>
    <member name="T:DigitalRune.Animation.Traits.Vector3Traits">
      <summary>
            Describes the properties of a <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3Traits.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Traits.Vector3Traits" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3Traits.Add(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Adds the given animation values.
            </summary>
      <param name="value0">In: The first value.</param>
      <param name="value1">In: The second value.</param>
      <param name="result">
            Out: The sum <paramref name="value0" /> + <paramref name="value1" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3Traits.BeginBlend(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Begins the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">Out: The start value of the blend operation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3Traits.BlendNext(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
      <summary>
            Blends the given animation value to the current value.
            </summary>
      <param name="value">
            In/Out: The current animation value. (The intermediate result of the blend operation).
            </param>
      <param name="nextValue">
            In: The next animation value which should be blended to <paramref name="value" />.
            </param>
      <param name="normalizedWeight">
            The normalized weight of <paramref name="nextValue" />. ('Normalized' means that the sum of 
            the animation weights need to be 1.)
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3Traits.Copy(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Copies the specified animation value.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">Out: The target value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3Traits.Create(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Creates an animation value. (If the animation value is a heap object, then method reuses any
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <param name="reference">
            In: A reference value. This value serves as a reference for allocating a new value of the 
            same type. For example, if <paramref name="value" /> needs to be initialized with a certain
            settings, the settings can be copied from <paramref name="reference" />.
            </param>
      <param name="value">Out: A new animation value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3Traits.EndBlend(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Finalizes the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">
            In: The current animation value. (The intermediate result of the blend operation.)<br />
            Out: The result of the blend operation.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3Traits.Interpolate(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Performs a linear interpolation between two animation values.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">In: The target value.</param>
      <param name="parameter">
            The interpolation parameter; also known as <i>interpolation factor</i> or <i>weight of the 
            target value</i>.    
            </param>
      <param name="result">Out: The result of the interpolation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3Traits.Invert(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the inverse of an animation value.
            </summary>
      <param name="value">In: The animation value.</param>
      <param name="inverse">Out: The inverse of <paramref name="value" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3Traits.Multiply(Microsoft.Xna.Framework.Vector3@,System.Int32,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Multiplies an animation value by a given factor.
            </summary>
      <param name="value">In: The value.</param>
      <param name="factor">The factor.</param>
      <param name="result">
            Out: The product of <paramref name="value" /> and <paramref name="factor" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3Traits.Recycle(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Recycles an animation value.
            </summary>
      <param name="value">In/Out: The animation value to be recycled.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3Traits.Reset(DigitalRune.Animation.IAnimatableProperty{Microsoft.Xna.Framework.Vector3})">
      <summary>
            Resets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="property">The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3Traits.Set(Microsoft.Xna.Framework.Vector3@,DigitalRune.Animation.IAnimatableProperty{Microsoft.Xna.Framework.Vector3})">
      <summary>
            Sets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="value">In: The value to write to <paramref name="property" />.</param>
      <param name="property">
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" /> that stores the animation value.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector3Traits.SetIdentity(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the identity.
            </summary>
      <param name="identity">Out: The identity.</param>
    </member>
    <member name="T:DigitalRune.Animation.Traits.Vector4FTraits">
      <summary>
            Describes the properties of a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Traits.Vector4FTraits" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.Add(DigitalRune.Mathematics.Algebra.Vector4F@,DigitalRune.Mathematics.Algebra.Vector4F@,DigitalRune.Mathematics.Algebra.Vector4F@)">
      <summary>
            Adds the given animation values.
            </summary>
      <param name="value0">In: The first value.</param>
      <param name="value1">In: The second value.</param>
      <param name="result">
            Out: The sum <paramref name="value0" /> + <paramref name="value1" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.BeginBlend(DigitalRune.Mathematics.Algebra.Vector4F@)">
      <summary>
            Begins the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">Out: The start value of the blend operation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.BlendNext(DigitalRune.Mathematics.Algebra.Vector4F@,DigitalRune.Mathematics.Algebra.Vector4F@,System.Single)">
      <summary>
            Blends the given animation value to the current value.
            </summary>
      <param name="value">
            In/Out: The current animation value. (The intermediate result of the blend operation).
            </param>
      <param name="nextValue">
            In: The next animation value which should be blended to <paramref name="value" />.
            </param>
      <param name="normalizedWeight">
            The normalized weight of <paramref name="nextValue" />. ('Normalized' means that the sum of 
            the animation weights need to be 1.)
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.Copy(DigitalRune.Mathematics.Algebra.Vector4F@,DigitalRune.Mathematics.Algebra.Vector4F@)">
      <summary>
            Copies the specified animation value.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">Out: The target value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.Create(DigitalRune.Mathematics.Algebra.Vector4F@,DigitalRune.Mathematics.Algebra.Vector4F@)">
      <summary>
            Creates an animation value. (If the animation value is a heap object, then method reuses any
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <param name="reference">
            In: A reference value. This value serves as a reference for allocating a new value of the 
            same type. For example, if <paramref name="value" /> needs to be initialized with a certain
            settings, the settings can be copied from <paramref name="reference" />.
            </param>
      <param name="value">Out: A new animation value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.EndBlend(DigitalRune.Mathematics.Algebra.Vector4F@)">
      <summary>
            Finalizes the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">
            In: The current animation value. (The intermediate result of the blend operation.)<br />
            Out: The result of the blend operation.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.Interpolate(DigitalRune.Mathematics.Algebra.Vector4F@,DigitalRune.Mathematics.Algebra.Vector4F@,System.Single,DigitalRune.Mathematics.Algebra.Vector4F@)">
      <summary>
            Performs a linear interpolation between two animation values.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">In: The target value.</param>
      <param name="parameter">
            The interpolation parameter; also known as <i>interpolation factor</i> or <i>weight of the 
            target value</i>.    
            </param>
      <param name="result">Out: The result of the interpolation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.Invert(DigitalRune.Mathematics.Algebra.Vector4F@,DigitalRune.Mathematics.Algebra.Vector4F@)">
      <summary>
            Gets the inverse of an animation value.
            </summary>
      <param name="value">In: The animation value.</param>
      <param name="inverse">Out: The inverse of <paramref name="value" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.Multiply(DigitalRune.Mathematics.Algebra.Vector4F@,System.Int32,DigitalRune.Mathematics.Algebra.Vector4F@)">
      <summary>
            Multiplies an animation value by a given factor.
            </summary>
      <param name="value">In: The value.</param>
      <param name="factor">The factor.</param>
      <param name="result">
            Out: The product of <paramref name="value" /> and <paramref name="factor" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.Recycle(DigitalRune.Mathematics.Algebra.Vector4F@)">
      <summary>
            Recycles an animation value.
            </summary>
      <param name="value">In/Out: The animation value to be recycled.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.Reset(DigitalRune.Animation.IAnimatableProperty{DigitalRune.Mathematics.Algebra.Vector4F})">
      <summary>
            Resets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="property">The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.Set(DigitalRune.Mathematics.Algebra.Vector4F@,DigitalRune.Animation.IAnimatableProperty{DigitalRune.Mathematics.Algebra.Vector4F})">
      <summary>
            Sets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="value">In: The value to write to <paramref name="property" />.</param>
      <param name="property">
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" /> that stores the animation value.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.SetIdentity(DigitalRune.Mathematics.Algebra.Vector4F@)">
      <summary>
            Gets the identity.
            </summary>
      <param name="identity">Out: The identity.</param>
    </member>
    <member name="T:DigitalRune.Animation.Traits.Vector4Traits">
      <summary>
            Describes the properties of a <see cref="T:Microsoft.Xna.Framework.Vector4" />.
            (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4Traits.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Traits.Vector4Traits" /> class</summary>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4Traits.Add(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>
            Adds the given animation values.
            </summary>
      <param name="value0">In: The first value.</param>
      <param name="value1">In: The second value.</param>
      <param name="result">
            Out: The sum <paramref name="value0" /> + <paramref name="value1" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4Traits.BeginBlend(Microsoft.Xna.Framework.Vector4@)">
      <summary>
            Begins the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">Out: The start value of the blend operation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4Traits.BlendNext(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single)">
      <summary>
            Blends the given animation value to the current value.
            </summary>
      <param name="value">
            In/Out: The current animation value. (The intermediate result of the blend operation).
            </param>
      <param name="nextValue">
            In: The next animation value which should be blended to <paramref name="value" />.
            </param>
      <param name="normalizedWeight">
            The normalized weight of <paramref name="nextValue" />. ('Normalized' means that the sum of 
            the animation weights need to be 1.)
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4Traits.Copy(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>
            Copies the specified animation value.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">Out: The target value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4Traits.Create(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>
            Creates an animation value. (If the animation value is a heap object, then method reuses any
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <param name="reference">
            In: A reference value. This value serves as a reference for allocating a new value of the 
            same type. For example, if <paramref name="value" /> needs to be initialized with a certain
            settings, the settings can be copied from <paramref name="reference" />.
            </param>
      <param name="value">Out: A new animation value.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4Traits.EndBlend(Microsoft.Xna.Framework.Vector4@)">
      <summary>
            Finalizes the interpolation of <i>n</i> animation values.
            </summary>
      <param name="value">
            In: The current animation value. (The intermediate result of the blend operation.)<br />
            Out: The result of the blend operation.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4Traits.Interpolate(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>
            Performs a linear interpolation between two animation values.
            </summary>
      <param name="source">In: The source value.</param>
      <param name="target">In: The target value.</param>
      <param name="parameter">
            The interpolation parameter; also known as <i>interpolation factor</i> or <i>weight of the 
            target value</i>.    
            </param>
      <param name="result">Out: The result of the interpolation.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4Traits.Invert(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>
            Gets the inverse of an animation value.
            </summary>
      <param name="value">In: The animation value.</param>
      <param name="inverse">Out: The inverse of <paramref name="value" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4Traits.Multiply(Microsoft.Xna.Framework.Vector4@,System.Int32,Microsoft.Xna.Framework.Vector4@)">
      <summary>
            Multiplies an animation value by a given factor.
            </summary>
      <param name="value">In: The value.</param>
      <param name="factor">The factor.</param>
      <param name="result">
            Out: The product of <paramref name="value" /> and <paramref name="factor" />.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4Traits.Recycle(Microsoft.Xna.Framework.Vector4@)">
      <summary>
            Recycles an animation value.
            </summary>
      <param name="value">In/Out: The animation value to be recycled.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4Traits.Reset(DigitalRune.Animation.IAnimatableProperty{Microsoft.Xna.Framework.Vector4})">
      <summary>
            Resets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="property">The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4Traits.Set(Microsoft.Xna.Framework.Vector4@,DigitalRune.Animation.IAnimatableProperty{Microsoft.Xna.Framework.Vector4})">
      <summary>
            Sets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" />.
            </summary>
      <param name="value">In: The value to write to <paramref name="property" />.</param>
      <param name="property">
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1" /> that stores the animation value.
            </param>
    </member>
    <member name="M:DigitalRune.Animation.Traits.Vector4Traits.SetIdentity(Microsoft.Xna.Framework.Vector4@)">
      <summary>
            Gets the identity.
            </summary>
      <param name="identity">Out: The identity.</param>
    </member>
    <member name="T:DigitalRune.Animation.Transitions.AnimationTransition">
      <summary>
            Controls how animations interact with any existing ones as they are added
            to or removed from the animation system.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Transitions.AnimationTransition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Animation.Transitions.AnimationTransition" /> class</summary>
    </member>
    <member name="P:DigitalRune.Animation.Transitions.AnimationTransition.AnimationInstance">
      <summary>
            Gets or sets the animation instance that is controlled by this animation transition.
            </summary>
    </member>
    <member name="M:DigitalRune.Animation.Transitions.AnimationTransition.OnInitialize(DigitalRune.Animation.AnimationManager)">
      <summary>
            Called when the animation transition is started.
            </summary>
      <param name="animationManager">The <see cref="T:DigitalRune.Animation.AnimationManager" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Transitions.AnimationTransition.OnUninitialize(DigitalRune.Animation.AnimationManager)">
      <summary>
            Called when the animation transition is removed.
            </summary>
      <param name="animationManager">The <see cref="T:DigitalRune.Animation.AnimationManager" />.</param>
    </member>
    <member name="M:DigitalRune.Animation.Transitions.AnimationTransition.OnUpdate(DigitalRune.Animation.AnimationManager)">
      <summary>
            Called when the animation transition is updated.
            </summary>
      <param name="animationManager">The <see cref="T:DigitalRune.Animation.AnimationManager" />.</param>
    </member>
  </members>
</doc>