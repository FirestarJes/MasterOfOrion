<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>DigitalRune.Mathematics</name>
  </assembly>
  <members>
    <member name="T:DigitalRune.Mathematics.ConstantsD">
      <summary>
            Provides useful constants (double-precision).
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.ConstantsD.E">
      <summary>Represents the mathematical constant e.</summary>
    </member>
    <member name="F:DigitalRune.Mathematics.ConstantsD.Ln10">
      <summary>Represents the natural logarithm of 10.</summary>
    </member>
    <member name="F:DigitalRune.Mathematics.ConstantsD.Ln2">
      <summary>Represents the natural logarithm of 2.</summary>
    </member>
    <member name="F:DigitalRune.Mathematics.ConstantsD.Log10OfE">
      <summary>Represents the logarithm base 10 of e.</summary>
    </member>
    <member name="F:DigitalRune.Mathematics.ConstantsD.Log2OfE">
      <summary>Represents the logarithm base 2 of e.</summary>
    </member>
    <member name="F:DigitalRune.Mathematics.ConstantsD.OneOverPi">
      <summary>Represents one divided by the mathematical constant <c>π</c>.</summary>
    </member>
    <member name="F:DigitalRune.Mathematics.ConstantsD.Pi">
      <summary>Represents the mathematical constant <c>π</c>.</summary>
    </member>
    <member name="F:DigitalRune.Mathematics.ConstantsD.PiOver2">
      <summary>Represents the mathematical constant <c>π</c> divided by two.</summary>
    </member>
    <member name="F:DigitalRune.Mathematics.ConstantsD.PiOver4">
      <summary>Represents the mathematical constant <c>π</c> divided by four.</summary>
    </member>
    <member name="F:DigitalRune.Mathematics.ConstantsD.TwoPi">
      <summary>Represents the mathematical constant <c>π</c> times two.</summary>
    </member>
    <member name="T:DigitalRune.Mathematics.ConstantsF">
      <summary>
            Provides useful constants (single-precision).
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.ConstantsF.E">
      <summary>Represents the mathematical constant e.</summary>
    </member>
    <member name="F:DigitalRune.Mathematics.ConstantsF.Ln10">
      <summary>Represents the natural logarithm of 10.</summary>
    </member>
    <member name="F:DigitalRune.Mathematics.ConstantsF.Ln2">
      <summary>Represents the natural logarithm of 2.</summary>
    </member>
    <member name="F:DigitalRune.Mathematics.ConstantsF.Log10OfE">
      <summary>Represents the logarithm base 10 of e.</summary>
    </member>
    <member name="F:DigitalRune.Mathematics.ConstantsF.Log2OfE">
      <summary>Represents the logarithm base 2 of e.</summary>
    </member>
    <member name="F:DigitalRune.Mathematics.ConstantsF.OneOverPi">
      <summary>Represents one divided by the mathematical constant <c>π</c>.</summary>
    </member>
    <member name="F:DigitalRune.Mathematics.ConstantsF.Pi">
      <summary>Represents the mathematical constant <c>π</c>.</summary>
    </member>
    <member name="F:DigitalRune.Mathematics.ConstantsF.PiOver2">
      <summary>Represents the mathematical constant <c>π</c> divided by two.</summary>
    </member>
    <member name="F:DigitalRune.Mathematics.ConstantsF.PiOver4">
      <summary>Represents the mathematical constant <c>π</c> divided by four.</summary>
    </member>
    <member name="F:DigitalRune.Mathematics.ConstantsF.TwoPi">
      <summary>Represents the mathematical constant <c>π</c> times two.</summary>
    </member>
    <member name="T:DigitalRune.Mathematics.MathematicsException">
      <summary>
            The exception that is thrown when a general error in the mathematics library occurs.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.MathematicsException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.MathematicsException" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.MathematicsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.MathematicsException" /> class with serialized 
            data.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the 
            exception being thrown.
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or 
            destination.
            </param>
      <exception cref="T:System.ArgumentNullException">
            The info parameter is <see langword="null" />.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.MathematicsException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.MathematicsException" /> class with a specified 
            error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.MathematicsException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.MathematicsException" /> class with a specified 
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">
            The exception that is the cause of the current exception, or <see langword="null" /> if no 
            inner exception is specified.
            </param>
    </member>
    <member name="T:DigitalRune.Mathematics.MathHelper">
      <summary>
            Provides useful mathematical algorithms and functions.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.MathHelper.BinomialCoefficient(System.Int32,System.Int32)">
      <summary>
            Computes the binomial coefficient of (n, k), also read as "n choose k".
            </summary>
      <param name="n">n, must be a value equal to or greater than 0.</param>
      <param name="k">k, a value in the range [0, <paramref name="n" />].</param>
      <returns>
            The binomial coefficient.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.MathHelper.Bitmask(System.UInt32)">
      <summary>
            Creates the smallest bitmask that is greater than or equal to the given value.
            </summary>
      <param name="value">The value.</param>
      <returns>
            A bitmask where the left bits are 0 and the right bits are 1. The value of the bitmask
            is ≥ <paramref name="value" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.MathHelper.Clamp``1(``0,``0,``0)">
      <summary>
            Clamps the specified value.
            </summary>
      <param name="value">The value which should be clamped.</param>
      <param name="min">The min limit.</param>
      <param name="max">The max limit.</param>
      <typeparam name="T">The type of the value.</typeparam>
      <returns>
        <paramref name="value" /> clamped to the interval
            [<paramref name="min" />, <paramref name="max" />].
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.MathHelper.Gaussian(System.Double,System.Double,System.Double,System.Double)">
      <summary>
        <summary>
            Computes the Gaussian function y = k * e^( -(x-μ)<sup>2</sup>/(2σ<sup>2</sup>) 
            (double-precision).
            </summary>
      </summary>
      <param name="x">The argument x.</param>
      <param name="coefficient">The coefficient k.</param>
      <param name="expectedValue">The expected value μ.</param>
      <param name="standardDeviation">The standard deviation σ.</param>
      <returns>The height of the Gaussian bell curve at x.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.MathHelper.Gaussian(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Computes the Gaussian function y = k * e^( -(x-μ)<sup>2</sup>/(2σ<sup>2</sup>) 
            (single precision).
            </summary>
      <param name="x">The argument x.</param>
      <param name="coefficient">The coefficient k.</param>
      <param name="expectedValue">The expected value μ.</param>
      <param name="standardDeviation">The standard deviation σ.</param>
      <returns>The height of the Gaussian bell curve at x.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.MathHelper.Hypotenuse(System.Double,System.Double)">
      <summary>
            Computes Sqrt(a*a + b*b) without underflow/overflow (double-precision).
            </summary>
      <param name="cathetusA">Cathetus a.</param>
      <param name="cathetusB">Cathetus b.</param>
      <returns>The hypotenuse c, which is Sqrt(a*a + b*b).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.MathHelper.Hypotenuse(System.Single,System.Single)">
      <summary>
            Computes Sqrt(a*a + b*b) without underflow/overflow (single-precision).
            </summary>
      <param name="cathetusA">Cathetus a.</param>
      <param name="cathetusB">Cathetus b.</param>
      <returns>The hypotenuse c, which is Sqrt(a*a + b*b).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.MathHelper.Log2GreaterOrEqual(System.UInt32)">
      <summary>
            Returns the smallest non-negative integer x such that 2<sup>x</sup> ≥ <paramref name="value" />.
            </summary>
      <param name="value">The value.</param>
      <returns>
            The smallest non-negative integer x such that 2<sup>x</sup> ≥ <paramref name="value" />.
            Exception: If <paramref name="value" /> is 0, 0 is returned.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.MathHelper.Log2LessOrEqual(System.UInt32)">
      <summary>
            Returns the largest non-negative integer x such that 2<sup>x</sup> ≤ <paramref name="value" />.
            </summary>
      <param name="value">The value.</param>
      <returns>
            The largest non-negative integer x such that 2<sup>x</sup> ≤ <paramref name="value" />.
            Exception: If <paramref name="value" /> is 0 then 0 is returned.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.MathHelper.NextPowerOf2(System.UInt32)">
      <summary>
            Returns the smallest power of 2 that is greater than the given value.
            </summary>
      <param name="value">The value.</param>
      <returns>
            The smallest power of 2 (2<sup>x</sup>) that is greater than <paramref name="value" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.MathHelper.Swap``1(``0@,``0@)">
      <summary>
            Swaps the content of two variables.
            </summary>
      <param name="obj1">First variable.</param>
      <param name="obj2">Second variable.</param>
      <typeparam name="T">The type of the objects.</typeparam>
    </member>
    <member name="M:DigitalRune.Mathematics.MathHelper.ToDegrees(System.Double)">
      <summary>
            Converts an angle value from radians to degrees (double-precision).
            </summary>
      <param name="radians">The angle in radians.</param>
      <returns>The angle in degrees.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.MathHelper.ToDegrees(System.Single)">
      <summary>
            Converts an angle value from radians to degrees (single-precision).
            </summary>
      <param name="radians">The angle in radians.</param>
      <returns>The angle in degrees.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.MathHelper.ToRadians(System.Double)">
      <summary>
            Converts an angle value from degrees to radians (double-precision).
            </summary>
      <param name="degree">The angle in degrees.</param>
      <returns>The angle in radians.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.MathHelper.ToRadians(System.Single)">
      <summary>
            Converts an angle value from degrees to radians (single-precision).
            </summary>
      <param name="degree">The angle in degrees.</param>
      <returns>The angle in radians.</returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.CholeskyDecompositionD">
      <summary>
            Computes the Cholesky Decomposition of a matrix (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.CholeskyDecompositionD.#ctor(DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Creates the Cholesky decomposition of the given matrix.
            </summary>
      <param name="matrixA">The square matrix A.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixA" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.CholeskyDecompositionD.IsSymmetricPositiveDefinite">
      <summary>
            Gets a value indicating whether the original matrix is symmetric and positive definite.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.CholeskyDecompositionD.L">
      <summary>
            Gets the lower triangular matrix L. (This property returns the internal matrix, 
            not a copy.)
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.CholeskyDecompositionD.SolveLinearEquations(DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Solves the equation <c>A * X = B</c>.
            </summary>
      <param name="matrixB">The matrix B with as many rows as A and any number of columns.</param>
      <returns>X, so that <c>A * X = B</c></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">The number of rows does not match.</exception>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix A is not symmetric and positive definite.
            </exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.CholeskyDecompositionF">
      <summary>
            Computes the Cholesky Decomposition of a matrix (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.CholeskyDecompositionF.#ctor(DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Creates the Cholesky decomposition of the given matrix.
            </summary>
      <param name="matrixA">The square matrix A.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixA" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.CholeskyDecompositionF.IsSymmetricPositiveDefinite">
      <summary>
            Gets a value indicating whether the original matrix is symmetric and positive definite.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.CholeskyDecompositionF.L">
      <summary>
            Gets the lower triangular matrix L. (This property returns the internal matrix, 
            not a copy.)
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.CholeskyDecompositionF.SolveLinearEquations(DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Solves the equation <c>A * X = B</c>.
            </summary>
      <param name="matrixB">The matrix B with as many rows as A and any number of columns.</param>
      <returns>X, so that <c>A * X = B</c></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">The number of rows does not match.</exception>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix A is not symmetric and positive definite.
            </exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionD">
      <summary>
            Computes the eigenvalues and eigenvectors of a real square matrix A (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionD.#ctor(DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Creates the eigenvalue decomposition of the given matrix.
            </summary>
      <param name="matrixA">The square matrix A.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="matrixA" /> is non-square (rectangular).
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionD.D">
      <summary>
            Gets the block diagonal eigenvalue matrix D. (This property returns the internal matrix, 
            not a copy.)
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionD.ImaginaryEigenvalues">
      <summary>
            Gets the vector of the imaginary parts of the eigenvalues. 
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionD.RealEigenvalues">
      <summary>
            Gets the vector of the real parts of the eigenvalues (the diagonal of D). 
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionD.V">
      <summary>
            Gets the eigenvector matrix V. (This property returns the internal matrix, 
            not a copy.)
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionF">
      <summary>
            Computes the eigenvalues and eigenvectors of a real square matrix A (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionF.#ctor(DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Creates the eigenvalue decomposition of the given matrix.
            </summary>
      <param name="matrixA">The square matrix A.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="matrixA" /> is non-square (rectangular).
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionF.D">
      <summary>
            Gets the block diagonal eigenvalue matrix D. (This property returns the internal matrix, 
            not a copy.)
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionF.ImaginaryEigenvalues">
      <summary>
            Gets the vector of the imaginary parts of the eigenvalues. 
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionF.RealEigenvalues">
      <summary>
            Gets the vector of the real parts of the eigenvalues (the diagonal of D). 
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionF.V">
      <summary>
            Gets the eigenvector matrix V. (This property returns the internal matrix, 
            not a copy.)
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.GaussSeidelMethodD">
      <summary>
            An iterative solver using the Gauss-Seidel method (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.GaussSeidelMethodD.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.GaussSeidelMethodD" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.GaussSeidelMethodD.Solve(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Solves the specified linear system of equations <i>Ax=b</i>.
            </summary>
      <param name="matrixA">The matrix A.</param>
      <param name="initialX">
            The initial guess for x. If this value is <see langword="null" />, a zero vector will be used
            as initial guess.
            </param>
      <param name="vectorB">The vector b.</param>
      <returns>The solution vector x.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vectorB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="matrixA" />is not a square matrix.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of elements of <paramref name="initialX" /> does not match.
            </exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.GaussSeidelMethodF">
      <summary>
            An iterative solver using the Gauss-Seidel method (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.GaussSeidelMethodF.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.GaussSeidelMethodF" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.GaussSeidelMethodF.Solve(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Solves the specified linear system of equations <i>Ax=b</i>.
            </summary>
      <param name="matrixA">The matrix A.</param>
      <param name="initialX">
            The initial guess for x. If this value is <see langword="null" />, a zero vector will be used
            as initial guess.
            </param>
      <param name="vectorB">The vector b.</param>
      <returns>The solution vector x.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vectorB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="matrixA" />is not a square matrix.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of elements of <paramref name="initialX" /> does not match.
            </exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverD">
      <summary>
            An iterative method for solving a linear system of equations <i>A * x = b</i>
            (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverD.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverD" /> class</summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverD.Epsilon">
      <summary>
            Gets or sets the tolerance value. 
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverD.MaxNumberOfIterations">
      <summary>
            Gets or sets the maximum number number of iterations.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverD.NumberOfIterations">
      <summary>
            Gets or sets the number of iterations of the last <see cref="M:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverD.Solve(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.VectorD)" /> 
            method call.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverD.Solve(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Solves the specified linear system of equations <i>A * x = b</i>.
            </summary>
      <param name="matrixA">The matrix A.</param>
      <param name="vectorB">The vector b.</param>
      <returns>The solution vector x.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverD.Solve(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Solves the specified linear system of equations <i>A * x = b</i> using an initial guess.
            </summary>
      <param name="matrixA">The matrix A.</param>
      <param name="initialX">
            The initial guess for x. If this value is <see langword="null" />, a zero vector will be used
            as initial guess.
            </param>
      <param name="vectorB">The vector b.</param>
      <returns>The solution vector x.</returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverF">
      <summary>
            An iterative method for solving a linear system of equations <i>A * x = b</i>
            (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverF.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverF" /> class</summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverF.Epsilon">
      <summary>
            Gets or sets the tolerance value. 
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverF.MaxNumberOfIterations">
      <summary>
            Gets or sets the maximum number number of iterations.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverF.NumberOfIterations">
      <summary>
            Gets or sets the number of iterations of the last <see cref="M:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverF.Solve(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.VectorF)" /> 
            method call.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverF.Solve(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Solves the specified linear system of equations <i>A * x = b</i>.
            </summary>
      <param name="matrixA">The matrix A.</param>
      <param name="vectorB">The vector b.</param>
      <returns>The solution vector x.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverF.Solve(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Solves the specified linear system of equations <i>A * x = b</i> using an initial guess.
            </summary>
      <param name="matrixA">The matrix A.</param>
      <param name="initialX">
            The initial guess for x. If this value is <see langword="null" />, a zero vector will be used
            as initial guess.
            </param>
      <param name="vectorB">The vector b.</param>
      <returns>The solution vector x.</returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.JacobiMethodD">
      <summary>
            An iterative solver using the Jacobi method (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.JacobiMethodD.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.JacobiMethodD" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.JacobiMethodD.Solve(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Solves the specified linear system of equations <i>Ax=b</i>.
            </summary>
      <param name="matrixA">The matrix A.</param>
      <param name="initialX">
            The initial guess for x. If this value is <see langword="null" />, a zero vector will be used
            as initial guess.
            </param>
      <param name="vectorB">The vector b.</param>
      <returns>The solution vector x.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vectorB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="matrixA" />is not a square matrix.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of elements of <paramref name="initialX" /> does not match.
            </exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.JacobiMethodF">
      <summary>
            An iterative solver using the Jacobi method (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.JacobiMethodF.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.JacobiMethodF" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.JacobiMethodF.Solve(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Solves the specified linear system of equations <i>Ax=b</i>.
            </summary>
      <param name="matrixA">The matrix A.</param>
      <param name="initialX">
            The initial guess for x. If this value is <see langword="null" />, a zero vector will be used
            as initial guess.
            </param>
      <param name="vectorB">The vector b.</param>
      <returns>The solution vector x.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vectorB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="matrixA" />is not a square matrix.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of elements of <paramref name="initialX" /> does not match.
            </exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.LUDecompositionD">
      <summary>
            Computes the LU Decomposition of a matrix (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.LUDecompositionD.#ctor(DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Creates the LU decomposition of the given matrix.
            </summary>
      <param name="matrixA">
            The matrix A. (Can be rectangular. Number of rows ≥ number of columns.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows must be greater than or equal to the number of columns.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.LUDecompositionD.Determinant">
      <summary>
            Gets the determinant of matrix A.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">Matrix A is not square.</exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.LUDecompositionD.IsNumericallySingular">
      <summary>
            Gets a value indicating whether the matrix U is numerically singular.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.LUDecompositionD.L">
      <summary>
            Gets the lower triangular matrix L. (This property returns the internal matrix, 
            not a copy.)
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.LUDecompositionD.PivotPermutationVector">
      <summary>
            Gets the pivot permutation vector. (This property returns the internal array, 
            not a copy.)
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.LUDecompositionD.SolveLinearEquations(DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Solves the equation <c>A * X = B</c>.
            </summary>
      <param name="matrixB">The matrix B with as many rows as A and any number of columns.</param>
      <returns>X, so that <c>A * X = B</c></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">The number of rows does not match.</exception>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">The matrix A is numerically singular.</exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.LUDecompositionD.U">
      <summary>
            Gets the upper triangular matrix U. (This property returns the internal matrix, 
            not a copy.)
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.LUDecompositionF">
      <summary>
            Computes the LU Decomposition of a matrix (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.LUDecompositionF.#ctor(DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Creates the LU decomposition of the given matrix.
            </summary>
      <param name="matrixA">
            The matrix A. (Can be rectangular. Number of rows ≥ number of columns.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows must be greater than or equal to the number of columns.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.LUDecompositionF.Determinant">
      <summary>
            Gets the determinant of matrix A.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">Matrix A is not square.</exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.LUDecompositionF.IsNumericallySingular">
      <summary>
            Gets a value indicating whether the matrix U is numerically singular.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.LUDecompositionF.L">
      <summary>
            Gets the lower triangular matrix L. (This property returns the internal matrix, 
            not a copy.)
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.LUDecompositionF.PivotPermutationVector">
      <summary>
            Gets the pivot permutation vector. (This property returns the internal array, 
            not a copy.)
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.LUDecompositionF.SolveLinearEquations(DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Solves the equation <c>A * X = B</c>.
            </summary>
      <param name="matrixB">The matrix B with as many rows as A and any number of columns.</param>
      <returns>X, so that <c>A * X = B</c></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">The number of rows does not match.</exception>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">The matrix A is numerically singular.</exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.LUDecompositionF.U">
      <summary>
            Gets the upper triangular matrix U. (This property returns the internal matrix, 
            not a copy.)
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.Matrix22D">
      <summary>
            Defines a 2 x 2 matrix (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.#ctor(System.Collections.Generic.IList{System.Double},DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D" /> struct.
            </summary>
      <param name="elements">The list with the initial values for the matrix elements.</param>
      <param name="order">The order of the matrix elements in <paramref name="elements" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="elements" /> has less than 4 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D" /> struct.
            </summary>
      <param name="elementValue">The initial value for the matrix elements.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D" /> class.
            </summary>
      <param name="m00">The element in the first row, first column.</param>
      <param name="m01">The element in the first row, second column.</param>
      <param name="m10">The element in the second row, first column.</param>
      <param name="m11">The element in the second row, second column.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.#ctor(System.Double[0:,0:])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D" /> struct.
            </summary>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> has less than 2x2 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.#ctor(System.Double[],DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D" /> struct.
            </summary>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <param name="order">The order of the matrix elements in <paramref name="elements" />.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> has less than 4 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.#ctor(System.Double[][])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D" /> struct.
            </summary>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> has less than 2x2 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> or the arrays in elements[0] must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Absolute">
      <summary>
            Sets each matrix element to its absolute value.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Absolute(DigitalRune.Mathematics.Algebra.Matrix22D)">
      <summary>
            Returns a matrix with the absolute values of the elements of the given matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>A matrix with the absolute values of the elements of the given matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Add(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Matrix22D)">
      <summary>
            Adds two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second Matrix.</param>
      <returns>The sum of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Matrix22D)">
      <summary>
            Determines whether two matrices are equal (regarding the 
            tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />).
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Matrix22D,System.Double)">
      <summary>
            Determines whether two matrices are equal (regarding a specific 
            tolerance).
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if the matrices are equal (within the tolerance 
            <paramref name="epsilon" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ClampToZero">
      <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix22D)">
      <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>
            The matrix with small elements clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix22D,System.Double)">
      <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
            The matrix with small elements clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ClampToZero(System.Double)">
      <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
      <param name="epsilon">The tolerance value.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.CreateRotation(System.Double)">
      <summary>
            Creates a rotation matrix.
            </summary>
      <param name="angle">The rotation angle in radians.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.CreateScale(DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Creates a scaling matrix.
            </summary>
      <param name="scale">Amounts to scale by the x, and y-axis.</param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.CreateScale(System.Double)">
      <summary>
            Creates a uniform scaling matrix.
            </summary>
      <param name="scale">
            The uniform scale factor that is applied to the x- and y-axis.
            </param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.CreateScale(System.Double,System.Double)">
      <summary>
            Creates a scaling matrix.
            </summary>
      <param name="scaleX">The value to scale by on the x-axis.</param>
      <param name="scaleY">The value to scale by on the y-axis.</param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix22D.Determinant">
      <summary>
            Returns the determinant of this matrix.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Divide(DigitalRune.Mathematics.Algebra.Matrix22D,System.Double)">
      <summary>
            Divides a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>The matrix with each element divided by scalar.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Equals(DigitalRune.Mathematics.Algebra.Matrix22D)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same 
            type and represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.GetColumn(System.Int32)">
      <summary>
            Gets a column as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" />.
            </summary>
      <param name="index">The index of the column.</param>
      <returns>The column vector</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.GetRow(System.Int32)">
      <summary>
            Gets a row as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" />.
            </summary>
      <param name="index">The index of the row.</param>
      <returns>The row vector</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix22D.Identity">
      <summary>
            Returns the 2 x 2 identity matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix22D.Inverse">
      <summary>
            Returns the inverse of this matrix.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Invert">
      <summary>
            Inverts the matrix.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix22D.IsNaN">
      <summary>
            Gets a value indicating whether an element of the matrix is <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix22D.IsSymmetric">
      <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix22D.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="index">The index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix22D.Item(System.Int32,System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="row">The row index.</param>
      <param name="column">The column index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The index [<paramref name="row" />, <paramref name="column" />] is out of range.
            </exception>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix22D.M00">
      <summary>
            The element in first row, first column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix22D.M01">
      <summary>
            The element in first row, second column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix22D.M10">
      <summary>
            The element in second row, first column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix22D.M11">
      <summary>
            The element in second row, second column.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Multiply(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Matrix22D)">
      <summary>
            Multiplies two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>The matrix with the product the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Multiply(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Multiplies a matrix with a column vector.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="vector">The column vector.</param>
      <returns>The resulting column vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Multiply(System.Double,DigitalRune.Mathematics.Algebra.Matrix22D)">
      <summary>
            Multiplies a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Negate(DigitalRune.Mathematics.Algebra.Matrix22D)">
      <summary>
            Negates a matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix22D.One">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D" /> with all of its components set to one.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Addition(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Matrix22D)">
      <summary>
            Adds two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second Matrix.</param>
      <returns>The sum of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Division(DigitalRune.Mathematics.Algebra.Matrix22D,System.Double)">
      <summary>
            Divides a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>The matrix with each element divided by scalar.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Equality(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Matrix22D)">
      <summary>
            Tests if two matrices are equal.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are equal; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix22D)~System.Double[0:,0:]">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D" /> 
            to a 2-dimensional double array.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix22D)~DigitalRune.Mathematics.Algebra.Matrix22F">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F" />.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix22D)~System.Double[][]">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D" /> 
            to a jagged double array.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Implicit(DigitalRune.Mathematics.Algebra.Matrix22D)~DigitalRune.Mathematics.Algebra.MatrixD">
      <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D" /> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" />.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Inequality(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Matrix22D)">
      <summary>
            Tests if two matrices are not equal.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are different; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Matrix22D)">
      <summary>
            Multiplies two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>The matrix with the product the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Multiplies a matrix with a column vector.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="vector">The column vector.</param>
      <returns>The resulting column vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix22D,System.Double)">
      <summary>
            Multiplies a matrix and a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Multiply(System.Double,DigitalRune.Mathematics.Algebra.Matrix22D)">
      <summary>
            Multiplies a matrix by a scalar.
            </summary>
      <param name="scalar">The scalar.</param>
      <param name="matrix">The matrix.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Subtraction(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Matrix22D)">
      <summary>
            Subtracts two matrices.
            </summary>
      <param name="minuend">The first matrix (minuend).</param>
      <param name="subtrahend">The second matrix (subtrahend).</param>
      <returns>The difference of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Matrix22D)">
      <summary>
            Negates a matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.SetColumn(System.Int32,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Sets a column from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" />.
            </summary>
      <param name="index">The index of the column.</param>
      <param name="columnVector">The column vector.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.SetRow(System.Int32,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Sets a row from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" />.
            </summary>
      <param name="index">The index of the row (0, 1, or 2).</param>
      <param name="rowVector">The row vector.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Subtract(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Matrix22D)">
      <summary>
            Subtracts two matrices.
            </summary>
      <param name="minuend">The first matrix (minuend).</param>
      <param name="subtrahend">The second matrix (subtrahend).</param>
      <returns>The difference of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ToArray1D(DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Converts this matrix to an array of double values.
            </summary>
      <param name="order">The order of the matrix elements in the array.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ToArray2D">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D" /> to a 2-dimensional double array.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ToArrayJagged">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D" /> to a jagged double array.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ToList(DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Converts this matrix to a list of double values.
            </summary>
      <param name="order">The order of the matrix elements in the list.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ToMatrix22F">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ToMatrixD">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D" /> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ToString">
      <summary>
            Returns the string representation of this matrix.
            </summary>
      <returns>The string representation of this matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of this matrix using the specified 
            culture-specific format information.
            </summary>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific 
            formatting information
            </param>
      <returns>The string representation of this matrix.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix22D.Trace">
      <summary>
            Gets the matrix trace (the sum of the diagonal elements).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Transpose">
      <summary>
            Transposes this matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix22D.Transposed">
      <summary>
            Returns the transposed of this matrix.
            </summary>
      <returns>The transposed of this matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.TryInvert">
      <summary>
            Inverts the matrix if it is invertible.
            </summary>
      <returns>
        <see langword="true" /> if the matrix is invertible; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix22D.Zero">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D" /> with all of its components set to zero.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.Matrix22F">
      <summary>
            Defines a 2 x 2 matrix (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.#ctor(System.Collections.Generic.IList{System.Single},DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F" /> struct.
            </summary>
      <param name="elements">The list with the initial values for the matrix elements.</param>
      <param name="order">The order of the matrix elements in <paramref name="elements" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="elements" /> has less than 4 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F" /> struct.
            </summary>
      <param name="elementValue">The initial value for the matrix elements.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F" /> class.
            </summary>
      <param name="m00">The element in the first row, first column.</param>
      <param name="m01">The element in the first row, second column.</param>
      <param name="m10">The element in the second row, first column.</param>
      <param name="m11">The element in the second row, second column.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.#ctor(System.Single[0:,0:])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F" /> struct.
            </summary>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> has less than 2x2 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.#ctor(System.Single[],DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F" /> struct.
            </summary>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <param name="order">The order of the matrix elements in <paramref name="elements" />.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> has less than 4 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.#ctor(System.Single[][])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F" /> struct.
            </summary>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> has less than 2x2 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> or the arrays in elements[0] must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Absolute">
      <summary>
            Sets each matrix element to its absolute value.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Absolute(DigitalRune.Mathematics.Algebra.Matrix22F)">
      <summary>
            Returns a matrix with the absolute values of the elements of the given matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>A matrix with the absolute values of the elements of the given matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Add(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Matrix22F)">
      <summary>
            Adds two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second Matrix.</param>
      <returns>The sum of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Matrix22F)">
      <summary>
            Determines whether two matrices are equal (regarding the 
            tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />).
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Matrix22F,System.Single)">
      <summary>
            Determines whether two matrices are equal (regarding a specific 
            tolerance).
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if the matrices are equal (within the tolerance 
            <paramref name="epsilon" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ClampToZero">
      <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix22F)">
      <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>
            The matrix with small elements clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix22F,System.Single)">
      <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
            The matrix with small elements clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ClampToZero(System.Single)">
      <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
      <param name="epsilon">The tolerance value.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.CreateRotation(System.Single)">
      <summary>
            Creates a rotation matrix.
            </summary>
      <param name="angle">The rotation angle in radians.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.CreateScale(DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Creates a scaling matrix.
            </summary>
      <param name="scale">Amounts to scale by the x, and y-axis.</param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.CreateScale(System.Single)">
      <summary>
            Creates a uniform scaling matrix.
            </summary>
      <param name="scale">
            The uniform scale factor that is applied to the x- and y-axis.
            </param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.CreateScale(System.Single,System.Single)">
      <summary>
            Creates a scaling matrix.
            </summary>
      <param name="scaleX">The value to scale by on the x-axis.</param>
      <param name="scaleY">The value to scale by on the y-axis.</param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix22F.Determinant">
      <summary>
            Returns the determinant of this matrix.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Divide(DigitalRune.Mathematics.Algebra.Matrix22F,System.Single)">
      <summary>
            Divides a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>The matrix with each element divided by scalar.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Equals(DigitalRune.Mathematics.Algebra.Matrix22F)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same 
            type and represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.GetColumn(System.Int32)">
      <summary>
            Gets a column as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />.
            </summary>
      <param name="index">The index of the column.</param>
      <returns>The column vector</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.GetRow(System.Int32)">
      <summary>
            Gets a row as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />.
            </summary>
      <param name="index">The index of the row.</param>
      <returns>The row vector</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix22F.Identity">
      <summary>
            Returns the 2 x 2 identity matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix22F.Inverse">
      <summary>
            Returns the inverse of this matrix.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Invert">
      <summary>
            Inverts the matrix.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix22F.IsNaN">
      <summary>
            Gets a value indicating whether an element of the matrix is <see cref="F:System.Single.NaN" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix22F.IsSymmetric">
      <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix22F.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="index">The index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix22F.Item(System.Int32,System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="row">The row index.</param>
      <param name="column">The column index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The index [<paramref name="row" />, <paramref name="column" />] is out of range.
            </exception>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix22F.M00">
      <summary>
            The element in first row, first column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix22F.M01">
      <summary>
            The element in first row, second column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix22F.M10">
      <summary>
            The element in second row, first column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix22F.M11">
      <summary>
            The element in second row, second column.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Multiply(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Matrix22F)">
      <summary>
            Multiplies two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>The matrix with the product the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Multiply(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Multiplies a matrix with a column vector.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="vector">The column vector.</param>
      <returns>The resulting column vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Multiply(System.Single,DigitalRune.Mathematics.Algebra.Matrix22F)">
      <summary>
            Multiplies a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Negate(DigitalRune.Mathematics.Algebra.Matrix22F)">
      <summary>
            Negates a matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix22F.One">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F" /> with all of its components set to one.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Addition(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Matrix22F)">
      <summary>
            Adds two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second Matrix.</param>
      <returns>The sum of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Division(DigitalRune.Mathematics.Algebra.Matrix22F,System.Single)">
      <summary>
            Divides a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>The matrix with each element divided by scalar.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Equality(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Matrix22F)">
      <summary>
            Tests if two matrices are equal.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are equal; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix22F)~System.Single[][]">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F" /> 
            to a jagged float array.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix22F)~System.Single[0:,0:]">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F" /> 
            to a 2-dimensional float array.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Implicit(DigitalRune.Mathematics.Algebra.Matrix22F)~DigitalRune.Mathematics.Algebra.Matrix22D">
      <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D" />.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Implicit(DigitalRune.Mathematics.Algebra.Matrix22F)~DigitalRune.Mathematics.Algebra.MatrixF">
      <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F" /> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" />.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Inequality(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Matrix22F)">
      <summary>
            Tests if two matrices are not equal.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are different; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Matrix22F)">
      <summary>
            Multiplies two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>The matrix with the product the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Multiplies a matrix with a column vector.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="vector">The column vector.</param>
      <returns>The resulting column vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix22F,System.Single)">
      <summary>
            Multiplies a matrix and a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Multiply(System.Single,DigitalRune.Mathematics.Algebra.Matrix22F)">
      <summary>
            Multiplies a matrix by a scalar.
            </summary>
      <param name="scalar">The scalar.</param>
      <param name="matrix">The matrix.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Subtraction(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Matrix22F)">
      <summary>
            Subtracts two matrices.
            </summary>
      <param name="minuend">The first matrix (minuend).</param>
      <param name="subtrahend">The second matrix (subtrahend).</param>
      <returns>The difference of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Matrix22F)">
      <summary>
            Negates a matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.SetColumn(System.Int32,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Sets a column from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />.
            </summary>
      <param name="index">The index of the column.</param>
      <param name="columnVector">The column vector.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.SetRow(System.Int32,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Sets a row from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />.
            </summary>
      <param name="index">The index of the row (0, 1, or 2).</param>
      <param name="rowVector">The row vector.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Subtract(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Matrix22F)">
      <summary>
            Subtracts two matrices.
            </summary>
      <param name="minuend">The first matrix (minuend).</param>
      <param name="subtrahend">The second matrix (subtrahend).</param>
      <returns>The difference of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ToArray1D(DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Converts this matrix to an array of float values.
            </summary>
      <param name="order">The order of the matrix elements in the array.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ToArray2D">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F" /> to a 2-dimensional float array.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ToArrayJagged">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F" /> to a jagged float array.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ToList(DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Converts this matrix to a list of float values.
            </summary>
      <param name="order">The order of the matrix elements in the list.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ToMatrix22D">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ToMatrixF">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F" /> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ToString">
      <summary>
            Returns the string representation of this matrix.
            </summary>
      <returns>The string representation of this matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of this matrix using the specified 
            culture-specific format information.
            </summary>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific 
            formatting information
            </param>
      <returns>The string representation of this matrix.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix22F.Trace">
      <summary>
            Gets the matrix trace (the sum of the diagonal elements).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Transpose">
      <summary>
            Transposes this matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix22F.Transposed">
      <summary>
            Returns the transposed of this matrix.
            </summary>
      <returns>The transposed of this matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.TryInvert">
      <summary>
            Inverts the matrix if it is invertible.
            </summary>
      <returns>
        <see langword="true" /> if the matrix is invertible; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix22F.Zero">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F" /> with all of its components set to zero.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.Matrix33D">
      <summary>
            Defines a 3 x 3 matrix (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.#ctor(System.Collections.Generic.IList{System.Double},DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D" /> struct.
            </summary>
      <param name="elements">The list with the initial values for the matrix elements.</param>
      <param name="order">The order of the matrix elements in <paramref name="elements" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="elements" /> has less than 9 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D" /> struct.
            </summary>
      <param name="elementValue">The initial value for the matrix elements.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D" /> class.
            </summary>
      <param name="m00">The element in the first row, first column.</param>
      <param name="m01">The element in the first row, second column.</param>
      <param name="m02">The element in the first row, third column.</param>
      <param name="m10">The element in the second row, first column.</param>
      <param name="m11">The element in the second row, second column.</param>
      <param name="m12">The element in the second row, third column.</param>
      <param name="m20">The element in the third row, first column.</param>
      <param name="m21">The element in the third row, second column.</param>
      <param name="m22">The element in the third row, third column.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.#ctor(System.Double[0:,0:])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D" /> struct.
            </summary>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> has less than 3x3 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> or the arrays in elements[0] must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.#ctor(System.Double[],DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D" /> struct.
            </summary>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <param name="order">The order of the matrix elements in <paramref name="elements" />.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> has less than 9 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.#ctor(System.Double[][])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D" /> struct.
            </summary>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> has less than 3x3 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> or the arrays in elements[0] must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Absolute">
      <summary>
            Sets each matrix element to its absolute value.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Absolute(DigitalRune.Mathematics.Algebra.Matrix33D)">
      <summary>
            Returns a matrix with the absolute values of the elements of the given matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>A matrix with the absolute values of the elements of the given matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Add(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Matrix33D)">
      <summary>
            Adds two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second Matrix.</param>
      <returns>The sum of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Matrix33D)">
      <summary>
            Determines whether two matrices are equal (regarding the 
            tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />).
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Matrix33D,System.Double)">
      <summary>
            Determines whether two matrices are equal (regarding a specific 
            tolerance).
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if the matrices are equal (within the tolerance 
            <paramref name="epsilon" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ClampToZero">
      <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix33D)">
      <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>
            The matrix with small elements clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix33D,System.Double)">
      <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
            The matrix with small elements clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ClampToZero(System.Double)">
      <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
      <param name="epsilon">The tolerance value.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.CreateRotation(DigitalRune.Mathematics.Algebra.QuaternionD)">
      <summary>
            Creates a rotation matrix from a unit quaternion.
            </summary>
      <param name="rotation">The rotation described by a unit quaternion.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.CreateRotation(DigitalRune.Mathematics.Algebra.Vector3D,System.Double)">
      <summary>
            Creates a rotation matrix from axis and angle.
            </summary>
      <param name="axis">The rotation axis. (Does not need to be normalized.)</param>
      <param name="angle">The rotation angle in radians.</param>
      <returns>The created rotation matrix.</returns>
      <exception cref="T:System.ArgumentException">The axis vector has 0 length.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.CreateRotationX(System.Double)">
      <summary>
            Creates a matrix that specifies a rotation around the x-axis.
            </summary>
      <param name="angle">The rotation angle in radians.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.CreateRotationY(System.Double)">
      <summary>
            Creates a matrix that specifies a rotation around the y-axis.
            </summary>
      <param name="angle">The rotation angle in radians.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.CreateRotationZ(System.Double)">
      <summary>
            Creates a matrix that specifies a rotation around the z-axis.
            </summary>
      <param name="angle">The rotation angle in radians.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.CreateScale(DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Creates a scaling matrix.
            </summary>
      <param name="scale">Amounts to scale by the x, y, and z-axis.</param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.CreateScale(System.Double)">
      <summary>
            Creates a uniform scaling matrix.
            </summary>
      <param name="scale">
            The uniform scale factor that is applied to the x-, y-, and z-axis.
            </param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.CreateScale(System.Double,System.Double,System.Double)">
      <summary>
            Creates a scaling matrix.
            </summary>
      <param name="scaleX">The value to scale by on the x-axis.</param>
      <param name="scaleY">The value to scale by on the y-axis.</param>
      <param name="scaleZ">The value to scale by on the z-axis.</param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix33D.Determinant">
      <summary>
            Returns the determinant of this matrix.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Divide(DigitalRune.Mathematics.Algebra.Matrix33D,System.Double)">
      <summary>
            Divides a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>The matrix with each element divided by scalar.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Equals(DigitalRune.Mathematics.Algebra.Matrix33D)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same 
            type and represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.GetColumn(System.Int32)">
      <summary>
            Gets a column as <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" />.
            </summary>
      <param name="index">The index of the column (0, 1, or 2).</param>
      <returns>The column vector</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.GetRow(System.Int32)">
      <summary>
            Gets a row as <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" />.
            </summary>
      <param name="index">The index of the row (0, 1, or 2).</param>
      <returns>The row vector</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.Identity">
      <summary>
            Returns the 3 x 3 identity matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix33D.Inverse">
      <summary>
            Returns the inverse of this matrix.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Invert">
      <summary>
            Inverts the matrix.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix33D.IsNaN">
      <summary>
            Gets a value indicating whether an element of the matrix is <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix33D.IsOrthogonal">
      <summary>
            Gets a value indicating whether this instance is orthogonal.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix33D.IsRotation">
      <summary>
            Gets a value indicating whether this instance is a rotation matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix33D.IsSymmetric">
      <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix33D.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="index">The index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix33D.Item(System.Int32,System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="row">The row index.</param>
      <param name="column">The column index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The index [<paramref name="row" />, <paramref name="column" />] is out of range.
            </exception>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.M00">
      <summary>
            The element in first row, first column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.M01">
      <summary>
            The element in first row, second column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.M02">
      <summary>
            The element in first row, third column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.M10">
      <summary>
            The element in second row, first column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.M11">
      <summary>
            The element in second row, second column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.M12">
      <summary>
            The element in second row, third column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.M20">
      <summary>
            The element in third row, first column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.M21">
      <summary>
            The element in third row, second column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.M22">
      <summary>
            The element in third row, third column.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Multiply(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Matrix33D)">
      <summary>
            Multiplies two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>The matrix with the product the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Multiply(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Multiplies a matrix with a column vector.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="vector">The column vector.</param>
      <returns>The resulting column vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Multiply(System.Double,DigitalRune.Mathematics.Algebra.Matrix33D)">
      <summary>
            Multiplies a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.MultiplyTransposed(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Multiplies the transposed of the given matrix with a column vector.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="vector">The column vector.</param>
      <returns>The resulting column vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Negate(DigitalRune.Mathematics.Algebra.Matrix33D)">
      <summary>
            Negates a matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.One">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D" /> with all of its components set to one.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Addition(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Matrix33D)">
      <summary>
            Adds two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second Matrix.</param>
      <returns>The sum of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Division(DigitalRune.Mathematics.Algebra.Matrix33D,System.Double)">
      <summary>
            Divides a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>The matrix with each element divided by scalar.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Equality(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Matrix33D)">
      <summary>
            Tests if two matrices are equal.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are equal; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix33D)~System.Double[0:,0:]">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D" /> 
            to a 2-dimensional double array.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix33D)~DigitalRune.Mathematics.Algebra.Matrix33F">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F" />.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix33D)~System.Double[][]">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D" /> to a jagged double array.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Implicit(DigitalRune.Mathematics.Algebra.Matrix33D)~DigitalRune.Mathematics.Algebra.MatrixD">
      <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D" /> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" />.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Inequality(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Matrix33D)">
      <summary>
            Tests if two matrices are not equal.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are different; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Matrix33D)">
      <summary>
            Multiplies two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>The matrix with the product the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Multiplies a matrix with a column vector.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="vector">The column vector.</param>
      <returns>The resulting column vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix33D,System.Double)">
      <summary>
            Multiplies a matrix and a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Multiply(System.Double,DigitalRune.Mathematics.Algebra.Matrix33D)">
      <summary>
            Multiplies a matrix by a scalar.
            </summary>
      <param name="scalar">The scalar.</param>
      <param name="matrix">The matrix.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Subtraction(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Matrix33D)">
      <summary>
            Subtracts two matrices.
            </summary>
      <param name="minuend">The first matrix (minuend).</param>
      <param name="subtrahend">The second matrix (subtrahend).</param>
      <returns>The difference of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Matrix33D)">
      <summary>
            Negates a matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Orthogonalize">
      <summary>
            Re-orthogonalizes this instance.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.SetColumn(System.Int32,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Sets a column from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" />.
            </summary>
      <param name="index">The index of the column (0, 1, or 2).</param>
      <param name="columnVector">The column vector.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.SetRow(System.Int32,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Sets a row from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" />.
            </summary>
      <param name="index">The index of the row (0, 1, or 2).</param>
      <param name="rowVector">The row vector.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Subtract(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Matrix33D)">
      <summary>
            Subtracts two matrices.
            </summary>
      <param name="minuend">The first matrix (minuend).</param>
      <param name="subtrahend">The second matrix (subtrahend).</param>
      <returns>The difference of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ToArray1D(DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Converts this matrix to an array of double values.
            </summary>
      <param name="order">The order of the matrix elements in the array.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ToArray2D">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D" /> to a 2-dimensional double array.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ToArrayJagged">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D" /> to a jagged double array.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ToList(DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Converts this matrix to a list of double values.
            </summary>
      <param name="order">The order of the matrix elements in the list.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ToMatrix33F">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ToMatrixD">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D" /> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ToString">
      <summary>
            Returns the string representation of this matrix.
            </summary>
      <returns>The string representation of this matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of this matrix using the specified 
            culture-specific format information.
            </summary>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific 
            formatting information
            </param>
      <returns>The string representation of this matrix.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix33D.Trace">
      <summary>
            Gets the matrix trace (the sum of the diagonal elements).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Transpose">
      <summary>
            Transposes this matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix33D.Transposed">
      <summary>
            Returns the transposed of this matrix.
            </summary>
      <returns>The transposed of this matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.TryInvert">
      <summary>
            Inverts the matrix if it is invertible.
            </summary>
      <returns>
        <see langword="true" /> if the matrix is invertible; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.Zero">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D" /> with all of its components set to zero.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.Matrix33F">
      <summary>
            Defines a 3 x 3 matrix (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.#ctor(System.Collections.Generic.IList{System.Single},DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F" /> struct.
            </summary>
      <param name="elements">The list with the initial values for the matrix elements.</param>
      <param name="order">The order of the matrix elements in <paramref name="elements" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="elements" /> has less than 9 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F" /> struct.
            </summary>
      <param name="elementValue">The initial value for the matrix elements.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F" /> class.
            </summary>
      <param name="m00">The element in the first row, first column.</param>
      <param name="m01">The element in the first row, second column.</param>
      <param name="m02">The element in the first row, third column.</param>
      <param name="m10">The element in the second row, first column.</param>
      <param name="m11">The element in the second row, second column.</param>
      <param name="m12">The element in the second row, third column.</param>
      <param name="m20">The element in the third row, first column.</param>
      <param name="m21">The element in the third row, second column.</param>
      <param name="m22">The element in the third row, third column.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.#ctor(System.Single[0:,0:])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F" /> struct.
            </summary>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> has less than 3x3 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> or the arrays in elements[0] must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.#ctor(System.Single[],DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F" /> struct.
            </summary>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <param name="order">The order of the matrix elements in <paramref name="elements" />.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> has less than 9 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.#ctor(System.Single[][])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F" /> struct.
            </summary>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> has less than 3x3 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> or the arrays in elements[0] must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Absolute">
      <summary>
            Sets each matrix element to its absolute value.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Absolute(DigitalRune.Mathematics.Algebra.Matrix33F)">
      <summary>
            Returns a matrix with the absolute values of the elements of the given matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>A matrix with the absolute values of the elements of the given matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Add(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Matrix33F)">
      <summary>
            Adds two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second Matrix.</param>
      <returns>The sum of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Matrix33F)">
      <summary>
            Determines whether two matrices are equal (regarding the 
            tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />).
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Matrix33F,System.Single)">
      <summary>
            Determines whether two matrices are equal (regarding a specific 
            tolerance).
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if the matrices are equal (within the tolerance 
            <paramref name="epsilon" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ClampToZero">
      <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix33F)">
      <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>
            The matrix with small elements clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix33F,System.Single)">
      <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
            The matrix with small elements clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ClampToZero(System.Single)">
      <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
      <param name="epsilon">The tolerance value.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.CreateRotation(DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Creates a rotation matrix from a unit quaternion.
            </summary>
      <param name="rotation">The rotation described by a unit quaternion.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.CreateRotation(DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
      <summary>
            Creates a rotation matrix from axis and angle.
            </summary>
      <param name="axis">The rotation axis. (Does not need to be normalized.)</param>
      <param name="angle">The rotation angle in radians.</param>
      <returns>The created rotation matrix.</returns>
      <exception cref="T:System.ArgumentException">The axis vector has 0 length.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.CreateRotationX(System.Single)">
      <summary>
            Creates a matrix that specifies a rotation around the x-axis.
            </summary>
      <param name="angle">The rotation angle in radians.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.CreateRotationY(System.Single)">
      <summary>
            Creates a matrix that specifies a rotation around the y-axis.
            </summary>
      <param name="angle">The rotation angle in radians.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.CreateRotationZ(System.Single)">
      <summary>
            Creates a matrix that specifies a rotation around the z-axis.
            </summary>
      <param name="angle">The rotation angle in radians.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.CreateScale(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Creates a scaling matrix.
            </summary>
      <param name="scale">Amounts to scale by the x, y, and z-axis.</param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.CreateScale(System.Single)">
      <summary>
            Creates a uniform scaling matrix.
            </summary>
      <param name="scale">
            The uniform scale factor that is applied to the x-, y-, and z-axis.
            </param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.CreateScale(System.Single,System.Single,System.Single)">
      <summary>
            Creates a scaling matrix.
            </summary>
      <param name="scaleX">The value to scale by on the x-axis.</param>
      <param name="scaleY">The value to scale by on the y-axis.</param>
      <param name="scaleZ">The value to scale by on the z-axis.</param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix33F.Determinant">
      <summary>
            Returns the determinant of this matrix.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Divide(DigitalRune.Mathematics.Algebra.Matrix33F,System.Single)">
      <summary>
            Divides a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>The matrix with each element divided by scalar.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Equals(DigitalRune.Mathematics.Algebra.Matrix33F)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same 
            type and represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.GetColumn(System.Int32)">
      <summary>
            Gets a column as <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </summary>
      <param name="index">The index of the column (0, 1, or 2).</param>
      <returns>The column vector</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.GetRow(System.Int32)">
      <summary>
            Gets a row as <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </summary>
      <param name="index">The index of the row (0, 1, or 2).</param>
      <returns>The row vector</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.Identity">
      <summary>
            Returns the 3 x 3 identity matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix33F.Inverse">
      <summary>
            Returns the inverse of this matrix.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Invert">
      <summary>
            Inverts the matrix.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix33F.IsNaN">
      <summary>
            Gets a value indicating whether an element of the matrix is <see cref="F:System.Single.NaN" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix33F.IsOrthogonal">
      <summary>
            Gets a value indicating whether this instance is orthogonal.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix33F.IsRotation">
      <summary>
            Gets a value indicating whether this instance is a rotation matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix33F.IsSymmetric">
      <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix33F.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="index">The index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix33F.Item(System.Int32,System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="row">The row index.</param>
      <param name="column">The column index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The index [<paramref name="row" />, <paramref name="column" />] is out of range.
            </exception>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.M00">
      <summary>
            The element in first row, first column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.M01">
      <summary>
            The element in first row, second column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.M02">
      <summary>
            The element in first row, third column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.M10">
      <summary>
            The element in second row, first column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.M11">
      <summary>
            The element in second row, second column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.M12">
      <summary>
            The element in second row, third column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.M20">
      <summary>
            The element in third row, first column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.M21">
      <summary>
            The element in third row, second column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.M22">
      <summary>
            The element in third row, third column.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Multiply(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Matrix33F)">
      <summary>
            Multiplies two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>The matrix with the product the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Multiply(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Multiplies a matrix with a column vector.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="vector">The column vector.</param>
      <returns>The resulting column vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Multiply(System.Single,DigitalRune.Mathematics.Algebra.Matrix33F)">
      <summary>
            Multiplies a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.MultiplyTransposed(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Multiplies the transposed of the given matrix with a column vector.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="vector">The column vector.</param>
      <returns>The resulting column vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Negate(DigitalRune.Mathematics.Algebra.Matrix33F)">
      <summary>
            Negates a matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.One">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F" /> with all of its components set to one.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Addition(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Matrix33F)">
      <summary>
            Adds two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second Matrix.</param>
      <returns>The sum of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Division(DigitalRune.Mathematics.Algebra.Matrix33F,System.Single)">
      <summary>
            Divides a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>The matrix with each element divided by scalar.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Equality(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Matrix33F)">
      <summary>
            Tests if two matrices are equal.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are equal; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix33F)~System.Single[0:,0:]">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F" /> 
            to a 2-dimensional float array.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix33F)~System.Single[][]">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F" /> to 
            a jagged float array.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Implicit(DigitalRune.Mathematics.Algebra.Matrix33F)~DigitalRune.Mathematics.Algebra.Matrix33D">
      <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D" />.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Implicit(DigitalRune.Mathematics.Algebra.Matrix33F)~DigitalRune.Mathematics.Algebra.MatrixF">
      <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F" /> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" />.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Inequality(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Matrix33F)">
      <summary>
            Tests if two matrices are not equal.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are different; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Matrix33F)">
      <summary>
            Multiplies two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>The matrix with the product the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Multiplies a matrix with a column vector.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="vector">The column vector.</param>
      <returns>The resulting column vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix33F,System.Single)">
      <summary>
            Multiplies a matrix and a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Multiply(System.Single,DigitalRune.Mathematics.Algebra.Matrix33F)">
      <summary>
            Multiplies a matrix by a scalar.
            </summary>
      <param name="scalar">The scalar.</param>
      <param name="matrix">The matrix.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Subtraction(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Matrix33F)">
      <summary>
            Subtracts two matrices.
            </summary>
      <param name="minuend">The first matrix (minuend).</param>
      <param name="subtrahend">The second matrix (subtrahend).</param>
      <returns>The difference of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Matrix33F)">
      <summary>
            Negates a matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Orthogonalize">
      <summary>
            Re-orthogonalizes this instance.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.SetColumn(System.Int32,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Sets a column from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </summary>
      <param name="index">The index of the column (0, 1, or 2).</param>
      <param name="columnVector">The column vector.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.SetRow(System.Int32,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Sets a row from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </summary>
      <param name="index">The index of the row (0, 1, or 2).</param>
      <param name="rowVector">The row vector.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Subtract(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Matrix33F)">
      <summary>
            Subtracts two matrices.
            </summary>
      <param name="minuend">The first matrix (minuend).</param>
      <param name="subtrahend">The second matrix (subtrahend).</param>
      <returns>The difference of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ToArray1D(DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Converts this matrix to an array of float values.
            </summary>
      <param name="order">The order of the matrix elements in the array.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ToArray2D">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F" /> to a 2-dimensional float array.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ToArrayJagged">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F" /> to a jagged float array.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ToList(DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Converts this matrix to a list of float values.
            </summary>
      <param name="order">The order of the matrix elements in the list.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ToMatrix33D">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ToMatrixF">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F" /> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ToString">
      <summary>
            Returns the string representation of this matrix.
            </summary>
      <returns>The string representation of this matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of this matrix using the specified 
            culture-specific format information.
            </summary>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific 
            formatting information
            </param>
      <returns>The string representation of this matrix.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix33F.Trace">
      <summary>
            Gets the matrix trace (the sum of the diagonal elements).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Transpose">
      <summary>
            Transposes this matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix33F.Transposed">
      <summary>
            Returns the transposed of this matrix.
            </summary>
      <returns>The transposed of this matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.TryInvert">
      <summary>
            Inverts the matrix if it is invertible.
            </summary>
      <returns>
        <see langword="true" /> if the matrix is invertible; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.Zero">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F" /> with all of its components set to zero.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.Matrix44D">
      <summary>
            Defines a 4 x 4 matrix (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.#ctor(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" /> struct.
            </summary>
      <param name="minor">The upper left 3x3 submatrix.</param>
      <param name="translation">The translation vector.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.#ctor(System.Collections.Generic.IList{System.Double},DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" /> struct.
            </summary>
      <param name="elements">The list with the initial values for the matrix elements.</param>
      <param name="order">The order of the matrix elements in <paramref name="elements" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="elements" /> has less than 16 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" /> struct.
            </summary>
      <param name="elementValue">The initial value for the matrix elements.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" /> class.
            </summary>
      <param name="m00">The element in the first row, first column.</param>
      <param name="m01">The element in the first row, second column.</param>
      <param name="m02">The element in the first row, third column.</param>
      <param name="m03">The element in the first row, fourth column.</param>
      <param name="m10">The element in the second row, first column.</param>
      <param name="m11">The element in the second row, second column.</param>
      <param name="m12">The element in the second row, third column.</param>
      <param name="m13">The element in the second row, fourth column.</param>
      <param name="m20">The element in the third row, first column.</param>
      <param name="m21">The element in the third row, second column.</param>
      <param name="m22">The element in the third row, third column.</param>
      <param name="m23">The element in the third row, fourth column.</param>
      <param name="m30">The element in the fourth row, first column</param>
      <param name="m31">The element in the fourth row, second column</param>
      <param name="m32">The element in the fourth row, third column</param>
      <param name="m33">The element in the fourth row, fourth column</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.#ctor(System.Double[0:,0:])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" /> struct.
            </summary>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> has less than 4x4 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.#ctor(System.Double[],DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" /> struct.
            </summary>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <param name="order">The order of the matrix elements in <paramref name="elements" />.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> has less than 16 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.#ctor(System.Double[][])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D" /> struct.
            </summary>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> has less than 4x4 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> or the arrays in elements[0] must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Absolute">
      <summary>
            Sets each matrix element to its absolute value.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Absolute(DigitalRune.Mathematics.Algebra.Matrix44D)">
      <summary>
            Returns a matrix with the absolute values of the elements of the given matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>A matrix with the absolute values of the elements of the given matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Add(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Matrix44D)">
      <summary>
            Adds two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second Matrix.</param>
      <returns>The sum of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Matrix44D)">
      <summary>
            Determines whether two matrices are equal (regarding the 
            tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />).
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Matrix44D,System.Double)">
      <summary>
            Determines whether two matrices are equal (regarding a specific 
            tolerance).
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if the matrices are equal (within the tolerance 
            <paramref name="epsilon" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ClampToZero">
      <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix44D)">
      <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>
            The matrix with small elements clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix44D,System.Double)">
      <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
            The matrix with small elements clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ClampToZero(System.Double)">
      <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
      <param name="epsilon">The tolerance value.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateLookAt(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Creates a right-handed look-at matrix (view matrix). (Only available in the XNA-compatible 
            build.)
            </summary>
      <param name="position">The position of the viewer.</param>
      <param name="target">The target at which the viewer is looking.</param>
      <param name="upVector">
            The direction that is "up" from the viewer's point of view. (Does not need to be 
            normalized.)
            </param>
      <returns>The right-handed look-at matrix (view matrix).</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> is the same as <paramref name="target" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="upVector" /> is (0, 0, 0).
            </exception>
      <exception cref="T:System.DivideByZeroException">
            The camera direction (<paramref name="target" /> - <paramref name="position" />) 
            is probably pointing in the same or opposite direction as <paramref name="upVector" />. 
            (The two vectors must not be parallel.)
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateOrthographic(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a right-handed, orthographic projection matrix. (Only available in the XNA 
            compatible build.)
            </summary>
      <param name="width">The width of the view volume.</param>
      <param name="height">The height of the view volume.</param>
      <param name="zNear">
            The minimum z-value of the view volume. (Distance of the near view plane.)
            </param>
      <param name="zFar">
            The maximum z-value of the view volume. (Distance of the far view plane.)
            </param>
      <returns>The right-handed orthographic projection matrix.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="width" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="height" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="zNear" /> is negative.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="zNear" /> is greater than or equal to <paramref name="zFar" /></exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateOrthographicOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a customized (off-center), right-handed, orthographic projection matrix. (Only 
            available in the XNA-compatible build.)
            </summary>
      <param name="left">The minimum x-value of the view volume.</param>
      <param name="right">The maximum x-value of the view volume.</param>
      <param name="bottom">The minimum y-value of the view volume.</param>
      <param name="top">The maximum y-value of the view volume.</param>
      <param name="zNear">
            The minimum z-value of the view volume. (Distance of the near view plane.)
            </param>
      <param name="zFar">
            The maximum z-value of the view volume. (Distance of the far view plane.)
            </param>
      <returns>The customized (off-center), right-handed orthographic projection matrix.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="left" /> is greater than or equal to <paramref name="right" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bottom" /> is greater than or equal to <paramref name="top" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="zNear" /> is negative.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="zNear" /> is greater than or equal to <paramref name="zFar" /></exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreatePerspective(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a right-handed, perspective projection matrix. (Only available in the XNA-compatible 
            build.)
            </summary>
      <param name="width">The width of the view volume at the near view-plane.</param>
      <param name="height">The height of the view volume at the near view-plane.</param>
      <param name="zNear">
            The minimum z-value of the view volume. (Distance of the near view plane.)
            </param>
      <param name="zFar">
            The maximum z-value of the view volume. (Distance of the far view plane.)
            </param>
      <returns>The right-handed, perspective projection matrix.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="width" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="height" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="zNear" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="zNear" /> is greater than or equal to <paramref name="zFar" /></exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreatePerspectiveFieldOfView(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a right-handed, perspective projection matrix based on a field of view. (Only 
            available in the XNA-compatible build.)
            </summary>
      <param name="fieldOfViewY">The vertical field of view.</param>
      <param name="aspectRatio">The aspect ratio (width / height).</param>
      <param name="zNear">
            The minimum z-value of the view volume. (Distance of the near view plane.)
            </param>
      <param name="zFar">
            The maximum z-value of the view volume. (Distance of the far view plane.)
            </param>
      <returns>
            The right-handed, perspective projection matrix.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldOfViewY" /> is not between 0 and <c>π</c> radians (0° and 180°).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="aspectRatio" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="zNear" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="zNear" /> is greater than or equal to <paramref name="zFar" /></exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreatePerspectiveOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a customized, right-handed, perspective projection matrix. (Only available in the 
            XNA-compatible build.)
            </summary>
      <param name="left">The minimum x-value of the view volume at the near view plane.</param>
      <param name="right">The maximum x-value of the view volume at the near view plane.</param>
      <param name="bottom">The minimum y-value of the view volume at the near view plane.</param>
      <param name="top">The maximum y-value of the view volume at the near view plane.</param>
      <param name="zNear">
            The minimum z-value of the view volume. (Distance of the near view plane.)
            </param>
      <param name="zFar">
            The maximum z-value of the view volume. (Distance of the far view plane.)
            </param>
      <returns>
            The customized, right-handed, perspective projection matrix.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="left" /> is greater than or equal to <paramref name="right" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bottom" /> is greater than or equal to <paramref name="top" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="zNear" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="zNear" /> is greater than or equal to <paramref name="zFar" /></exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateRotation(DigitalRune.Mathematics.Algebra.QuaternionD)">
      <summary>
            Creates a rotation matrix from a unit quaternion.
            </summary>
      <param name="rotation">The rotation described by a unit quaternion.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateRotation(DigitalRune.Mathematics.Algebra.Vector3D,System.Double)">
      <summary>
            Creates a rotation matrix from axis and angle.
            </summary>
      <param name="axis">The rotation axis. (Does not need to be normalized.)</param>
      <param name="angle">The rotation angle in radians.</param>
      <returns>The created rotation matrix.</returns>
      <exception cref="T:System.ArgumentException">The axis vector has 0 length.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateRotationX(System.Double)">
      <summary>
            Creates a matrix that specifies a rotation around the x-axis.
            </summary>
      <param name="angle">The rotation angle in radians.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateRotationY(System.Double)">
      <summary>
            Creates a matrix that specifies a rotation around the y-axis.
            </summary>
      <param name="angle">The rotation angle in radians.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateRotationZ(System.Double)">
      <summary>
            Creates a matrix that specifies a rotation around the z-axis.
            </summary>
      <param name="angle">The rotation angle in radians.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateScale(DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Creates a scaling matrix.
            </summary>
      <param name="scale">Amounts to scale by the x, y, and z-axis.</param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateScale(System.Double)">
      <summary>
            Creates a scaling matrix.
            </summary>
      <param name="scale">
            The uniform scale factor that is applied to the x-, y-, and z-axis.
            </param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateScale(System.Double,System.Double,System.Double)">
      <summary>
            Creates a scaling matrix.
            </summary>
      <param name="scaleX">The value to scale by on the x-axis.</param>
      <param name="scaleY">The value to scale by on the y-axis.</param>
      <param name="scaleZ">The value to scale by on the z-axis.</param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateTranslation(DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Creates a translation matrix from a vector.
            </summary>
      <param name="translation">The translation.</param>
      <returns>A transformation matrix that translates vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateTranslation(System.Double,System.Double,System.Double)">
      <summary>
            Creates a translation matrix from the given values.
            </summary>
      <param name="x">The translation along the x-axis.</param>
      <param name="y">The translation along the y-axis.</param>
      <param name="z">The translation along the z-axis.</param>
      <returns>
            A transformation matrix that translates vectors.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Decompose(DigitalRune.Mathematics.Algebra.Vector3D@,DigitalRune.Mathematics.Algebra.QuaternionD@,DigitalRune.Mathematics.Algebra.Vector3D@)">
      <summary>
            Decomposes the matrix into the scale, translation, and rotation components.
            </summary>
      <param name="scale">The scale component of the matrix.</param>
      <param name="rotation">The rotation component of the matrix.</param>
      <param name="translation">The translation component of the matrix.</param>
      <returns>
        <see langword="true" /> if the matrix was successfully decomposed; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.DecomposeFast(DigitalRune.Mathematics.Algebra.Vector3D@,DigitalRune.Mathematics.Algebra.QuaternionD@,DigitalRune.Mathematics.Algebra.Vector3D@)">
      <summary>
            Decomposes the matrix into the scale, translation, and rotation components. (This method
            is faster than <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.Decompose(DigitalRune.Mathematics.Algebra.Vector3D@,DigitalRune.Mathematics.Algebra.QuaternionD@,DigitalRune.Mathematics.Algebra.Vector3D@)" />, but the matrix must be a valid
            3D scale/rotation/translation (SRT) matrix.)
            </summary>
      <param name="scale">The scale component of the matrix.</param>
      <param name="rotation">The rotation component of the matrix.</param>
      <param name="translation">The translation component of the matrix.</param>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix44D.Determinant">
      <summary>
            Returns the determinant of this matrix.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Divide(DigitalRune.Mathematics.Algebra.Matrix44D,System.Double)">
      <summary>
            Divides a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>The matrix with each element divided by scalar.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Equals(DigitalRune.Mathematics.Algebra.Matrix44D)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same 
            type and represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.FromXna(Microsoft.Xna.Framework.Matrix)">
      <summary>
            Converts a <see cref="T:Microsoft.Xna.Framework.Matrix" /> (XNA Framework) to a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> (DigitalRune 
            Mathematics).
            </summary>
      <param name="matrix">The <see cref="T:Microsoft.Xna.Framework.Matrix" /> (XNA Framework).</param>
      <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" /> (DigitalRune Mathematics).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.GetColumn(System.Int32)">
      <summary>
            Gets a column as <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" />.
            </summary>
      <param name="index">The index of the column (0, 1, 2, or 3).</param>
      <returns>The column vector</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.GetRow(System.Int32)">
      <summary>
            Gets a row as <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" />.
            </summary>
      <param name="index">The index of the row (0, 1, 2, or 3).</param>
      <returns>The row vector</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.Identity">
      <summary>
            Returns the 4 x 4 identity matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix44D.Inverse">
      <summary>
            Returns the inverse of this matrix.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Invert">
      <summary>
            Inverts the matrix.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix44D.IsNaN">
      <summary>
            Gets a value indicating whether an element of the matrix is <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix44D.IsSymmetric">
      <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix44D.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="index">The index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix44D.Item(System.Int32,System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="row">The row index.</param>
      <param name="column">The column index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The index [<paramref name="row" />, <paramref name="column" />] is out of range.
            </exception>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M00">
      <summary>
            The element in first row, first column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M01">
      <summary>
            The element in first row, second column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M02">
      <summary>
            The element in first row, third column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M03">
      <summary>
            The element in first row, fourth column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M10">
      <summary>
            The element in second row, first column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M11">
      <summary>
            The element in second row, second column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M12">
      <summary>
            The element in second row, third column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M13">
      <summary>
            The element in second row, fourth column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M20">
      <summary>
            The element in third row, first column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M21">
      <summary>
            The element in third row, second column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M22">
      <summary>
            The element in third row, third column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M23">
      <summary>
            The element in third row, fourth column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M30">
      <summary>
            The element in fourth row, first column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M31">
      <summary>
            The element in fourth row, second column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M32">
      <summary>
            The element in fourth row, third column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M33">
      <summary>
            The element in fourth row, fourth column.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix44D.Minor">
      <summary>
            Gets or sets the upper left 3x3 sub-matrix.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Multiply(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Matrix44D)">
      <summary>
            Multiplies two matrices.
            </summary>
      <param name="m1">The first matrix.</param>
      <param name="m2">The second matrix.</param>
      <returns>The matrix with the product the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Multiply(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Multiplies a matrix with a column vector.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="vector">The column vector.</param>
      <returns>The resulting column vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Multiply(System.Double,DigitalRune.Mathematics.Algebra.Matrix44D)">
      <summary>
            Multiplies a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Negate(DigitalRune.Mathematics.Algebra.Matrix44D)">
      <summary>
            Negates a matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.One">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" /> with all of its components set to one.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Addition(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Matrix44D)">
      <summary>
            Adds two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second Matrix.</param>
      <returns>The sum of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Division(DigitalRune.Mathematics.Algebra.Matrix44D,System.Double)">
      <summary>
            Divides a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>The matrix with each element divided by scalar.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Equality(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Matrix44D)">
      <summary>
            Tests if two matrices are equal.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are equal; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix44D)~System.Double[0:,0:]">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" /> 
            to a 2-dimensional double array.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix44D)~System.Double[][]">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" /> 
            to a jagged double array.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix44D)~DigitalRune.Mathematics.Algebra.Matrix44F">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" />.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix44D)~Microsoft.Xna.Framework.Matrix">
      <summary>
            Performs an conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" /> 
            (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Matrix" /> (XNA Framework).
            </summary>
      <param name="matrix">The <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" /> (DigitalRune Mathematics).</param>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Matrix" /> (XNA Framework).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Explicit(Microsoft.Xna.Framework.Matrix)~DigitalRune.Mathematics.Algebra.Matrix44D">
      <summary>
            Performs an conversion from <see cref="T:Microsoft.Xna.Framework.Matrix" /> (XNA Framework) to 
            <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" /> (DigitalRune Mathematics).
            </summary>
      <param name="matrix">The <see cref="T:Microsoft.Xna.Framework.Matrix" /> (XNA Framework).</param>
      <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" /> (DigitalRune Mathematics).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Implicit(DigitalRune.Mathematics.Algebra.Matrix44D)~DigitalRune.Mathematics.Algebra.MatrixD">
      <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" /> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" />.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Inequality(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Matrix44D)">
      <summary>
            Tests if two matrices are not equal.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are different; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Matrix44D)">
      <summary>
            Multiplies two matrices.
            </summary>
      <param name="m1">The first matrix.</param>
      <param name="m2">The second matrix.</param>
      <returns>The matrix with the product the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Multiplies the matrix with a column vector.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="vector">The vector.</param>
      <returns>The resulting column vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix44D,System.Double)">
      <summary>
            Multiplies a matrix and a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Multiply(System.Double,DigitalRune.Mathematics.Algebra.Matrix44D)">
      <summary>
            Multiplies a matrix by a scalar.
            </summary>
      <param name="scalar">The scalar.</param>
      <param name="matrix">The matrix.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Subtraction(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Matrix44D)">
      <summary>
            Subtracts two matrices.
            </summary>
      <param name="minuend">The first matrix (minuend).</param>
      <param name="subtrahend">The second matrix (subtrahend).</param>
      <returns>The difference of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Matrix44D)">
      <summary>
            Negates a matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.SetColumn(System.Int32,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Sets a column from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" />.
            </summary>
      <param name="index">The index of the column (0, 1, 2, or 3).</param>
      <param name="columnVector">The column vector.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.SetRow(System.Int32,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Sets a row from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" />.
            </summary>
      <param name="index">The index of the row (0, 1, 2, or 3).</param>
      <param name="rowVector">The row vector.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Subtract(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Matrix44D)">
      <summary>
            Subtracts two matrices.
            </summary>
      <param name="minuend">The first matrix (minuend).</param>
      <param name="subtrahend">The second matrix (subtrahend).</param>
      <returns>The difference of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ToArray1D(DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Converts this matrix to an array of double values.
            </summary>
      <param name="order">The order of the matrix elements in the array.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ToArray2D">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" /> to a 2-dimensional double array.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ToArrayJagged">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" /> to a jagged double array.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ToList(DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Converts this matrix to a list of double values.
            </summary>
      <param name="order">The order of the matrix elements in the list.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ToMatrix44F">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ToMatrixD">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" /> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" /></summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ToString">
      <summary>
            Returns the string representation of this matrix.
            </summary>
      <returns>The string representation of this matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of this matrix using the specified
            culture-specific format information.
            </summary>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>The string representation of this matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ToXna">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" /> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Matrix" /> 
            (XNA Framework).
            </summary>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Matrix" /> (XNA Framework).</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix44D.Trace">
      <summary>
            Gets the matrix trace (the sum of the diagonal elements).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.TransformDirection(DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Transforms a direction vector (or tangent vector).
            </summary>
      <param name="direction">The direction vector.</param>
      <param name="position">The position.</param>
      <returns>The transformed direction vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.TransformNormal(DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Transforms a normal vector.
            </summary>
      <param name="normal">The normal vector.</param>
      <param name="position">The position.</param>
      <returns>
            The transformed normal. (Note: The resulting vector might need to be normalized!)
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.TransformPosition(DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Transforms a position.
            </summary>
      <param name="position">The position.</param>
      <returns>The transformed position.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix44D.Translation">
      <summary>
            Gets or sets the translation vector (<see cref="F:DigitalRune.Mathematics.Algebra.Matrix44D.M03" />, <see cref="F:DigitalRune.Mathematics.Algebra.Matrix44D.M13" />, 
            <see cref="F:DigitalRune.Mathematics.Algebra.Matrix44D.M23" />) of the matrix.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Transpose">
      <summary>
            Transposes this matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix44D.Transposed">
      <summary>
            Returns the transposed of this matrix.
            </summary>
      <returns>The transposed of this matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.TryInvert">
      <summary>
            Inverts the matrix if it is invertible.
            </summary>
      <returns>
        <see langword="true" /> if the matrix is invertible; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.Zero">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" /> with all of its components set to zero.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.Matrix44F">
      <summary>
            Defines a 4 x 4 matrix (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.#ctor(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> struct.
            </summary>
      <param name="minor">The upper left 3x3 submatrix.</param>
      <param name="translation">The translation vector.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.#ctor(System.Collections.Generic.IList{System.Single},DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> struct.
            </summary>
      <param name="elements">The list with the initial values for the matrix elements.</param>
      <param name="order">The order of the matrix elements in <paramref name="elements" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="elements" /> has less than 16 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> struct.
            </summary>
      <param name="elementValue">The initial value for the matrix elements.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> class.
            </summary>
      <param name="m00">The element in the first row, first column.</param>
      <param name="m01">The element in the first row, second column.</param>
      <param name="m02">The element in the first row, third column.</param>
      <param name="m03">The element in the first row, fourth column.</param>
      <param name="m10">The element in the second row, first column.</param>
      <param name="m11">The element in the second row, second column.</param>
      <param name="m12">The element in the second row, third column.</param>
      <param name="m13">The element in the second row, fourth column.</param>
      <param name="m20">The element in the third row, first column.</param>
      <param name="m21">The element in the third row, second column.</param>
      <param name="m22">The element in the third row, third column.</param>
      <param name="m23">The element in the third row, fourth column.</param>
      <param name="m30">The element in the fourth row, first column</param>
      <param name="m31">The element in the fourth row, second column</param>
      <param name="m32">The element in the fourth row, third column</param>
      <param name="m33">The element in the fourth row, fourth column</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.#ctor(System.Single[0:,0:])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> struct.
            </summary>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> has less than 4x4 elements.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.#ctor(System.Single[],DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> struct.
            </summary>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <param name="order">The order of the matrix elements in <paramref name="elements" />.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> has less than 16 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.#ctor(System.Single[][])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F" /> struct.
            </summary>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> has less than 4x4 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> or the arrays in elements[0] must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Absolute">
      <summary>
            Sets each matrix element to its absolute value.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Absolute(DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Returns a matrix with the absolute values of the elements of the given matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>A matrix with the absolute values of the elements of the given matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Add(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Adds two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second Matrix.</param>
      <returns>The sum of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Determines whether two matrices are equal (regarding the 
            tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />).
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F,System.Single)">
      <summary>
            Determines whether two matrices are equal (regarding a specific 
            tolerance).
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if the matrices are equal (within the tolerance 
            <paramref name="epsilon" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ClampToZero">
      <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>
            The matrix with small elements clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix44F,System.Single)">
      <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
            The matrix with small elements clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ClampToZero(System.Single)">
      <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
      <param name="epsilon">The tolerance value.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateLookAt(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Creates a right-handed look-at matrix (view matrix). (Only available in the XNA-compatible 
            build.)
            </summary>
      <param name="position">The position of the viewer.</param>
      <param name="target">The target at which the viewer is looking.</param>
      <param name="upVector">
            The direction that is "up" from the viewer's point of view. (Does not need to be 
            normalized.)
            </param>
      <returns>The right-handed look-at matrix (view matrix).</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> is the same as <paramref name="target" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="upVector" /> is (0, 0, 0).
            </exception>
      <exception cref="T:System.DivideByZeroException">
            The camera direction (<paramref name="target" /> - <paramref name="position" />) 
            is probably pointing in the same or opposite direction as <paramref name="upVector" />. 
            (The two vectors must not be parallel.)
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Creates a right-handed, orthographic projection matrix. (Only available in the XNA 
            compatible build.)
            </summary>
      <param name="width">The width of the view volume.</param>
      <param name="height">The height of the view volume.</param>
      <param name="zNear">
            The minimum z-value of the view volume. (Distance of the near view plane.)
            </param>
      <param name="zFar">
            The maximum z-value of the view volume. (Distance of the far view plane.)
            </param>
      <returns>The right-handed orthographic projection matrix.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="width" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="height" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="zNear" /> is negative.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="zNear" /> is greater than or equal to <paramref name="zFar" /></exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Creates a customized (off-center), right-handed, orthographic projection matrix. (Only 
            available in the XNA-compatible build.)
            </summary>
      <param name="left">The minimum x-value of the view volume.</param>
      <param name="right">The maximum x-value of the view volume.</param>
      <param name="bottom">The minimum y-value of the view volume.</param>
      <param name="top">The maximum y-value of the view volume.</param>
      <param name="zNear">
            The minimum z-value of the view volume. (Distance of the near view plane.)
            </param>
      <param name="zFar">
            The maximum z-value of the view volume. (Distance of the far view plane.)
            </param>
      <returns>The customized (off-center), right-handed orthographic projection matrix.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="left" /> is greater than or equal to <paramref name="right" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bottom" /> is greater than or equal to <paramref name="top" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="zNear" /> is negative.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="zNear" /> is greater than or equal to <paramref name="zFar" /></exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Creates a right-handed, perspective projection matrix. (Only available in the XNA-compatible 
            build.)
            </summary>
      <param name="width">The width of the view volume at the near view-plane.</param>
      <param name="height">The height of the view volume at the near view-plane.</param>
      <param name="zNear">
            The minimum z-value of the view volume. (Distance of the near view plane.)
            </param>
      <param name="zFar">
            The maximum z-value of the view volume. (Distance of the far view plane.)
            </param>
      <returns>The right-handed, perspective projection matrix.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="width" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="height" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="zNear" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="zNear" /> is greater than or equal to <paramref name="zFar" /></exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Creates a right-handed, perspective projection matrix based on a field of view. (Only 
            available in the XNA-compatible build.)
            </summary>
      <param name="fieldOfViewY">The vertical field of view.</param>
      <param name="aspectRatio">The aspect ratio (width / height).</param>
      <param name="zNear">
            The minimum z-value of the view volume. (Distance of the near view plane.)
            </param>
      <param name="zFar">
            The maximum z-value of the view volume. (Distance of the far view plane.)
            </param>
      <returns>
            The right-handed, perspective projection matrix.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldOfViewY" /> is not between 0 and <c>π</c> radians (0° and 180°).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="aspectRatio" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="zNear" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="zNear" /> is greater than or equal to <paramref name="zFar" /></exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Creates a customized, right-handed, perspective projection matrix. (Only available in the 
            XNA-compatible build.)
            </summary>
      <param name="left">The minimum x-value of the view volume at the near view plane.</param>
      <param name="right">The maximum x-value of the view volume at the near view plane.</param>
      <param name="bottom">The minimum y-value of the view volume at the near view plane.</param>
      <param name="top">The maximum y-value of the view volume at the near view plane.</param>
      <param name="zNear">
            The minimum z-value of the view volume. (Distance of the near view plane.)
            </param>
      <param name="zFar">
            The maximum z-value of the view volume. (Distance of the far view plane.)
            </param>
      <returns>
            The customized, right-handed, perspective projection matrix.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="left" /> is greater than or equal to <paramref name="right" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bottom" /> is greater than or equal to <paramref name="top" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="zNear" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="zNear" /> is greater than or equal to <paramref name="zFar" /></exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateRotation(DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Creates a rotation matrix from a unit quaternion.
            </summary>
      <param name="rotation">The rotation described by a unit quaternion.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateRotation(DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
      <summary>
            Creates a rotation matrix from axis and angle.
            </summary>
      <param name="axis">The rotation axis. (Does not need to be normalized.)</param>
      <param name="angle">The rotation angle in radians.</param>
      <returns>The created rotation matrix.</returns>
      <exception cref="T:System.ArgumentException">The axis vector has 0 length.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateRotationX(System.Single)">
      <summary>
            Creates a matrix that specifies a rotation around the x-axis.
            </summary>
      <param name="angle">The rotation angle in radians.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateRotationY(System.Single)">
      <summary>
            Creates a matrix that specifies a rotation around the y-axis.
            </summary>
      <param name="angle">The rotation angle in radians.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateRotationZ(System.Single)">
      <summary>
            Creates a matrix that specifies a rotation around the z-axis.
            </summary>
      <param name="angle">The rotation angle in radians.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateScale(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Creates a scaling matrix.
            </summary>
      <param name="scale">Amounts to scale by the x, y, and z-axis.</param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateScale(System.Single)">
      <summary>
            Creates a scaling matrix.
            </summary>
      <param name="scale">
            The uniform scale factor that is applied to the x-, y-, and z-axis.
            </param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateScale(System.Single,System.Single,System.Single)">
      <summary>
            Creates a scaling matrix.
            </summary>
      <param name="scaleX">The value to scale by on the x-axis.</param>
      <param name="scaleY">The value to scale by on the y-axis.</param>
      <param name="scaleZ">The value to scale by on the z-axis.</param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateTranslation(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Creates a translation matrix from a vector.
            </summary>
      <param name="translation">The translation.</param>
      <returns>A transformation matrix that translates vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateTranslation(System.Single,System.Single,System.Single)">
      <summary>
            Creates a translation matrix from the given values.
            </summary>
      <param name="x">The translation along the x-axis.</param>
      <param name="y">The translation along the y-axis.</param>
      <param name="z">The translation along the z-axis.</param>
      <returns>
            A transformation matrix that translates vectors.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Decompose(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Decomposes the matrix into the scale, translation, and rotation components.
            </summary>
      <param name="scale">The scale component of the matrix.</param>
      <param name="rotation">The rotation component of the matrix.</param>
      <param name="translation">The translation component of the matrix.</param>
      <returns>
        <see langword="true" /> if the matrix was successfully decomposed; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.DecomposeFast(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Decomposes the matrix into the scale, translation, and rotation components. (This method
            is faster than <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.Decompose(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.Vector3F@)" />, but the matrix must be a valid
            3D scale/rotation/translation (SRT) matrix.)
            </summary>
      <param name="scale">The scale component of the matrix.</param>
      <param name="rotation">The rotation component of the matrix.</param>
      <param name="translation">The translation component of the matrix.</param>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix44F.Determinant">
      <summary>
            Returns the determinant of this matrix.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Divide(DigitalRune.Mathematics.Algebra.Matrix44F,System.Single)">
      <summary>
            Divides a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>The matrix with each element divided by scalar.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Equals(DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same 
            type and represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.FromXna(Microsoft.Xna.Framework.Matrix)">
      <summary>
            Converts a <see cref="T:Microsoft.Xna.Framework.Matrix" /> (XNA Framework) to a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> (DigitalRune 
            Mathematics).
            </summary>
      <param name="matrix">The <see cref="T:Microsoft.Xna.Framework.Matrix" /> (XNA Framework).</param>
      <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> (DigitalRune Mathematics).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.GetColumn(System.Int32)">
      <summary>
            Gets a column as <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </summary>
      <param name="index">The index of the column (0, 1, 2, or 3).</param>
      <returns>The column vector</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.GetRow(System.Int32)">
      <summary>
            Gets a row as <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </summary>
      <param name="index">The index of the row (0, 1, 2, or 3).</param>
      <returns>The row vector</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.Identity">
      <summary>
            Returns the 4 x 4 identity matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix44F.Inverse">
      <summary>
            Returns the inverse of this matrix.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Invert">
      <summary>
            Inverts the matrix.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix44F.IsNaN">
      <summary>
            Gets a value indicating whether an element of the matrix is <see cref="F:System.Single.NaN" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix44F.IsSymmetric">
      <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix44F.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="index">The index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix44F.Item(System.Int32,System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="row">The row index.</param>
      <param name="column">The column index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The index [<paramref name="row" />, <paramref name="column" />] is out of range.
            </exception>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M00">
      <summary>
            The element in first row, first column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M01">
      <summary>
            The element in first row, second column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M02">
      <summary>
            The element in first row, third column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M03">
      <summary>
            The element in first row, fourth column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M10">
      <summary>
            The element in second row, first column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M11">
      <summary>
            The element in second row, second column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M12">
      <summary>
            The element in second row, third column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M13">
      <summary>
            The element in second row, fourth column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M20">
      <summary>
            The element in third row, first column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M21">
      <summary>
            The element in third row, second column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M22">
      <summary>
            The element in third row, third column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M23">
      <summary>
            The element in third row, fourth column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M30">
      <summary>
            The element in fourth row, first column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M31">
      <summary>
            The element in fourth row, second column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M32">
      <summary>
            The element in fourth row, third column.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M33">
      <summary>
            The element in fourth row, fourth column.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix44F.Minor">
      <summary>
            Gets or sets the upper left 3x3 sub-matrix.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Multiply(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Multiplies two matrices.
            </summary>
      <param name="m1">The first matrix.</param>
      <param name="m2">The second matrix.</param>
      <returns>The matrix with the product the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Multiply(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Multiplies a matrix with a column vector.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="vector">The column vector.</param>
      <returns>The resulting column vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Multiply(System.Single,DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Multiplies a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Negate(DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Negates a matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.One">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> with all of its components set to one.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Addition(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Adds two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second Matrix.</param>
      <returns>The sum of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Division(DigitalRune.Mathematics.Algebra.Matrix44F,System.Single)">
      <summary>
            Divides a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>The matrix with each element divided by scalar.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Equality(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Tests if two matrices are equal.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are equal; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix44F)~System.Single[0:,0:]">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> 
            to a 2-dimensional float array.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix44F)~System.Single[][]">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> 
            to a jagged float array.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix44F)~Microsoft.Xna.Framework.Matrix">
      <summary>
            Performs an conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> 
            (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Matrix" /> (XNA Framework).
            </summary>
      <param name="matrix">The <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> (DigitalRune Mathematics).</param>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Matrix" /> (XNA Framework).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Explicit(Microsoft.Xna.Framework.Matrix)~DigitalRune.Mathematics.Algebra.Matrix44F">
      <summary>
            Performs an conversion from <see cref="T:Microsoft.Xna.Framework.Matrix" /> (XNA Framework) to 
            <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> (DigitalRune Mathematics).
            </summary>
      <param name="matrix">The <see cref="T:Microsoft.Xna.Framework.Matrix" /> (XNA Framework).</param>
      <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> (DigitalRune Mathematics).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Implicit(DigitalRune.Mathematics.Algebra.Matrix44F)~DigitalRune.Mathematics.Algebra.MatrixF">
      <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" />.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Implicit(DigitalRune.Mathematics.Algebra.Matrix44F)~DigitalRune.Mathematics.Algebra.Matrix44D">
      <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" />.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Inequality(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Tests if two matrices are not equal.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are different; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Multiplies two matrices.
            </summary>
      <param name="m1">The first matrix.</param>
      <param name="m2">The second matrix.</param>
      <returns>The matrix with the product the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Multiplies the matrix with a column vector.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="vector">The vector.</param>
      <returns>The resulting column vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix44F,System.Single)">
      <summary>
            Multiplies a matrix and a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Multiply(System.Single,DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Multiplies a matrix by a scalar.
            </summary>
      <param name="scalar">The scalar.</param>
      <param name="matrix">The matrix.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Subtraction(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Subtracts two matrices.
            </summary>
      <param name="minuend">The first matrix (minuend).</param>
      <param name="subtrahend">The second matrix (subtrahend).</param>
      <returns>The difference of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Negates a matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.SetColumn(System.Int32,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Sets a column from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </summary>
      <param name="index">The index of the column (0, 1, 2, or 3).</param>
      <param name="columnVector">The column vector.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.SetRow(System.Int32,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Sets a row from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </summary>
      <param name="index">The index of the row (0, 1, 2, or 3).</param>
      <param name="rowVector">The row vector.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Subtract(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Subtracts two matrices.
            </summary>
      <param name="minuend">The first matrix (minuend).</param>
      <param name="subtrahend">The second matrix (subtrahend).</param>
      <returns>The difference of the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ToArray1D(DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Converts this matrix to an array of float values.
            </summary>
      <param name="order">The order of the matrix elements in the array.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ToArray2D">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> to a 2-dimensional float array.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ToArrayJagged">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> to a jagged float array.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ToList(DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Converts this matrix to a list of float values.
            </summary>
      <param name="order">The order of the matrix elements in the list.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ToMatrix44D">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ToMatrixF">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" /></summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ToString">
      <summary>
            Returns the string representation of this matrix.
            </summary>
      <returns>The string representation of this matrix</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of this matrix using the specified
            culture-specific format information.
            </summary>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>The string representation of this matrix</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ToXna">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Matrix" /> 
            (XNA Framework).
            </summary>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Matrix" /> (XNA Framework).</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix44F.Trace">
      <summary>
            Gets the matrix trace (the sum of the diagonal elements).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.TransformDirection(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Transforms a direction vector (or tangent vector).
            </summary>
      <param name="direction">The direction vector.</param>
      <param name="position">The position.</param>
      <returns>The transformed direction vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.TransformNormal(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Transforms a normal vector.
            </summary>
      <param name="normal">The normal vector.</param>
      <param name="position">The position.</param>
      <returns>
            The transformed normal. (Note: The resulting vector might need to be normalized!)
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.TransformPosition(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Transforms a position.
            </summary>
      <param name="position">The position.</param>
      <returns>The transformed position.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix44F.Translation">
      <summary>
            Gets or sets the translation vector (<see cref="F:DigitalRune.Mathematics.Algebra.Matrix44F.M03" />, <see cref="F:DigitalRune.Mathematics.Algebra.Matrix44F.M13" />, 
            <see cref="F:DigitalRune.Mathematics.Algebra.Matrix44F.M23" />) 
            of the matrix.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Transpose">
      <summary>
            Transposes this matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Matrix44F.Transposed">
      <summary>
            Returns the transposed of this matrix.
            </summary>
      <returns>The transposed of this matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.TryInvert">
      <summary>
            Inverts the matrix if it is invertible.
            </summary>
      <returns>
        <see langword="true" /> if the matrix is invertible; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.Zero">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" /> with all of its components set to zero.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.MatrixD">
      <summary>
            Defines an m x n matrix (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" /> class with 4 x 4 matrix elements.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.#ctor(System.Double[0:,0:])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" /> class.
            </summary>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.#ctor(System.Double[][])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" /> class.
            </summary>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <exception cref="T:System.IndexOutOfRangeException">
            An array in <paramref name="elements" /> has less elements than the first array in 
            <paramref name="elements" />.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> or the arrays in elements[0] must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" /> class.
            </summary>
      <param name="numberOfRows">The number of rows.</param>
      <param name="numberOfColumns">The number of columns.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="numberOfRows" /> or <paramref name="numberOfColumns" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.#ctor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" /> class.
            </summary>
      <param name="numberOfRows">The number of rows <i>m</i>.</param>
      <param name="numberOfColumns">The number of columns <i>n</i>.</param>
      <param name="elements">The list with the initial values for the matrix elements.</param>
      <param name="order">The order of the matrix elements in <paramref name="elements" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="elements" /> has less than <i>m</i> x <i>n</i> elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.#ctor(System.Int32,System.Int32,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" /> class.
            Each element is set to <paramref name="value" />.
            </summary>
      <param name="numberOfRows">The number of rows.</param>
      <param name="numberOfColumns">The number of columns.</param>
      <param name="value">The initial value for the matrix elements.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.#ctor(System.Int32,System.Int32,System.Double[],DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" /> class.
            </summary>
      <param name="numberOfRows">The number of rows <i>m</i>.</param>
      <param name="numberOfColumns">The number of columns <i>n</i>.</param>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <param name="order">The order of the matrix elements in <paramref name="elements" />.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> has less than <i>m</i> x <i>n</i> elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            Couldn't deserialize <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Absolute">
      <summary>
            Sets each matrix element to its absolute value.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Absolute(DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Returns a matrix with the absolute values of the elements of the given matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>A matrix with the absolute values of the elements of the given matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Add(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Adds two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second Matrix.</param>
      <returns>The sum of the two matrices.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix1" /> or <paramref name="matrix2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of rows or columns of the matrices do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Determines whether two matrices are equal (regarding the 
            tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />).
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />); otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix1" /> or <paramref name="matrix2" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.MatrixD,System.Double)">
      <summary>
            Determines whether two matrices are equal (regarding a specific 
            tolerance).
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if the matrices are equal (within the tolerance 
            <paramref name="epsilon" />); otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix1" /> or <paramref name="matrix2" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ClampToZero">
      <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ClampToZero(DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>
            The matrix with small elements clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ClampToZero(DigitalRune.Mathematics.Algebra.MatrixD,System.Double)">
      <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
            The matrix with small elements clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ClampToZero(System.Double)">
      <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
      <param name="epsilon">The tolerance value.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Clone">
      <summary>
            Clones this instance.
            </summary>
      <returns>A copy of this instance.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.CreateIdentity(System.Int32,System.Int32)">
      <summary>
            Creates an identity matrix.
            </summary>
      <param name="numberOfRows">The number of rows.</param>
      <param name="numberOfColumns">The number of columns.</param>
      <returns>An identity matrix.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.Determinant">
      <summary>
            Returns the determinant of this matrix.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">Matrix must be square.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Divide(DigitalRune.Mathematics.Algebra.MatrixD,System.Double)">
      <summary>
            Divides a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>The matrix with each element divided by scalar.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Equals(DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same 
            type and represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.GetColumn(System.Int32)">
      <summary>
            Gets the column with the given index.
            </summary>
      <param name="index">The index.</param>
      <returns>The column with the given index.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.GetMinor(System.Int32,System.Int32)">
      <summary>
            Gets the minor matrix.
            </summary>
      <param name="row">The row.</param>
      <param name="column">The column.</param>
      <returns>The minor matrix.</returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            Cannot get the minor matrix of a 1x1 matrix.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="row" /> or <paramref name="column" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target 
            object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.
            </param>
      <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. 
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.GetRow(System.Int32)">
      <summary>
            Gets the row with the given index.
            </summary>
      <param name="index">The index.</param>
      <returns>The row with the given index.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.GetSchema">
      <summary>
            This property is reserved, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class 
            instead.
            </summary>
      <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is 
            produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and 
            consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.GetSubmatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Gets a submatrix of this matrix.
            </summary>
      <param name="startRow">The index of the start row.</param>
      <param name="endRow">The index of the end row (included in the submatrix).</param>
      <param name="startColumn">The index of the start column.</param>
      <param name="endColumn">The index of the end column (included in the submatrix).</param>
      <returns>The extracted submatrix.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startRow" /> is greater than <paramref name="endRow" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startColumn" /> is greater than <paramref name="endColumn" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startRow" />, <paramref name="endRow" />, <paramref name="startColumn" />, or 
            <paramref name="endColumn" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.GetSubmatrix(System.Int32,System.Int32,System.Int32[])">
      <summary>
            Gets a submatrix of this matrix.
            </summary>
      <param name="startRow">The index of the start row.</param>
      <param name="endRow">The index of the end row (included in the submatrix).</param>
      <param name="columns">The indices of the columns.</param>
      <returns>The extracted submatrix.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startRow" /> is greater than <paramref name="endRow" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startRow" /> or <paramref name="endRow" /> is out of range.
            </exception>
      <exception cref="T:System.IndexOutOfRangeException">An index in <paramref name="columns" />
            is invalid.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.GetSubmatrix(System.Int32[],System.Int32,System.Int32)">
      <summary>
            Gets a submatrix of this matrix.
            </summary>
      <param name="rows">The indices of the rows.</param>
      <param name="startColumn">The index of the start column.</param>
      <param name="endColumn">The index of the end column (included in the submatrix).</param>
      <returns>The extracted submatrix.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startColumn" /> is greater than <paramref name="endColumn" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startColumn" /> or <paramref name="endColumn" /> is out of range.
            </exception>
      <exception cref="T:System.IndexOutOfRangeException">
            An index in <paramref name="rows" /> is invalid.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.GetSubmatrix(System.Int32[],System.Int32[])">
      <summary>
            Gets a submatrix of this matrix.
            </summary>
      <param name="rows">The indices of the rows.</param>
      <param name="columns">The indices of the columns.</param>
      <returns>The extracted submatrix.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
            An index in <paramref name="rows" /> or <paramref name="columns" /> is invalid.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.Inverse">
      <summary>
            Returns the inverse or pseudo-inverse of this matrix..
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Invert">
      <summary>
            Inverts the matrix.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.IsNaN">
      <summary>
            Gets a value indicating whether a component of the vector is <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.IsSquare">
      <summary>
            Gets a value indicating whether this matrix is a square matrix (number of rows is equal to 
            number of columns).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.IsSymmetric">
      <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="index">The index.</param>
      <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.Item(System.Int32,System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="row">The row index.</param>
      <param name="column">The column index.</param>
      <exception cref="T:System.IndexOutOfRangeException">
            The index [<paramref name="row" />, <paramref name="column" />] is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Multiply(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Multiplies two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>The matrix with the product the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Multiply(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Multiplies a matrix with a column vector.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="vector">The column vector.</param>
      <returns>The resulting column vector.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> or <paramref name="vector" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The matrix and vector dimensions are not suitable for multiplication.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Multiply(System.Double,DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Multiplies a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Negate(DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Negates a matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.Norm1">
      <summary>
            Gets the one norm of this matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.NormFrobenius">
      <summary>
            Gets the Frobenius norm of this matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.NormInfinity">
      <summary>
            Gets the infinity norm of this matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.NumberOfColumns">
      <summary>
            Gets the number of columns <i>n</i>.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.NumberOfRows">
      <summary>
            Gets the number of rows <i>m</i>.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Addition(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Adds two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second Matrix.</param>
      <returns>The sum of the two matrices.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix1" /> or <paramref name="matrix2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of rows or columns of the matrices do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Division(DigitalRune.Mathematics.Algebra.MatrixD,System.Double)">
      <summary>
            Divides a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>The matrix with each element divided by scalar.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Equality(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Tests if two matrices are equal.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are equal; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Explicit(DigitalRune.Mathematics.Algebra.MatrixD)~DigitalRune.Mathematics.Algebra.Matrix22D">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D" />.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="matrix" /> is not 2x2 matrix.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Explicit(DigitalRune.Mathematics.Algebra.MatrixD)~DigitalRune.Mathematics.Algebra.Matrix33D">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D" />.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="matrix" /> is not 3x3 matrix.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Explicit(DigitalRune.Mathematics.Algebra.MatrixD)~DigitalRune.Mathematics.Algebra.MatrixF">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" /> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" />.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Explicit(DigitalRune.Mathematics.Algebra.MatrixD)~System.Double[][]">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" /> to jagged double array.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Explicit(DigitalRune.Mathematics.Algebra.MatrixD)~System.Double[0:,0:]">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" /> to a 2-dimensional double array.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Explicit(DigitalRune.Mathematics.Algebra.MatrixD)~DigitalRune.Mathematics.Algebra.Matrix44D">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" />.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="matrix" /> is not 4x4 matrix.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Inequality(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Tests if two matrices are not equal.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are different; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Multiply(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Multiplies two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>The matrix with the product the two matrices.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix1" /> or <paramref name="matrix2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The matrix dimensions are not suitable for a matrix multiplication.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Multiply(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Multiplies a matrix with a column vector.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="vector">The column vector.</param>
      <returns>The resulting column vector.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> or <paramref name="vector" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The matrix and vector dimensions are not suitable for multiplication.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Multiply(DigitalRune.Mathematics.Algebra.MatrixD,System.Double)">
      <summary>
            Multiplies a matrix and a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Multiply(System.Double,DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Multiplies a matrix by a scalar.
            </summary>
      <param name="scalar">The scalar.</param>
      <param name="matrix">The matrix.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Subtraction(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Subtracts two matrices.
            </summary>
      <param name="minuend">The first matrix (minuend).</param>
      <param name="subtrahend">The second matrix (subtrahend).</param>
      <returns>The difference of the two matrices.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="minuend" /> or <paramref name="subtrahend" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of rows or columns of the matrices do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_UnaryNegation(DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Negates a matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ReadXml(System.Xml.XmlReader)">
      <summary>
            Generates an object from its XML representation.
            </summary>
      <param name="reader">
            The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized.
            </param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Set(DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Sets the elements of this matrix.
            </summary>
      <param name="matrix">The matrix from which the elements are copied.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows or columns of the matrices do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Set(System.Collections.Generic.IList{System.Double},DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Sets the matrix elements to the values of the list.
            </summary>
      <param name="elements">The elements list.</param>
      <param name="order">The order of the matrix elements in the list.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="elements" /> must have at least 
            <see cref="P:DigitalRune.Mathematics.Algebra.MatrixD.NumberOfRows" />*<see cref="P:DigitalRune.Mathematics.Algebra.MatrixD.NumberOfColumns" /> elements.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Set(System.Double)">
      <summary>
            Sets the matrix elements to the specified value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Set(System.Double[0:,0:])">
      <summary>
            Sets the matrix elements to the values of the array.
            </summary>
      <param name="elements">The elements array.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> must have at least 
            <see cref="P:DigitalRune.Mathematics.Algebra.MatrixD.NumberOfRows" /> x <see cref="P:DigitalRune.Mathematics.Algebra.MatrixD.NumberOfColumns" /> elements.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Set(System.Double[],DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Sets the matrix elements to the values of the array.
            </summary>
      <param name="elements">The elements array.</param>
      <param name="order">The order of the matrix elements in the array.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> must have at least
             <see cref="P:DigitalRune.Mathematics.Algebra.MatrixD.NumberOfRows" /> * <see cref="P:DigitalRune.Mathematics.Algebra.MatrixD.NumberOfColumns" /> elements.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Set(System.Double[][])">
      <summary>
            Sets the matrix elements to the values of the array.
            </summary>
      <param name="elements">The elements array.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> must have at least 
            <see cref="P:DigitalRune.Mathematics.Algebra.MatrixD.NumberOfRows" /> * <see cref="P:DigitalRune.Mathematics.Algebra.MatrixD.NumberOfColumns" /> elements.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.SetColumn(System.Int32,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Sets a column.
            </summary>
      <param name="index">The index of the column.</param>
      <param name="columnVector">The column vector.</param>
      <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="index" /> is out of range or <paramref name="columnVector" /> has to few
            elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="columnVector" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.SetIdentity">
      <summary>
            Sets this matrix to an identity matrix.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.SetRow(System.Int32,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Sets a row.
            </summary>
      <param name="index">The index of the row.</param>
      <param name="rowVector">The row vector.</param>
      <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="index" /> is out of range or <paramref name="rowVector" /> has to few
            elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="rowVector" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.SetSubmatrix(System.Int32,System.Int32,DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Sets a submatrix of this matrix.
            </summary>
      <param name="submatrix">The submatrix.</param>
      <param name="startRow">The index of the start row in this matrix.</param>
      <param name="startColumn">The index of the start column in this matrix.</param>
      <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="startRow" />, <paramref name="startColumn" /> or the dimensions of the 
            submatrix are to high, so that the submatrix does not fit into this matrix.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startRow" /> or <paramref name="startColumn" /> out of range.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="submatrix" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.SolveLinearEquations(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Solves the linear set of equations A * X = B.
            </summary>
      <param name="matrixA">
            The matrix A. (Can be rectangular. Number of rows ≥ number of columns.)
            </param>
      <param name="matrixB">
            The matrix B with the same number of rows as A and any number of columns.
            </param>
      <returns>The matrix X.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixA" /> or <paramref name="matrixB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows does not match.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows in <paramref name="matrixA" /> must be greater than or equal to the number 
            of columns.
            </exception>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix A does not have full rank.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.SolveLinearEquations(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Solves the linear set of equations A * x = b.
            </summary>
      <param name="matrixA">The matrix A. (Can be rectangular. Number of rows ≥ number of columns.)</param>
      <param name="vectorB">The column vector b with as many rows as A.</param>
      <returns>The vector x.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vectorB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows does not match.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows in matrix A must be greater than or equal to the number of columns.
            </exception>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix A does not have full rank.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Subtract(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Subtracts two matrices.
            </summary>
      <param name="minuend">The first matrix (minuend).</param>
      <param name="subtrahend">The second matrix (subtrahend).</param>
      <returns>The difference of the two matrices.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="minuend" /> or <paramref name="subtrahend" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of rows or columns of the matrices do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.System#ICloneable#Clone">
      <summary>
            Creates a copy of this instance.
            </summary>
      <returns>Copy of this instance.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ToArray1D(DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Converts this matrix to an array of double values.
            </summary>
      <param name="order">The order of the matrix elements in the array.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ToArray2D">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" /> to a 2-dimensional double array.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ToArrayJagged">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" /> to a jagged double array.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ToList(DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Converts this matrix to a list of double values.
            </summary>
      <param name="order">The order of the matrix elements in the list.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ToMatrix22D">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D" />.
            </summary>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.InvalidCastException">This matrix is not 2x2 matrix.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ToMatrix33D">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D" />.
            </summary>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.InvalidCastException">The matrix is not 3x3 matrix.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ToMatrix44D">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" />.
            </summary>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.InvalidCastException">This matrix is not 4x4 matrix.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ToMatrixF">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" /> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ToString">
      <summary>
            Returns the string representation of this matrix.
            </summary>
      <returns>The string representation of this matrix</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of this matrix using the specified 
            culture-specific format information.
            </summary>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific 
            formatting information
            </param>
      <returns>The string representation of this matrix</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.Trace">
      <summary>
            Gets the matrix trace (the sum of the diagonal elements).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Transpose">
      <summary>
            Transposes this matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.Transposed">
      <summary>
            Returns the transposed of this matrix.
            </summary>
      <returns>The transposed of this matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.TryInvert">
      <summary>
            Inverts the matrix if it is invertible.
            </summary>
      <returns>
        <see langword="true" /> if the matrix is invertible; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.WriteXml(System.Xml.XmlWriter)">
      <summary>
            Converts an object into its XML representation.
            </summary>
      <param name="writer">
            The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.
            </param>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.MatrixF">
      <summary>
            Defines an m x n matrix (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" /> class with 4 x 4 matrix elements.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" /> class.
            </summary>
      <param name="numberOfRows">The number of rows.</param>
      <param name="numberOfColumns">The number of columns.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="numberOfRows" /> or <paramref name="numberOfColumns" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.#ctor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Single},DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" /> class.
            </summary>
      <param name="numberOfRows">The number of rows <i>m</i>.</param>
      <param name="numberOfColumns">The number of columns <i>n</i>.</param>
      <param name="elements">The list with the initial values for the matrix elements.</param>
      <param name="order">The order of the matrix elements in <paramref name="elements" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="elements" /> has less than <i>m</i> x <i>n</i> elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.#ctor(System.Int32,System.Int32,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" /> class.
            Each element is set to <paramref name="value" />.
            </summary>
      <param name="numberOfRows">The number of rows.</param>
      <param name="numberOfColumns">The number of columns.</param>
      <param name="value">The initial value for the matrix elements.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.#ctor(System.Int32,System.Int32,System.Single[],DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" /> class.
            </summary>
      <param name="numberOfRows">The number of rows <i>m</i>.</param>
      <param name="numberOfColumns">The number of columns <i>n</i>.</param>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <param name="order">The order of the matrix elements in <paramref name="elements" />.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> has less than <i>m</i> x <i>n</i> elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            Couldn't deserialize <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.#ctor(System.Single[0:,0:])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" /> class.
            </summary>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.#ctor(System.Single[][])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" /> class.
            </summary>
      <param name="elements">The array with the initial values for the matrix elements.</param>
      <exception cref="T:System.IndexOutOfRangeException">
            An array in <paramref name="elements" /> has less elements than the first array in 
            <paramref name="elements" />.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> or the arrays in elements[0] must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Absolute">
      <summary>
            Sets each matrix element to its absolute value.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Absolute(DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Returns a matrix with the absolute values of the elements of the given matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>A matrix with the absolute values of the elements of the given matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Add(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Adds two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second Matrix.</param>
      <returns>The sum of the two matrices.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix1" /> or <paramref name="matrix2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of rows or columns of the matrices do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Determines whether two matrices are equal (regarding the 
            tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />).
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />); otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix1" /> or <paramref name="matrix2" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.MatrixF,System.Single)">
      <summary>
            Determines whether two matrices are equal (regarding a specific 
            tolerance).
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if the matrices are equal (within the tolerance 
            <paramref name="epsilon" />); otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix1" /> or <paramref name="matrix2" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ClampToZero">
      <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ClampToZero(DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>
            The matrix with small elements clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ClampToZero(DigitalRune.Mathematics.Algebra.MatrixF,System.Single)">
      <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
            The matrix with small elements clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ClampToZero(System.Single)">
      <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
      <param name="epsilon">The tolerance value.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Clone">
      <summary>
            Clones this instance.
            </summary>
      <returns>A copy of this instance.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.CreateIdentity(System.Int32,System.Int32)">
      <summary>
            Creates an identity matrix.
            </summary>
      <param name="numberOfRows">The number of rows.</param>
      <param name="numberOfColumns">The number of columns.</param>
      <returns>An identity matrix.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.Determinant">
      <summary>
            Returns the determinant of this matrix.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">Matrix must be square.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Divide(DigitalRune.Mathematics.Algebra.MatrixF,System.Single)">
      <summary>
            Divides a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>The matrix with each element divided by scalar.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Equals(DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same 
            type and represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.GetColumn(System.Int32)">
      <summary>
            Gets the column with the given index.
            </summary>
      <param name="index">The index.</param>
      <returns>The column with the given index.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.GetMinor(System.Int32,System.Int32)">
      <summary>
            Gets the minor matrix.
            </summary>
      <param name="row">The row.</param>
      <param name="column">The column.</param>
      <returns>The minor matrix.</returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            Cannot get the minor matrix of a 1x1 matrix.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="row" /> or <paramref name="column" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target 
            object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.
            </param>
      <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.GetRow(System.Int32)">
      <summary>
            Gets the row with the given index.
            </summary>
      <param name="index">The index.</param>
      <returns>The row with the given index.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.GetSchema">
      <summary>
            This property is reserved, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class 
            instead.
            </summary>
      <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is 
            produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and 
            consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.GetSubmatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Gets a submatrix of this matrix.
            </summary>
      <param name="startRow">The index of the start row.</param>
      <param name="endRow">The index of the end row (included in the submatrix).</param>
      <param name="startColumn">The index of the start column.</param>
      <param name="endColumn">The index of the end column (included in the submatrix).</param>
      <returns>The extracted submatrix.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startRow" /> is greater than <paramref name="endRow" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startColumn" /> is greater than <paramref name="endColumn" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startRow" />, <paramref name="endRow" />, <paramref name="startColumn" />, or 
            <paramref name="endColumn" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.GetSubmatrix(System.Int32,System.Int32,System.Int32[])">
      <summary>
            Gets a submatrix of this matrix.
            </summary>
      <param name="startRow">The index of the start row.</param>
      <param name="endRow">The index of the end row (included in the submatrix).</param>
      <param name="columns">The indices of the columns.</param>
      <returns>The extracted submatrix.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startRow" /> is greater than <paramref name="endRow" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startRow" /> or <paramref name="endRow" /> is out of range.
            </exception>
      <exception cref="T:System.IndexOutOfRangeException">An index in <paramref name="columns" />
            is invalid.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.GetSubmatrix(System.Int32[],System.Int32,System.Int32)">
      <summary>
            Gets a submatrix of this matrix.
            </summary>
      <param name="rows">The indices of the rows.</param>
      <param name="startColumn">The index of the start column.</param>
      <param name="endColumn">The index of the end column (included in the submatrix).</param>
      <returns>The extracted submatrix.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startColumn" /> is greater than <paramref name="endColumn" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startColumn" /> or <paramref name="endColumn" /> is out of range.
            </exception>
      <exception cref="T:System.IndexOutOfRangeException">
            An index in <paramref name="rows" /> is invalid.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.GetSubmatrix(System.Int32[],System.Int32[])">
      <summary>
            Gets a submatrix of this matrix.
            </summary>
      <param name="rows">The indices of the rows.</param>
      <param name="columns">The indices of the columns.</param>
      <returns>The extracted submatrix.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
            An index in <paramref name="rows" /> or <paramref name="columns" /> is invalid.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.Inverse">
      <summary>
            Returns the inverse or pseudo-inverse of this matrix.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Invert">
      <summary>
            Inverts the matrix.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.IsNaN">
      <summary>
            Gets a value indicating whether a component of the vector is <see cref="F:System.Single.NaN" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.IsSquare">
      <summary>
            Gets a value indicating whether this matrix is a square matrix (number of rows is equal to 
            number of columns).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.IsSymmetric">
      <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="index">The index.</param>
      <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.Item(System.Int32,System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="row">The row index.</param>
      <param name="column">The column index.</param>
      <exception cref="T:System.IndexOutOfRangeException">
            The index [<paramref name="row" />, <paramref name="column" />] is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Multiply(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Multiplies two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>The matrix with the product the two matrices.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Multiply(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Multiplies a matrix with a column vector.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="vector">The column vector.</param>
      <returns>The resulting column vector.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> or <paramref name="vector" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The matrix and vector dimensions are not suitable for multiplication.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Multiply(System.Single,DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Multiplies a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Negate(DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Negates a matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.Norm1">
      <summary>
            Gets the one norm of this matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.NormFrobenius">
      <summary>
            Gets the Frobenius norm of this matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.NormInfinity">
      <summary>
            Gets the infinity norm of this matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.NumberOfColumns">
      <summary>
            Gets the number of columns <i>n</i>.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.NumberOfRows">
      <summary>
            Gets the number of rows <i>m</i>.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Addition(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Adds two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second Matrix.</param>
      <returns>The sum of the two matrices.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix1" /> or <paramref name="matrix2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of rows or columns of the matrices do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Division(DigitalRune.Mathematics.Algebra.MatrixF,System.Single)">
      <summary>
            Divides a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>The matrix with each element divided by scalar.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Equality(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Tests if two matrices are equal.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are equal; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Explicit(DigitalRune.Mathematics.Algebra.MatrixF)~DigitalRune.Mathematics.Algebra.Matrix22F">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F" />.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="matrix" /> is not 2x2 matrix.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Explicit(DigitalRune.Mathematics.Algebra.MatrixF)~DigitalRune.Mathematics.Algebra.Matrix33F">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F" />.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="matrix" /> is not 3x3 matrix.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Explicit(DigitalRune.Mathematics.Algebra.MatrixF)~System.Single[][]">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" /> to 
            jagged float array.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Explicit(DigitalRune.Mathematics.Algebra.MatrixF)~System.Single[0:,0:]">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" /> to 
            a 2-dimensional float array.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Explicit(DigitalRune.Mathematics.Algebra.MatrixF)~DigitalRune.Mathematics.Algebra.Matrix44F">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" />.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="matrix" /> is not 4x4 matrix.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Implicit(DigitalRune.Mathematics.Algebra.MatrixF)~DigitalRune.Mathematics.Algebra.MatrixD">
      <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" /> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" />.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Inequality(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Tests if two matrices are not equal.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>
        <see langword="true" /> if the matrices are different; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Multiply(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Multiplies two matrices.
            </summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <returns>The matrix with the product the two matrices.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix1" /> or <paramref name="matrix2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The matrix dimensions are not suitable for a matrix multiplication.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Multiply(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Multiplies a matrix with a column vector.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="vector">The column vector.</param>
      <returns>The resulting column vector.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> or <paramref name="vector" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The matrix and vector dimensions are not suitable for multiplication.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Multiply(DigitalRune.Mathematics.Algebra.MatrixF,System.Single)">
      <summary>
            Multiplies a matrix and a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Multiply(System.Single,DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Multiplies a matrix by a scalar.
            </summary>
      <param name="scalar">The scalar.</param>
      <param name="matrix">The matrix.</param>
      <returns>
            The matrix with each element multiplied by <paramref name="scalar" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Subtraction(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Subtracts two matrices.
            </summary>
      <param name="minuend">The first matrix (minuend).</param>
      <param name="subtrahend">The second matrix (subtrahend).</param>
      <returns>The difference of the two matrices.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="minuend" /> or <paramref name="subtrahend" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of rows or columns of the matrices do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_UnaryNegation(DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Negates a matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ReadXml(System.Xml.XmlReader)">
      <summary>
            Generates an object from its XML representation.
            </summary>
      <param name="reader">
            The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized.
            </param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Set(DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Sets the elements of this matrix.
            </summary>
      <param name="matrix">The matrix from which the elements are copied.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows or columns of the matrices do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Set(System.Collections.Generic.IList{System.Single},DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Sets the matrix elements to the values of the list.
            </summary>
      <param name="elements">The elements list.</param>
      <param name="order">The order of the matrix elements in the list.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="elements" /> must have at least 
            <see cref="P:DigitalRune.Mathematics.Algebra.MatrixF.NumberOfRows" />*<see cref="P:DigitalRune.Mathematics.Algebra.MatrixF.NumberOfColumns" /> elements.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Set(System.Single)">
      <summary>
            Sets the matrix elements to the specified value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Set(System.Single[0:,0:])">
      <summary>
            Sets the matrix elements to the values of the array.
            </summary>
      <param name="elements">The elements array.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> must have at least 
            <see cref="P:DigitalRune.Mathematics.Algebra.MatrixF.NumberOfRows" /> x <see cref="P:DigitalRune.Mathematics.Algebra.MatrixF.NumberOfColumns" /> elements.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Set(System.Single[],DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Sets the matrix elements to the values of the array.
            </summary>
      <param name="elements">The elements array.</param>
      <param name="order">The order of the matrix elements in the array.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> must have at least 
            <see cref="P:DigitalRune.Mathematics.Algebra.MatrixF.NumberOfRows" />*<see cref="P:DigitalRune.Mathematics.Algebra.MatrixF.NumberOfColumns" /> elements.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Set(System.Single[][])">
      <summary>
            Sets the matrix elements to the values of the array.
            </summary>
      <param name="elements">The elements array.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> must have at least 
            <see cref="P:DigitalRune.Mathematics.Algebra.MatrixF.NumberOfRows" /> * <see cref="P:DigitalRune.Mathematics.Algebra.MatrixF.NumberOfColumns" /> elements.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.SetColumn(System.Int32,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Sets a column.
            </summary>
      <param name="index">The index of the column.</param>
      <param name="columnVector">The column vector.</param>
      <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="index" /> is out of range or <paramref name="columnVector" /> has to few
            elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="columnVector" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.SetIdentity">
      <summary>
            Sets this matrix to an identity matrix.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.SetRow(System.Int32,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Sets a row.
            </summary>
      <param name="index">The index of the row.</param>
      <param name="rowVector">The row vector.</param>
      <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="index" /> is out of range or <paramref name="rowVector" /> has to few
            elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="rowVector" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.SetSubmatrix(System.Int32,System.Int32,DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Sets a submatrix of this matrix.
            </summary>
      <param name="submatrix">The submatrix.</param>
      <param name="startRow">The index of the start row in this matrix.</param>
      <param name="startColumn">The index of the start column in this matrix.</param>
      <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="startRow" />, <paramref name="startColumn" /> or the dimensions of the 
            submatrix are to high, so that the submatrix does not fit into this matrix.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startRow" /> or <paramref name="startColumn" /> out of range.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="submatrix" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.SolveLinearEquations(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Solves the linear set of equations A * X = B.
            </summary>
      <param name="matrixA">
            The matrix A. (Can be rectangular. Number of rows ≥ number of columns.)
            </param>
      <param name="matrixB">
            The matrix B with the same number of rows as A and any number of columns.
            </param>
      <returns>The matrix X.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixA" /> or <paramref name="matrixB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows does not match.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows in <paramref name="matrixA" /> must be greater than or equal to the number 
            of columns.
            </exception>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix A does not have full rank.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.SolveLinearEquations(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Solves the linear set of equations A * x = b.
            </summary>
      <param name="matrixA">
            The matrix A. (Can be rectangular. Number of rows ≥ number of columns.)
            </param>
      <param name="vectorB">The column vector b with as many rows as A.</param>
      <returns>The vector x.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vectorB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows does not match.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows in matrix A must be greater than or equal to the number of columns.
            </exception>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix A does not have full rank.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Subtract(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Subtracts two matrices.
            </summary>
      <param name="minuend">The first matrix (minuend).</param>
      <param name="subtrahend">The second matrix (subtrahend).</param>
      <returns>The difference of the two matrices.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="minuend" /> or <paramref name="subtrahend" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of rows or columns of the matrices do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.System#ICloneable#Clone">
      <summary>
            Creates a copy of this instance.
            </summary>
      <returns>Copy of this instance.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ToArray1D(DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Converts this matrix to an array of float values.
            </summary>
      <param name="order">The order of the matrix elements in the array.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ToArray2D">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" /> to a 2-dimensional float array.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ToArrayJagged">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" /> to a jagged float array.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ToList(DigitalRune.Mathematics.Algebra.MatrixOrder)">
      <summary>
            Converts this matrix to a list of float values.
            </summary>
      <param name="order">The order of the matrix elements in the list.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ToMatrix22F">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F" />.
            </summary>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.InvalidCastException">This matrix is not 2x2 matrix.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ToMatrix33F">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F" />.
            </summary>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.InvalidCastException">The matrix is not 3x3 matrix.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ToMatrix44F">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" />.
            </summary>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.InvalidCastException">This matrix is not 4x4 matrix.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ToMatrixD">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" /> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ToString">
      <summary>
            Returns the string representation of this matrix.
            </summary>
      <returns>The string representation of this matrix</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of this matrix using the specified 
            culture-specific format information.
            </summary>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific 
            formatting information
            </param>
      <returns>The string representation of this matrix</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.Trace">
      <summary>
            Gets the matrix trace (the sum of the diagonal elements).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Transpose">
      <summary>
            Transposes this matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.Transposed">
      <summary>
            Returns the transposed of this matrix.
            </summary>
      <returns>The transposed of this matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.TryInvert">
      <summary>
            Inverts the matrix if it is invertible.
            </summary>
      <returns>
        <see langword="true" /> if the matrix is invertible; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.WriteXml(System.Xml.XmlWriter)">
      <summary>
            Converts an object into its XML representation.
            </summary>
      <param name="writer">
            The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.
            </param>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.MatrixOrder">
      <summary>
            The matrix order defines in which order the matrix elements would be stored in a 1D array.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.MatrixOrder.ColumnMajor">
      <summary>
            The matrix is stored in column-major order. (Example: <c>M00, M10, M01, M11, M02, M12</c>)
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.MatrixOrder.RowMajor">
      <summary>
            The matrix is stored in row-major order. (Example: <c>M00, M01, M02, M10, M11, M12</c>)
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.QRDecompositionD">
      <summary>
            Computes the QR Decomposition of a matrix (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QRDecompositionD.#ctor(DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Creates the QR decomposition of the given matrix.
            </summary>
      <param name="matrixA">
            The matrix A. (Can be rectangular. NumberOfRows must be ≥ NumberOfColumns.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows must be greater than or equal to the number of columns.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QRDecompositionD.H">
      <summary>
            Gets the matrix H with the Householder vectors. (This property returns the internal matrix, 
            not a copy.)
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QRDecompositionD.HasNumericallyFullRank">
      <summary>
            Gets a value indicating whether the matrix R has full rank (numerically).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QRDecompositionD.Q">
      <summary>
            Gets the orthogonal matrix Q. (This property returns the internal matrix, 
            not a copy.)
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QRDecompositionD.R">
      <summary>
            Gets the upper triangular matrix R. (This property returns the internal matrix, 
            not a copy.)
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QRDecompositionD.SolveLinearEquations(DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Returns the least squares solution for the equation <c>A * X = B</c>.
            </summary>
      <param name="matrixB">The matrix B with as many rows as A and any number of columns.</param>
      <returns>X with the least squares solution.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">The number of rows does not match.</exception>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">The matrix A does not have full rank.</exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.QRDecompositionF">
      <summary>
            Computes the QR Decomposition of a matrix (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QRDecompositionF.#ctor(DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Creates the QR decomposition of the given matrix.
            </summary>
      <param name="matrixA">
            The matrix A. (Can be rectangular. NumberOfRows must be ≥ NumberOfColumns.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows must be greater than or equal to the number of columns.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QRDecompositionF.H">
      <summary>
            Gets the matrix H with the Householder vectors. (This property returns the internal matrix, 
            not a copy.)
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QRDecompositionF.HasNumericallyFullRank">
      <summary>
            Gets a value indicating whether the matrix R has full rank (numerically).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QRDecompositionF.Q">
      <summary>
            Gets the orthogonal matrix Q. (This property returns the internal matrix, 
            not a copy.)
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QRDecompositionF.R">
      <summary>
            Gets the upper triangular matrix R. (This property returns the internal matrix, 
            not a copy.)
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QRDecompositionF.SolveLinearEquations(DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Returns the least squares solution for the equation <c>A * X = B</c>.
            </summary>
      <param name="matrixB">The matrix B with as many rows as A and any number of columns.</param>
      <returns>X with the least squares solution.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">The number of rows does not match.</exception>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">The matrix A does not have full rank.</exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.QuaternionD">
      <summary>
            Defines a quaternion (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.#ctor(System.Collections.Generic.IList{System.Double})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" /> class.
            </summary>
      <param name="components">
            List with the initial values for the components w, x, y and z.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="components" /> has less than 4 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="components" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.#ctor(System.Double,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" /> class.
            </summary>
      <param name="w">The initial value for scalar component w.</param>
      <param name="v">The initial values for the vector component (x, y, z).</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" /> class.
            </summary>
      <param name="w">The initial value for the w component.</param>
      <param name="x">The initial value for the x component.</param>
      <param name="y">The initial value for the y component.</param>
      <param name="z">The initial value for the z component.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.#ctor(System.Double[])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" /> class.
            </summary>
      <param name="components">
            Array with the initial values for the components w, x, y and z.
            </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="components" /> has less than 4 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="components" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Add(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
      <summary>
            Adds two quaternions.
            </summary>
      <param name="quaternion1">The first quaternion.</param>
      <param name="quaternion2">The second quaternion.</param>
      <returns>The sum of the two quaternions.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QuaternionD.Angle">
      <summary>
            Gets or sets the angle of the rotation around <see cref="P:DigitalRune.Mathematics.Algebra.QuaternionD.Axis" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
      <summary>
            Tests if two quaternions are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />).
            </summary>
      <param name="q1">The first quaternion.</param>
      <param name="q2">The second quaternion.</param>
      <returns>
        <see langword="true" /> if the quaternions are equal within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,System.Double)">
      <summary>
            Tests if two quaternions are equal (with a specific tolerance).
            </summary>
      <param name="q1">The first quaternion.</param>
      <param name="q2">The second quaternion.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if the quaternions are equal within the tolerance 
            <paramref name="epsilon" />; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QuaternionD.Axis">
      <summary>
            Gets or sets the normalized unit vector with the direction of the rotation 
            axis.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Conjugate">
      <summary>
            Sets this quaternion to its conjugate.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QuaternionD.Conjugated">
      <summary>
            Returns the conjugate of the quaternion.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.CreateRotation(DigitalRune.Mathematics.Algebra.Matrix33D)">
      <summary>
            Creates a unit quaternion that specifies the same rotation as the given rotation matrix.
            </summary>
      <param name="rotationMatrix">A orientation matrix that specifies a rotation.</param>
      <returns>
            The creates unit quaternion that describes the same rotation as the rotation matrix.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.CreateRotation(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Creates a unit quaterion that specifies a rotation given by two vectors.
            </summary>
      <param name="startVector">The initial vector. (Vector does not need to be normalized.)</param>
      <param name="rotatedVector">The rotated vector. (Vector does not need to be normalized.)</param>
      <returns>The created unit quaternion that would rotate <paramref name="startVector" />
            to <paramref name="rotatedVector" /></returns>
      <exception cref="T:System.ArgumentException">The length of the <paramref name="startVector" /> and 
            <paramref name="rotatedVector" /> must not be <c>0</c>.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.CreateRotation(DigitalRune.Mathematics.Algebra.Vector3D,System.Double)">
      <summary>
            Creates a unit quaternion that specifies a rotation given by axis and angle.
            </summary>
      <param name="axis">The axis. (Vector does not need to be normalized.)</param>
      <param name="angle">The angle.</param>
      <returns>
        <para>
            The created unit quaternion that describes a rotation by the 
            <paramref name="angle" /> radians around the <paramref name="axis" />.
            (<paramref name="axis" /> will be normalized automatically.)
            </para>
        <para>
            The resulting quaternion is: <i>q</i> = (cos(<i>θ</i>/2), <i><b>v</b></i>sin(<i>θ</i>/2))
            </para>
        <para>
          <i>q</i> = (cos(<i>θ</i>/2), <i><b>v</b></i>sin(<i>θ</i>/2))
            </para>
            where <i>θ</i> is the angle and <i><b>v</b></i> is the normalized axis.
            </returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
        <paramref name="axis" /> is a zero vector.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.CreateRotation(System.Double,DigitalRune.Mathematics.Algebra.Vector3D,System.Double,DigitalRune.Mathematics.Algebra.Vector3D,System.Double,DigitalRune.Mathematics.Algebra.Vector3D,System.Boolean)">
      <summary>
            Gets an orientation quaternion from Euler angles (3 rotations around 3 axes).
            </summary>
      <param name="angle1">The first angle.</param>
      <param name="axis1">The first axis.</param>
      <param name="angle2">The second angle.</param>
      <param name="axis2">The second axis.</param>
      <param name="angle3">The third angle.</param>
      <param name="axis3">The third axis.</param>
      <param name="useGlobalAxes">
            If set to <see langword="true" /> then the rotation axes are fixed in world space. Otherwise 
            the rotation axes are fixed on the object and rotated with each rotation.
            </param>
      <returns>
            The orientation quaternion that describes the same orientation as the given Euler angles.
            </returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The length of the axis vectors must not be <c>0</c>.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.CreateRotationX(System.Double)">
      <summary>
            Creates a unit quaternion that specifies a rotation by a given angle around
            the x-axis.
            </summary>
      <param name="angle">The rotation angle in radians.</param>
      <returns>
            The created unit quaternion that describes a rotation by the 
            <paramref name="angle" /> radians around the x-axis.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.CreateRotationY(System.Double)">
      <summary>
            Creates a unit quaternion that specifies a rotation by a given angle around
            the y-axis.
            </summary>
      <param name="angle">The rotation angle in radians.</param>
      <returns>
            The created unit quaternion that describes a rotation by the 
            <paramref name="angle" /> radians around the y-axis.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.CreateRotationZ(System.Double)">
      <summary>
            Creates a unit quaternion that specifies a rotation by a given angle around
            the z-axis.
            </summary>
      <param name="angle">The rotation angle in radians.</param>
      <returns>
            The created unit quaternion that describes a rotation by the 
            <paramref name="angle" /> radians around the z-axis.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Divide(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
      <summary>
            Divides a quaternions by another quaternion.
            </summary>
      <param name="dividend">The first quaternion (dividend).</param>
      <param name="divisor">The second quaternion (divisor).</param>
      <returns>The result of the division.</returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The quaternion <paramref name="divisor" /> cannot be inverted.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Divide(DigitalRune.Mathematics.Algebra.QuaternionD,System.Double)">
      <summary>
            Divides a quaternion by a scalar.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <param name="scalar">The scalar.</param>
      <returns>The quaternion with each component divided by scalar.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Dot(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
      <summary>
            Returns the dot product of two quaternions.
            </summary>
      <param name="q1">The first quaternion.</param>
      <param name="q2">The second quaternion.</param>
      <returns>The dot product of the two quaternions.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Equals(DigitalRune.Mathematics.Algebra.QuaternionD)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Exp">
      <summary>
            Sets this quaternion to its exponential.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Exp(DigitalRune.Mathematics.Algebra.QuaternionD)">
      <summary>
            Calculates the exponential.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <returns>The exponential e<sup><i>q</i></sup>.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.FromXna(Microsoft.Xna.Framework.Quaternion)">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" /> (DigitalRune Mathematics) to 
            <see cref="T:Microsoft.Xna.Framework.Quaternion" /> (XNA Framework).
            </summary>
      <param name="quaternion">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> (XNA Framework).</param>
      <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" /> (DigitalRune Mathematics).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.GetAngle(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
      <summary>
            Calculates the angle between two quaternions.
            </summary>
      <param name="quaternion1">The first quaternion.</param>
      <param name="quaternion2">The second quaternion.</param>
      <returns>The angle between the given vectors, such that 0 ≤ angle ≤ <c>π</c>.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.QuaternionD.Identity">
      <summary>
            Returns the identity <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" /> (1, 0, 0, 0).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QuaternionD.Inverse">
      <summary>
            Returns the inverse of this quaternion.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The length of the quaternion is zero. The quaternion cannot be inverted.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Invert">
      <summary>
            Inverts the quaternion.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The length of the quaternion is zero. The quaternion cannot be inverted.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QuaternionD.IsNaN">
      <summary>
            Gets a value indicating whether a component of the quaternion is <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QuaternionD.IsNumericallyNormalized">
      <summary>
            Returns a value indicating whether this quaternion is normalized (the <see cref="P:DigitalRune.Mathematics.Algebra.QuaternionD.Modulus" /> 
            is numerically equal to 1).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QuaternionD.Item(System.Int32)">
      <summary>
            Gets or sets the component at the specified index.
            </summary>
      <param name="index">The index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Ln">
      <summary>
            Sets this quaternion to its natural logarithm.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The quaternion is not a unit quaternion.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Ln(DigitalRune.Mathematics.Algebra.QuaternionD)">
      <summary>
            Calculates the natural logarithm.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <returns>The natural logarithm ln(<i>q</i>).</returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The given quaternion is not a unit quaternion.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QuaternionD.Modulus">
      <summary>
            Returns the modulus (length).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Multiply(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
      <summary>
            Multiplies two quaternions.
            </summary>
      <param name="q1">The first quaternion.</param>
      <param name="q2">The second quaternion.</param>
      <returns>The product of the two quaternions.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Multiply(System.Double,DigitalRune.Mathematics.Algebra.QuaternionD)">
      <summary>
            Multiplies a quaternion by a scalar.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The quaternion with each component multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Negate(DigitalRune.Mathematics.Algebra.QuaternionD)">
      <summary>
            Negates a quaternion.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <returns>The negated quaternion.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QuaternionD.Norm">
      <summary>
            Returns the norm (<i>length<sup>2</sup></i>).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Normalize">
      <summary>
            Normalizes the quaternion.
            </summary>
      <exception cref="T:System.DivideByZeroException">
            The length of the quaternion is zero. The quaternion cannot be normalized.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QuaternionD.Normalized">
      <summary>
            Returns the normalized quaternion.
            </summary>
      <exception cref="T:System.DivideByZeroException">
            The length of the quaternion is zero. The quaternion cannot be normalized.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Addition(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
      <summary>
            Adds two quaternions.
            </summary>
      <param name="quaternion1">The first quaternion.</param>
      <param name="quaternion2">The second quaternion.</param>
      <returns>The sum of the two quaternions.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Division(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
      <summary>
            Divides a quaternions by another quaternion.
            </summary>
      <param name="dividend">The first quaternion (dividend).</param>
      <param name="divisor">The second quaternion (divisor).</param>
      <returns>The result of the division.</returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The quaternion <paramref name="divisor" /> cannot be inverted.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Division(DigitalRune.Mathematics.Algebra.QuaternionD,System.Double)">
      <summary>
            Divides a quaternion by a scalar.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <param name="scalar">The scalar.</param>
      <returns>The quaternion with each component divided by scalar.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Equality(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
      <summary>
            Tests if two quaternions are equal.
            </summary>
      <param name="q1">The first quaternion.</param>
      <param name="q2">The second quaternion.</param>
      <returns>
        <see langword="true" /> if the quaternions are equal; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Explicit(DigitalRune.Mathematics.Algebra.QuaternionD)~DigitalRune.Mathematics.Algebra.QuaternionF">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" /> to <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" />.
            </summary>
      <param name="quaternion">The DigitalRune <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" />.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Explicit(DigitalRune.Mathematics.Algebra.QuaternionD)~System.Collections.Generic.List{System.Double}">
      <summary>
            Converts the vector to a list of 4 double values: (w, x, y, z).
            </summary>
      <param name="quaternion">The quaternion.</param>
      <returns>The list with 4 values (w, x, y, z).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Explicit(DigitalRune.Mathematics.Algebra.QuaternionD)~System.Double[]">
      <summary>
            Converts the quaternion to an array of 4 double values: (w, x, y, z).
            </summary>
      <param name="quaternion">The quaternion.</param>
      <returns>The array with 4 values (w, x, y, z).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Explicit(DigitalRune.Mathematics.Algebra.QuaternionD)~Microsoft.Xna.Framework.Quaternion">
      <summary>
            Performs an conversion from <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" /> 
            (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Quaternion" /> (XNA Framework).
            </summary>
      <param name="quaternion">The <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" /> (DigitalRune Mathematics).</param>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> (XNA Framework).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Explicit(Microsoft.Xna.Framework.Quaternion)~DigitalRune.Mathematics.Algebra.QuaternionD">
      <summary>
            Performs an conversion from <see cref="T:Microsoft.Xna.Framework.Quaternion" /> (XNA Framework) to 
            <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" /> (DigitalRune Mathematics).
            </summary>
      <param name="quaternion">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> (XNA Framework).</param>
      <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" /> (DigitalRune Mathematics).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Inequality(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
      <summary>
            Tests if two quaternions are not equal.
            </summary>
      <param name="q1">The first quaternion.</param>
      <param name="q2">The second quaternion.</param>
      <returns>
        <see langword="true" /> if the quaternions are different; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Multiply(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
      <summary>
            Multiplies two quaternions.
            </summary>
      <param name="q1">The first quaternion.</param>
      <param name="q2">The second quaternion.</param>
      <returns>The product of the two quaternions.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Multiply(DigitalRune.Mathematics.Algebra.QuaternionD,System.Double)">
      <summary>
            Multiplies a quaternion by a scalar.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The quaternion with each component multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Multiply(System.Double,DigitalRune.Mathematics.Algebra.QuaternionD)">
      <summary>
            Multiplies a quaternion by a scalar.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The quaternion with each component multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Subtraction(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
      <summary>
            Subtracts a quaternion from a quaternion.
            </summary>
      <param name="minuend">The first quaternion (minuend).</param>
      <param name="subtrahend">The second quaternion (subtrahend).</param>
      <returns>The difference of the two quaternions.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_UnaryNegation(DigitalRune.Mathematics.Algebra.QuaternionD)">
      <summary>
            Negates a quaternion.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <returns>The negated quaternion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Parse(System.String)">
      <summary>
            Converts the string representation of a quaternion to its <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" /> 
            equivalent.
            </summary>
      <param name="s">A string representation of a 4-dimensional vector.</param>
      <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" /> that represents the vector specified by the 
            <paramref name="s" /> parameter.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a quaternion in a specified 
            culture-specific format to its <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" /> equivalent.
            </summary>
      <param name="s">A string representation of a 4-dimensional vector.</param>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting 
            information about <paramref name="s" />. 
            </param>
      <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" /> that represents the vector specified by the 
            <paramref name="s" /> parameter.
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Power(DigitalRune.Mathematics.Algebra.QuaternionD,System.Double)">
      <summary>
            Calculates the power of a unit quaternion.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <param name="t">The exponent.</param>
      <returns>The power of the unit quaternion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Power(System.Double)">
      <summary>
            Sets this unit quaternion to a power of itself.
            </summary>
      <param name="t">The exponent.</param>
      <returns>The power of the unit quaternion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Rotate(DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Rotates a vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The rotated vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Subtract(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
      <summary>
            Subtracts a quaternion from a quaternion.
            </summary>
      <param name="minuend">The first quaternion (minuend).</param>
      <param name="subtrahend">The second quaternion (subtrahend).</param>
      <returns>The difference of the two quaternions.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.ToArray">
      <summary>
            Converts the quaternion to an array of 4 double values: (w, x, y, z).
            </summary>
      <returns>The array with 4 values (w, x, y, z).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.ToList">
      <summary>
            Converts the vector to a list of 4 double values: (w, x, y, z).
            </summary>
      <returns>The list with 4 values (w, x, y, z).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.ToQuaternionF">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" /> to <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.ToRotationMatrix33">
      <summary>
            Returns the 3 x 3 rotation matrix of this quaternion.
            </summary>
      <returns>The rotation matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.ToRotationMatrix44">
      <summary>
            Returns the 4 x 4 rotation matrix of this quaternion.
            </summary>
      <returns>The rotation matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.ToString">
      <summary>
            Returns the string representation of this quaternion.
            </summary>
      <returns>The string representation of this quaternion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of this vector using the specified 
            culture-specific format information.
            </summary>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific 
            formatting information
            </param>
      <returns>The string representation of this quaternion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.ToXna">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" /> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Quaternion" /> 
            (XNA Framework).
            </summary>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> (XNA Framework).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.TryNormalize">
      <summary>
            Tries to normalize the quaternion.
            </summary>
      <returns>
        <see langword="true" /> if the quaternion was normalized; otherwise, <see langword="false" /> 
            if the quaternion could not be normalized. (The norm is numerically zero.)
            </returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QuaternionD.V">
      <summary>
            Gets or sets the vector part (x, y, z).
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.QuaternionD.W">
      <summary>
            The w component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.QuaternionD.X">
      <summary>
            The x component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.QuaternionD.Y">
      <summary>
            The y component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.QuaternionD.Z">
      <summary>
            The z component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.QuaternionD.Zero">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" /> with all of its components set to zero.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.QuaternionF">
      <summary>
            Defines a quaternion (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.#ctor(System.Collections.Generic.IList{System.Single})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" /> class.
            </summary>
      <param name="components">
            List with the initial values for the components w, x, y and z.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="components" /> has less than 4 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="components" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.#ctor(System.Single,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" /> class.
            </summary>
      <param name="w">The initial value for scalar component w.</param>
      <param name="v">The initial values for the vector component (x, y, z).</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" /> class.
            </summary>
      <param name="w">The initial value for the w component.</param>
      <param name="x">The initial value for the x component.</param>
      <param name="y">The initial value for the y component.</param>
      <param name="z">The initial value for the z component.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.#ctor(System.Single[])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" /> class.
            </summary>
      <param name="components">
            Array with the initial values for the components w, x, y and z.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="components" /> has less than 4 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="components" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Add(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Adds two quaternions.
            </summary>
      <param name="quaternion1">The first quaternion.</param>
      <param name="quaternion2">The second quaternion.</param>
      <returns>The sum of the two quaternions.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QuaternionF.Angle">
      <summary>
            Gets or sets the angle of the rotation around <see cref="P:DigitalRune.Mathematics.Algebra.QuaternionF.Axis" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Tests if two quaternions are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />).
            </summary>
      <param name="q1">The first quaternion.</param>
      <param name="q2">The second quaternion.</param>
      <returns>
        <see langword="true" /> if the quaternions are equal within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,System.Single)">
      <summary>
            Tests if two quaternions are equal (with a specific tolerance).
            </summary>
      <param name="q1">The first quaternion.</param>
      <param name="q2">The second quaternion.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if the quaternions are equal within the tolerance 
            <paramref name="epsilon" />; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QuaternionF.Axis">
      <summary>
            Gets or sets the normalized unit vector with the direction of the rotation 
            axis.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Conjugate">
      <summary>
            Sets this quaternion to its conjugate.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QuaternionF.Conjugated">
      <summary>
            Returns the conjugate of the quaternion.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.CreateRotation(DigitalRune.Mathematics.Algebra.Matrix33F)">
      <summary>
            Creates a unit quaternion that specifies the same rotation as the given rotation matrix .
            </summary>
      <param name="rotationMatrix">A orientation matrix that specifies a rotation.</param>
      <returns>
            The creates unit quaternion that describes the same rotation as the rotation matrix.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.CreateRotation(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Creates a unit quaternion that specifies a rotation given by two vectors.
            </summary>
      <param name="startVector">The initial vector. (Vector does not need to be normalized.)</param>
      <param name="rotatedVector">The rotated vector. (Vector does not need to be normalized.)</param>
      <returns>The created unit quaternion that would rotate <paramref name="startVector" />
            to <paramref name="rotatedVector" /></returns>
      <exception cref="T:System.ArgumentException">The length of the <paramref name="startVector" /> and 
            <paramref name="rotatedVector" /> must not be <c>0</c>.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.CreateRotation(DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
      <summary>
            Creates a unit quaternion that specifies a rotation given by axis and angle.
            </summary>
      <param name="axis">The axis. (Vector does not need to be normalized.)</param>
      <param name="angle">The angle.</param>
      <returns>
        <para>
            The created unit quaternion that describes a rotation by the 
            <paramref name="angle" /> radians around the <paramref name="axis" />. 
            (<paramref name="axis" /> will be normalized automatically.)
            </para>
        <para>
            The resulting quaternion is: <i>q</i> = (cos(<i>θ</i>/2), <i><b>v</b></i>sin(<i>θ</i>/2))
            </para>
        <para>
          <i>q</i> = (cos(<i>θ</i>/2), <i><b>v</b></i>sin(<i>θ</i>/2))
            </para>
            where <i>θ</i> is the angle and <i><b>v</b></i> is the normalized axis.
            </returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
        <paramref name="axis" /> is a zero vector.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.CreateRotation(System.Single,DigitalRune.Mathematics.Algebra.Vector3F,System.Single,DigitalRune.Mathematics.Algebra.Vector3F,System.Single,DigitalRune.Mathematics.Algebra.Vector3F,System.Boolean)">
      <summary>
            Gets an orientation quaternion from Euler angles (3 rotations around 3 axes).
            </summary>
      <param name="angle1">The first angle.</param>
      <param name="axis1">The first axis.</param>
      <param name="angle2">The second angle.</param>
      <param name="axis2">The second axis.</param>
      <param name="angle3">The third angle.</param>
      <param name="axis3">The third axis.</param>
      <param name="useGlobalAxes">
            If set to <see langword="true" /> then the rotation axes are fixed in world space. Otherwise 
            the rotation axes are fixed on the object and rotated with each rotation.
            </param>
      <returns>
            The orientation quaternion that describes the same orientation as the given Euler angles.
            </returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The length of the axis vectors must not be <c>0</c>.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.CreateRotationX(System.Single)">
      <summary>
            Creates a unit quaternion that specifies a rotation by a given angle around
            the x-axis.
            </summary>
      <param name="angle">The rotation angle in radians.</param>
      <returns>
            The created unit quaternion that describes a rotation by the 
            <paramref name="angle" /> radians around the x-axis.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.CreateRotationY(System.Single)">
      <summary>
            Creates a unit quaternion that specifies a rotation by a given angle around
            the y-axis.
            </summary>
      <param name="angle">The rotation angle in radians.</param>
      <returns>
            The created unit quaternion that describes a rotation by the 
            <paramref name="angle" /> radians around the y-axis.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.CreateRotationZ(System.Single)">
      <summary>
            Creates a unit quaternion that specifies a rotation by a given angle around
            the z-axis.
            </summary>
      <param name="angle">The rotation angle in radians.</param>
      <returns>
            The created unit quaternion that describes a rotation by the 
            <paramref name="angle" /> radians around the z-axis.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Divide(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Divides a quaternions by another quaternion.
            </summary>
      <param name="dividend">The first quaternion (dividend).</param>
      <param name="divisor">The second quaternion (divisor).</param>
      <returns>The result of the division.</returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The quaternion <paramref name="divisor" /> cannot be inverted.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Divide(DigitalRune.Mathematics.Algebra.QuaternionF,System.Single)">
      <summary>
            Divides a quaternion by a scalar.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <param name="scalar">The scalar.</param>
      <returns>The quaternion with each component divided by scalar.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Dot(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Returns the dot product of two quaternions.
            </summary>
      <param name="q1">The first quaternion.</param>
      <param name="q2">The second quaternion.</param>
      <returns>The dot product of the two quaternions.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Equals(DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Exp">
      <summary>
            Sets this quaternion to its exponential.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Exp(DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Calculates the exponential.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <returns>The exponential e<sup><i>q</i></sup>.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.FromXna(Microsoft.Xna.Framework.Quaternion)">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" /> (DigitalRune Mathematics) to 
            <see cref="T:Microsoft.Xna.Framework.Quaternion" /> (XNA Framework).
            </summary>
      <param name="quaternion">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> (XNA Framework).</param>
      <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" /> (DigitalRune Mathematics).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.GetAngle(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Calculates the angle between two quaternions.
            </summary>
      <param name="quaternion1">The first quaternion.</param>
      <param name="quaternion2">The second quaternion.</param>
      <returns>The angle between the given vectors, such that 0 ≤ angle ≤ <c>π</c>.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.QuaternionF.Identity">
      <summary>
            Returns the identity <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" /> (1, 0, 0, 0).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QuaternionF.Inverse">
      <summary>
            Returns the inverse of this quaternion.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The length of the quaternion is zero. The quaternion cannot be inverted.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Invert">
      <summary>
            Inverts the quaternion.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The length of the quaternion is zero. The quaternion cannot be inverted.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QuaternionF.IsNaN">
      <summary>
            Gets a value indicating whether a component of the quaternion is <see cref="F:System.Single.NaN" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QuaternionF.IsNumericallyNormalized">
      <summary>
            Returns a value indicating whether this quaternion is normalized (the <see cref="P:DigitalRune.Mathematics.Algebra.QuaternionF.Modulus" /> 
            is numerically equal to 1).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QuaternionF.Item(System.Int32)">
      <summary>
            Gets or sets the component at the specified index.
            </summary>
      <param name="index">The index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Ln">
      <summary>
            Sets this quaternion to its natural logarithm.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The quaternion is not a unit quaternion.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Ln(DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Calculates the natural logarithm.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <returns>The natural logarithm ln(<i>q</i>).</returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The given quaternion is not a unit quaternion.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QuaternionF.Modulus">
      <summary>
            Returns the modulus (length).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Multiply(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Multiplies two quaternions.
            </summary>
      <param name="q1">The first quaternion.</param>
      <param name="q2">The second quaternion.</param>
      <returns>The product of the two quaternions.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Multiply(System.Single,DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Multiplies a quaternion by a scalar.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The quaternion with each component multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Negate(DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Negates a quaternion.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <returns>The negated quaternion.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QuaternionF.Norm">
      <summary>
            Returns the norm (<i>length<sup>2</sup></i>).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Normalize">
      <summary>
            Normalizes the quaternion.
            </summary>
      <exception cref="T:System.DivideByZeroException">
            The length of the quaternion is zero. The quaternion cannot be normalized.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QuaternionF.Normalized">
      <summary>
            Returns the normalized quaternion.
            </summary>
      <exception cref="T:System.DivideByZeroException">
            The length of the quaternion is zero. The quaternion cannot be normalized.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Addition(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Adds two quaternions.
            </summary>
      <param name="quaternion1">The first quaternion.</param>
      <param name="quaternion2">The second quaternion.</param>
      <returns>The sum of the two quaternions.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Division(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Divides a quaternions by another quaternion.
            </summary>
      <param name="dividend">The first quaternion (dividend).</param>
      <param name="divisor">The second quaternion (divisor).</param>
      <returns>The result of the division.</returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The quaternion <paramref name="divisor" /> cannot be inverted.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Division(DigitalRune.Mathematics.Algebra.QuaternionF,System.Single)">
      <summary>
            Divides a quaternion by a scalar.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <param name="scalar">The scalar.</param>
      <returns>The quaternion with each component divided by scalar.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Equality(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Tests if two quaternions are equal.
            </summary>
      <param name="q1">The first quaternion.</param>
      <param name="q2">The second quaternion.</param>
      <returns>
        <see langword="true" /> if the quaternions are equal; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Explicit(DigitalRune.Mathematics.Algebra.QuaternionF)~System.Collections.Generic.List{System.Single}">
      <summary>
            Converts the vector to a list of 4 float values: (w, x, y, z).
            </summary>
      <param name="quaternion">The quaternion.</param>
      <returns>The list with 4 values (w, x, y, z).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Explicit(DigitalRune.Mathematics.Algebra.QuaternionF)~System.Single[]">
      <summary>
            Converts the quaternion to an array of 4 float values: (w, x, y, z).
            </summary>
      <param name="quaternion">The quaternion.</param>
      <returns>The array with 4 values (w, x, y, z).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Explicit(DigitalRune.Mathematics.Algebra.QuaternionF)~Microsoft.Xna.Framework.Quaternion">
      <summary>
            Performs an conversion from <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" /> 
            (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Quaternion" /> (XNA Framework).
            </summary>
      <param name="quaternion">The <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" /> (DigitalRune Mathematics).</param>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> (XNA Framework).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Explicit(Microsoft.Xna.Framework.Quaternion)~DigitalRune.Mathematics.Algebra.QuaternionF">
      <summary>
            Performs an conversion from <see cref="T:Microsoft.Xna.Framework.Quaternion" /> (XNA Framework) to 
            <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" /> (DigitalRune Mathematics).
            </summary>
      <param name="quaternion">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> (XNA Framework).</param>
      <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" /> (DigitalRune Mathematics).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Implicit(DigitalRune.Mathematics.Algebra.QuaternionF)~DigitalRune.Mathematics.Algebra.QuaternionD">
      <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" /> to <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" />.
            </summary>
      <param name="quaternion">The DigitalRune <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" />.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Inequality(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Tests if two quaternions are not equal.
            </summary>
      <param name="q1">The first quaternion.</param>
      <param name="q2">The second quaternion.</param>
      <returns>
        <see langword="true" /> if the quaternions are different; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Multiply(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Multiplies two quaternions.
            </summary>
      <param name="q1">The first quaternion.</param>
      <param name="q2">The second quaternion.</param>
      <returns>The product of the two quaternions.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Multiply(DigitalRune.Mathematics.Algebra.QuaternionF,System.Single)">
      <summary>
            Multiplies a quaternion by a scalar.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The quaternion with each component multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Multiply(System.Single,DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Multiplies a quaternion by a scalar.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The quaternion with each component multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Subtraction(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Subtracts a quaternion from a quaternion.
            </summary>
      <param name="minuend">The first quaternion (minuend).</param>
      <param name="subtrahend">The second quaternion (subtrahend).</param>
      <returns>The difference of the two quaternions.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_UnaryNegation(DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Negates a quaternion.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <returns>The negated quaternion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Parse(System.String)">
      <summary>
            Converts the string representation of a quaternion to its <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" /> 
            equivalent.
            </summary>
      <param name="s">A string representation of a 4-dimensional vector.</param>
      <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" /> that represents the vector specified by the 
            <paramref name="s" /> parameter.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a quaternion in a specified 
            culture-specific format to its <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" /> equivalent.
            </summary>
      <param name="s">A string representation of a 4-dimensional vector.</param>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting 
            information about <paramref name="s" />. 
            </param>
      <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" /> that represents the vector specified by the 
            <paramref name="s" /> parameter.
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Power(DigitalRune.Mathematics.Algebra.QuaternionF,System.Single)">
      <summary>
            Calculates the power of a unit quaternion.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <param name="t">The exponent.</param>
      <returns>The power of the unit quaternion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Power(System.Single)">
      <summary>
            Sets this unit quaternion to a power of itself.
            </summary>
      <param name="t">The exponent.</param>
      <returns>The power of the unit quaternion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Rotate(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Rotates a vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The rotated vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Subtract(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
      <summary>
            Subtracts a quaternion from a quaternion.
            </summary>
      <param name="minuend">The first quaternion (minuend).</param>
      <param name="subtrahend">The second quaternion (subtrahend).</param>
      <returns>The difference of the two quaternions.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.ToArray">
      <summary>
            Converts the quaternion to an array of 4 float values: (w, x, y, z).
            </summary>
      <returns>The array with 4 values (w, x, y, z).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.ToList">
      <summary>
            Converts the vector to a list of 4 float values: (w, x, y, z).
            </summary>
      <returns>The list with 4 values (w, x, y, z).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.ToQuaternionD">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" /> to <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.ToRotationMatrix33">
      <summary>
            Returns the 3 x 3 rotation matrix of this quaternion.
            </summary>
      <returns>The rotation matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.ToRotationMatrix44">
      <summary>
            Returns the 4 x 4 rotation matrix of this quaternion.
            </summary>
      <returns>The rotation matrix.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.ToString">
      <summary>
            Returns the string representation of this quaternion.
            </summary>
      <returns>The string representation of this quaternion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of this vector using the specified 
            culture-specific format information.
            </summary>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific 
            formatting information
            </param>
      <returns>The string representation of this quaternion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.ToXna">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" /> (DigitalRune Mathematics) to 
            <see cref="T:Microsoft.Xna.Framework.Quaternion" /> (XNA Framework).
            </summary>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> (XNA Framework).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.TryNormalize">
      <summary>
            Tries to normalize the quaternion.
            </summary>
      <returns>
        <see langword="true" /> if the quaternion was normalized; otherwise, <see langword="false" /> 
            if the quaternion could not be normalized. (The norm is numerically zero.)
            </returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.QuaternionF.V">
      <summary>
            Gets or sets the vector part (x, y, z).
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.QuaternionF.W">
      <summary>
            The w component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.QuaternionF.X">
      <summary>
            The x component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.QuaternionF.Y">
      <summary>
            The y component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.QuaternionF.Z">
      <summary>
            The z component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.QuaternionF.Zero">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" /> with all of its components set to zero.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.SingularValueDecompositionD">
      <summary>
            Computes the Singular Value Decomposition (SVD) of a matrix (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.SingularValueDecompositionD.#ctor(DigitalRune.Mathematics.Algebra.MatrixD)">
      <summary>
            Creates the singular value decomposition of the given matrix.
            </summary>
      <param name="matrixA">
            The matrix A. (Can be rectangular. Number of rows ≥ number of columns.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows must be greater than or equal to the number of columns.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionD.ConditionNumber">
      <summary>
            Gets the condition number of A.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionD.Norm2">
      <summary>
            Gets the two norm of A.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionD.NumericalRank">
      <summary>
            Gets the effective numerical rank of A.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionD.S">
      <summary>
            Gets the diagonal matrix S with the singular values. (This property returns the internal 
            matrix, not a copy.)
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionD.SingularValues">
      <summary>
            Gets the vector of singular values (the diagonal of S). 
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionD.U">
      <summary>
            Gets the matrix U with the left singular vectors. (This property returns the internal 
            matrix, not a copy.)
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionD.V">
      <summary>
            Gets the matrix V with the right singular vectors. (This property returns the internal 
            matrix, not a copy.)
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.SingularValueDecompositionF">
      <summary>
            Computes the Singular Value Decomposition (SVD) of a matrix (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.SingularValueDecompositionF.#ctor(DigitalRune.Mathematics.Algebra.MatrixF)">
      <summary>
            Creates the singular value decomposition of the given matrix.
            </summary>
      <param name="matrixA">
            The matrix A. (Can be rectangular. Number of rows ≥ number of columns.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows must be greater than or equal to the number of columns.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionF.ConditionNumber">
      <summary>
            Gets the condition number of A.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionF.Norm2">
      <summary>
            Gets the two norm of A.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionF.NumericalRank">
      <summary>
            Gets the effective numerical rank of A.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionF.S">
      <summary>
            Gets the diagonal matrix S with the singular values. (This property returns the internal 
            matrix, not a copy.)
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionF.SingularValues">
      <summary>
            Gets the vector of singular values (the diagonal of S). 
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionF.U">
      <summary>
            Gets the matrix U with the left singular vectors. (This property returns the internal 
            matrix, not a copy.)
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionF.V">
      <summary>
            Gets the matrix V with the right singular vectors. (This property returns the internal 
            matrix, not a copy.)
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.SorMethodD">
      <summary>
            An iterative solver using the Successive Over Relaxation (SOR) method (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.SorMethodD.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.SorMethodD" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.SorMethodD.RelaxationFactor">
      <summary>
            Gets or sets the relaxation factor.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.SorMethodD.Solve(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Solves the specified linear system of equations <i>Ax=b</i>.
            </summary>
      <param name="matrixA">The matrix A.</param>
      <param name="initialX">
            The initial guess for x. If this value is <see langword="null" />, a zero vector will be used
            as initial guess.
            </param>
      <param name="vectorB">The vector b.</param>
      <returns>The solution vector x.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vectorB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="matrixA" />is not a square matrix.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of elements of <paramref name="initialX" /> does not match.
            </exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.SorMethodF">
      <summary>
            An iterative solver using the Successive Over Relaxation (SOR) method (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.SorMethodF.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.SorMethodF" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.SorMethodF.RelaxationFactor">
      <summary>
            Gets or sets the relaxation factor.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.SorMethodF.Solve(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Solves the specified linear system of equations <i>Ax=b</i>.
            </summary>
      <param name="matrixA">The matrix A.</param>
      <param name="initialX">
            The initial guess for x. If this value is <see langword="null" />, a zero vector will be used
            as initial guess.
            </param>
      <param name="vectorB">The vector b.</param>
      <returns>The solution vector x.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrixA" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vectorB" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="matrixA" />is not a square matrix.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of elements of <paramref name="initialX" /> does not match.
            </exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.Vector2D">
      <summary>
            Defines a 2-dimensional vector (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.#ctor(System.Collections.Generic.IList{System.Double})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" /> class.
            </summary>
      <param name="components">
            List with the initial values for the components x, and y.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="components" /> has less than 2 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="components" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.#ctor(System.Double)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" />.
            </summary>
      <param name="componentValue">The initial value for 2 the vector components.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" />.
            </summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.#ctor(System.Double[])">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" />.
            </summary>
      <param name="components">
            Array with the initial values for the components x, and y.
            </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="components" /> has less than 2 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="components" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Absolute">
      <summary>
            Sets each vector component to its absolute value.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Absolute(DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Returns a vector with the absolute values of the elements of the given vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>A vector with the absolute values of the elements of the given vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Add(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Adds two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Determines whether two vectors are equal (regarding the 
            tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />).
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D,System.Double)">
      <summary>
            Determines whether two vectors are equal (regarding a specific 
            tolerance).
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if the vectors are equal (within the tolerance 
            <paramref name="epsilon" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Clamp(DigitalRune.Mathematics.Algebra.Vector2D,System.Double,System.Double)">
      <summary>
            Returns a vector with the vector components clamped to the range [min, max].
            </summary>
      <param name="vector">The vector.</param>
      <param name="min">The min limit.</param>
      <param name="max">The max limit.</param>
      <returns>A vector with clamped components.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Clamp(System.Double,System.Double)">
      <summary>
            Clamps the vector components to the range [min, max].
            </summary>
      <param name="min">The min limit.</param>
      <param name="max">The max limit.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ClampToZero">
      <summary>
            Clamps near-zero vector components to zero.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ClampToZero(DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
      <param name="vector">The vector.</param>
      <returns>
            The vector with small components clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ClampToZero(DigitalRune.Mathematics.Algebra.Vector2D,System.Double)">
      <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
      <param name="vector">The vector.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
            The vector with small components clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ClampToZero(System.Double)">
      <summary>
            Clamps near-zero vector components to zero.
            </summary>
      <param name="epsilon">The tolerance value.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Divide(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Divides the components of a vector by the components of another 
            vector.
            </summary>
      <param name="dividend">The first vector (dividend).</param>
      <param name="divisor">The second vector (divisor).</param>
      <returns>The component-wise division of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Divide(DigitalRune.Mathematics.Algebra.Vector2D,System.Double)">
      <summary>
            Divides a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component divided by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Dot(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Calculates the dot product of two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The dot product.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Equals(DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same 
            type and represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.FromXna(Microsoft.Xna.Framework.Vector2)">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" /> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector2" /> 
            (XNA Framework).
            </summary>
      <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector2" /> (XNA Framework).</param>
      <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" /> (DigitalRune Mathematics).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.GetAngle(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Calculates the angle between two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The angle between the given vectors, such that 0 ≤ angle ≤ <c>π</c>.</returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
        <paramref name="vector1" /> or <paramref name="vector2" /> has a length of 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.IndexOfLargestComponent">
      <summary>
            Gets the index (zero-based) of the largest component.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.IndexOfSmallestComponent">
      <summary>
            Gets the index (zero-based) of the smallest component.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.IsNaN">
      <summary>
            Gets a value indicating whether a component of the vector is <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.IsNumericallyNormalized">
      <summary>
            Returns a value indicating whether this vector is normalized (the length is numerically
            equal to 1).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.IsNumericallyZero">
      <summary>
            Returns a value indicating whether this vector has zero size (the length is numerically
            equal to 0).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.Item(System.Int32)">
      <summary>
            Gets or sets the component at the specified index.
            </summary>
      <param name="index">The index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.LargestComponent">
      <summary>
            Gets the value of the largest component.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.Length">
      <summary>
            Gets or sets the length of this vector.
            </summary>
      <returns>The length of the this vector.</returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The vector has a length of 0. The length cannot be changed.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.LengthSquared">
      <summary>
            Returns the squared length of this vector.
            </summary>
      <returns>The squared length of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Max(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The maximized vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Min(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Returns a vector that contains the lowest value from each matching pair of components.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The minimized vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Multiply(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Multiplies the components of two vectors by each other.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The component-wise product of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Multiply(System.Double,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Negate(DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Negates a vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The negated vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Normalize">
      <summary>
            Normalizes the vector.
            </summary>
      <exception cref="T:System.DivideByZeroException">
            The length of this vector is zero. The vector cannot be normalized.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.Normalized">
      <summary>
            Returns the normalized vector.
            </summary>
      <exception cref="T:System.DivideByZeroException">
            The length of the vector is zero. The quaternion cannot be normalized.
            </exception>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector2D.One">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" /> with all of its components set to one.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Addition(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Adds two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Division(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Divides the components of a vector by the components of another 
            vector.
            </summary>
      <param name="dividend">The first vector (dividend).</param>
      <param name="divisor">The second vector (divisor).</param>
      <returns>The component-wise product of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Division(DigitalRune.Mathematics.Algebra.Vector2D,System.Double)">
      <summary>
            Divides a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component divided by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Equality(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Tests if two vectors are equal.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are equal; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector2D)~System.Double[]">
      <summary>
            Converts a vector to an array of 2 double values.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The array with 2 values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector2D)~System.Collections.Generic.List{System.Double}">
      <summary>
            Converts a vector to a list of 2 <see cref="T:System.Double" /> values.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The list with 2 <see cref="T:System.Double" /> values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector2D)~DigitalRune.Mathematics.Algebra.Vector2F">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />.
            </summary>
      <param name="vector">The DigitalRune <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" />.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector2D)~Microsoft.Xna.Framework.Vector2">
      <summary>
            Performs an conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" /> 
            (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector2" /> (XNA Framework).
            </summary>
      <param name="vector">The <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" /> (DigitalRune Mathematics).</param>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Vector2" /> (XNA Framework).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Explicit(Microsoft.Xna.Framework.Vector2)~DigitalRune.Mathematics.Algebra.Vector2D">
      <summary>
            Performs an conversion from <see cref="T:Microsoft.Xna.Framework.Vector2" /> (XNA Framework) to 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" /> (DigitalRune Mathematics).
            </summary>
      <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector2" /> (XNA Framework).</param>
      <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" /> (DigitalRune Mathematics).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_GreaterThan(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Tests if each component of a vector is greater than the corresponding 
            component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is greater than its 
            counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_GreaterThanOrEqual(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Tests if each component of a vector is greater or equal than the 
            corresponding component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is greater or equal than
            its counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Implicit(DigitalRune.Mathematics.Algebra.Vector2D)~DigitalRune.Mathematics.Algebra.VectorD">
      <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" /> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" />.
            </summary>
      <param name="vector">The DigitalRune <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" />.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Inequality(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Tests if two vectors are not equal.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are different; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_LessThan(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Tests if each component of a vector is less than the corresponding 
            component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is less than its 
            counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_LessThanOrEqual(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Tests if each component of a vector is less or equal than the 
            corresponding component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is less or equal than
            its counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Multiply(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Multiplies the components of two vectors by each other.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The component-wise product of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Multiply(DigitalRune.Mathematics.Algebra.Vector2D,System.Double)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Multiply(System.Double,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Subtraction(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Subtracts a vector from a vector.
            </summary>
      <param name="minuend">The first vector (minuend).</param>
      <param name="subtrahend">The second vector (subtrahend).</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Negates a vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The negated vector.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.Orthonormal">
      <summary>
            Returns an arbitrary normalized <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" /> that is orthogonal
            to this vector.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Parse(System.String)">
      <summary>
            Converts the string representation of a 2-dimensional vector to its 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" /> equivalent.
            </summary>
      <param name="s">A string representation of a 2-dimensional vector.</param>
      <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" /> that represents the vector specified by the 
            <paramref name="s" /> parameter.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a 2-dimensional vector in a specified 
            culture-specific format to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" /> equivalent.
            </summary>
      <param name="s">A string representation of a 2-dimensional vector.</param>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting 
            information about <paramref name="s" />. 
            </param>
      <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" /> that represents the vector specified by the 
            <paramref name="s" /> parameter.
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ProjectTo(DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Sets this vector to its projection onto the axis given by the target vector.
            </summary>
      <param name="target">The target vector.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ProjectTo(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Projects a vector onto an axis given by the target vector.
            </summary>
      <param name="vector">The vector.</param>
      <param name="target">The target vector.</param>
      <returns>
            The projection of <paramref name="vector" /> onto <paramref name="target" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.SmallestComponent">
      <summary>
            Gets the value of the smallest component.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Subtract(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
      <summary>
            Subtracts a vector from a vector.
            </summary>
      <param name="minuend">The first vector (minuend).</param>
      <param name="subtrahend">The second vector (subtrahend).</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ToArray">
      <summary>
            Converts this vector to an array of 2 <see cref="T:System.Double" /> values.
            </summary>
      <returns>The array with 2 <see cref="T:System.Double" /> values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ToList">
      <summary>
            Converts this vector to a list of 2 <see cref="T:System.Double" /> values.
            </summary>
      <returns>The list with 2 <see cref="T:System.Double" /> values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ToString">
      <summary>
            Returns the string representation of this vector.
            </summary>
      <returns>The string representation of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of this vector using the specified 
            culture-specific format information.
            </summary>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific 
            formatting information
            </param>
      <returns>The string representation of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ToVector2F">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ToVectorD">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" /> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ToXna">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" /> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector2" /> 
            (XNA Framework).
            </summary>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Vector2" /> (XNA Framework).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.TryNormalize">
      <summary>
            Tries to normalize the vector.
            </summary>
      <returns>
        <see langword="true" /> if the vector was normalized; otherwise, <see langword="false" /> if 
            the vector could not be normalized. (The length is numerically zero.)
            </returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector2D.UnitX">
      <summary>
            Returns the x unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" /> (1, 0).
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector2D.UnitY">
      <summary>
            Returns the value2 unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" /> (0, 1).
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector2D.X">
      <summary>
            The x component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector2D.Y">
      <summary>
            The y component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector2D.Zero">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" /> with all of its components set to zero.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.Vector2F">
      <summary>
            Defines a 2-dimensional vector (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.#ctor(System.Collections.Generic.IList{System.Single})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> class.
            </summary>
      <param name="components">
            List with the initial values for the components x, and y.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="components" /> has less than 2 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="components" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.#ctor(System.Single)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />.
            </summary>
      <param name="componentValue">The initial value for 2 the vector components.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.#ctor(System.Single,System.Single)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />.
            </summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.#ctor(System.Single[])">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />.
            </summary>
      <param name="components">
            Array with the initial values for the components x, and y.
            </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="components" /> has less than 2 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="components" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Absolute">
      <summary>
            Sets each vector component to its absolute value.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Absolute(DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Returns a vector with the absolute values of the elements of the given vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>A vector with the absolute values of the elements of the given vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Add(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Adds two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Determines whether two vectors are equal (regarding the 
            tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />).
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F,System.Single)">
      <summary>
            Determines whether two vectors are equal (regarding a specific 
            tolerance).
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if the vectors are equal (within the tolerance 
            <paramref name="epsilon" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Clamp(DigitalRune.Mathematics.Algebra.Vector2F,System.Single,System.Single)">
      <summary>
            Returns a vector with the vector components clamped to the range [min, max].
            </summary>
      <param name="vector">The vector.</param>
      <param name="min">The min limit.</param>
      <param name="max">The max limit.</param>
      <returns>A vector with clamped components.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Clamp(System.Single,System.Single)">
      <summary>
            Clamps the vector components to the range [min, max].
            </summary>
      <param name="min">The min limit.</param>
      <param name="max">The max limit.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ClampToZero">
      <summary>
            Clamps near-zero vector components to zero.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ClampToZero(DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
      <param name="vector">The vector.</param>
      <returns>
            The vector with small components clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ClampToZero(DigitalRune.Mathematics.Algebra.Vector2F,System.Single)">
      <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
      <param name="vector">The vector.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
            The vector with small components clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ClampToZero(System.Single)">
      <summary>
            Clamps near-zero vector components to zero.
            </summary>
      <param name="epsilon">The tolerance value.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Divide(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Divides the components of a vector by the components of another 
            vector.
            </summary>
      <param name="dividend">The first vector (dividend).</param>
      <param name="divisor">The second vector (divisor).</param>
      <returns>The component-wise division of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Divide(DigitalRune.Mathematics.Algebra.Vector2F,System.Single)">
      <summary>
            Divides a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component divided by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Dot(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Calculates the dot product of two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The dot product.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Equals(DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same 
            type and represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.FromXna(Microsoft.Xna.Framework.Vector2)">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector2" /> 
            (XNA Framework).
            </summary>
      <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector2" /> (XNA Framework).</param>
      <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> (DigitalRune Mathematics).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.GetAngle(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Calculates the angle between two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The angle between the given vectors, such that 0 ≤ angle ≤ <c>π</c>.</returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
        <paramref name="vector1" /> or <paramref name="vector2" /> has a length of 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.IndexOfLargestComponent">
      <summary>
            Gets the index (zero-based) of the largest component.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.IndexOfSmallestComponent">
      <summary>
            Gets the index (zero-based) of the smallest component.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.IsNaN">
      <summary>
            Gets a value indicating whether a component of the vector is <see cref="F:System.Single.NaN" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.IsNumericallyNormalized">
      <summary>
            Returns a value indicating whether this vector is normalized (the length is numerically
            equal to 1).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.IsNumericallyZero">
      <summary>
            Returns a value indicating whether this vector has zero size (the length is numerically
            equal to 0).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.Item(System.Int32)">
      <summary>
            Gets or sets the component at the specified index.
            </summary>
      <param name="index">The index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.LargestComponent">
      <summary>
            Gets the value of the largest component.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.Length">
      <summary>
            Gets or sets the length of this vector.
            </summary>
      <returns>The length of the this vector.</returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The vector has a length of 0. The length cannot be changed.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.LengthSquared">
      <summary>
            Returns the squared length of this vector.
            </summary>
      <returns>The squared length of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Max(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The maximized vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Min(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Returns a vector that contains the lowest value from each matching pair of components.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The minimized vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Multiply(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Multiplies the components of two vectors by each other.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The component-wise product of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Multiply(System.Single,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Negate(DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Negates a vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The negated vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Normalize">
      <summary>
            Normalizes the vector.
            </summary>
      <exception cref="T:System.DivideByZeroException">
            The length of this vector is zero. The vector cannot be normalized.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.Normalized">
      <summary>
            Returns the normalized vector.
            </summary>
      <exception cref="T:System.DivideByZeroException">
            The length of the vector is zero. The quaternion cannot be normalized.
            </exception>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector2F.One">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> with all of its components set to one.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Addition(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Adds two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Division(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Divides the components of a vector by the components of another 
            vector.
            </summary>
      <param name="dividend">The first vector (dividend).</param>
      <param name="divisor">The second vector (divisor).</param>
      <returns>The component-wise product of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Division(DigitalRune.Mathematics.Algebra.Vector2F,System.Single)">
      <summary>
            Divides a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component divided by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Equality(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Tests if two vectors are equal.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are equal; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Explicit(DigitalRune.Mathematics.Algebra.Vector2F)~Microsoft.Xna.Framework.Vector2">
      <summary>
            Performs an conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> 
            (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector2" /> (XNA Framework).
            </summary>
      <param name="vector">The <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> (DigitalRune Mathematics).</param>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Vector2" /> (XNA Framework).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Explicit(DigitalRune.Mathematics.Algebra.Vector2F)~System.Collections.Generic.List{System.Single}">
      <summary>
            Converts a vector to a list of 2 float values.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Explicit(DigitalRune.Mathematics.Algebra.Vector2F)~System.Single[]">
      <summary>
            Converts a vector to an array of 2 float values.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The array with 2 values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Explicit(Microsoft.Xna.Framework.Vector2)~DigitalRune.Mathematics.Algebra.Vector2F">
      <summary>
            Performs an conversion from <see cref="T:Microsoft.Xna.Framework.Vector2" /> (XNA Framework) to 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> (DigitalRune Mathematics).
            </summary>
      <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector2" /> (XNA Framework).</param>
      <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> (DigitalRune Mathematics).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_GreaterThan(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Tests if each component of a vector is greater than the corresponding 
            component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is greater than its 
            counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_GreaterThanOrEqual(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Tests if each component of a vector is greater or equal than the 
            corresponding component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is greater or equal than
            its counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Implicit(DigitalRune.Mathematics.Algebra.Vector2F)~DigitalRune.Mathematics.Algebra.VectorF">
      <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> 
            to <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" />.
            </summary>
      <param name="vector">The DigitalRune <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Implicit(DigitalRune.Mathematics.Algebra.Vector2F)~DigitalRune.Mathematics.Algebra.Vector2D">
      <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" />.
            </summary>
      <param name="vector">The DigitalRune <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Inequality(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Tests if two vectors are not equal.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are different; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_LessThan(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Tests if each component of a vector is less than the corresponding 
            component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is less than its 
            counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_LessThanOrEqual(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Tests if each component of a vector is less or equal than the 
            corresponding component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is less or equal than
            its counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Multiply(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Multiplies the components of two vectors by each other.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The component-wise product of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Multiply(DigitalRune.Mathematics.Algebra.Vector2F,System.Single)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Multiply(System.Single,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Subtraction(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Subtracts a vector from a vector.
            </summary>
      <param name="minuend">The first vector (minuend).</param>
      <param name="subtrahend">The second vector (subtrahend).</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Negates a vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The negated vector.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.Orthonormal">
      <summary>
            Returns an arbitrary normalized <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> that is orthogonal
            to this vector.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Parse(System.String)">
      <summary>
            Converts the string representation of a 2-dimensional vector to its 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> equivalent.
            </summary>
      <param name="s">A string representation of a 2-dimensional vector.</param>
      <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> that represents the vector specified by the 
            <paramref name="s" /> parameter.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a 2-dimensional vector in a specified 
            culture-specific format to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> equivalent.
            </summary>
      <param name="s">A string representation of a 2-dimensional vector.</param>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting 
            information about <paramref name="s" />. 
            </param>
      <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> that represents the vector specified by the 
            <paramref name="s" /> parameter.
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ProjectTo(DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Sets this vector to its projection onto the axis given by the target vector.
            </summary>
      <param name="target">The target vector.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ProjectTo(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Projects a vector onto an axis given by the target vector.
            </summary>
      <param name="vector">The vector.</param>
      <param name="target">The target vector.</param>
      <returns>
            The projection of <paramref name="vector" /> onto <paramref name="target" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.SmallestComponent">
      <summary>
            Gets the value of the smallest component.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Subtract(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Subtracts a vector from a vector.
            </summary>
      <param name="minuend">The first vector (minuend).</param>
      <param name="subtrahend">The second vector (subtrahend).</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ToArray">
      <summary>
            Converts this vector to an array of 2 float values.
            </summary>
      <returns>The array with 2 values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ToList">
      <summary>
            Converts this vector to a list of 2 float values.
            </summary>
      <returns>The list with 2 <see cref="T:System.Single" /> values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ToString">
      <summary>
            Returns the string representation of this vector.
            </summary>
      <returns>The string representation of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of this vector using the specified 
            culture-specific format information.
            </summary>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific 
            formatting information
            </param>
      <returns>The string representation of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ToVector2D">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ToVectorF">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ToXna">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector2" /> 
            (XNA Framework).
            </summary>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Vector2" /> (XNA Framework).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.TryNormalize">
      <summary>
            Tries to normalize the vector.
            </summary>
      <returns>
        <see langword="true" /> if the vector was normalized; otherwise, <see langword="false" /> if 
            the vector could not be normalized. (The length is numerically zero.)
            </returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector2F.UnitX">
      <summary>
            Returns the x unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> (1, 0).
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector2F.UnitY">
      <summary>
            Returns the value2 unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> (0, 1).
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector2F.X">
      <summary>
            The x component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector2F.Y">
      <summary>
            The y component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector2F.Zero">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> with all of its components set to zero.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.Vector3D">
      <summary>
            Defines a 3-dimensional vector (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.#ctor(System.Collections.Generic.IList{System.Double})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> class.
            </summary>
      <param name="components">
            List with the initial values for the components x, y and z.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="components" /> has less than 3 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="components" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.#ctor(System.Double)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" />.
            </summary>
      <param name="componentValue">The initial value for 3 the vector components.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" />.
            </summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.#ctor(System.Double[])">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" />.
            </summary>
      <param name="components">
            Array with the initial values for the components x, y and z.
            </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="components" /> has less than 3 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="components" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Absolute">
      <summary>
            Sets each vector component to its absolute value.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Absolute(DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Returns a vector with the absolute values of the elements of the given vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>A vector with the absolute values of the elements of the given vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Add(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Adds two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Determines whether two vectors are equal (regarding the 
            tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />).
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D,System.Double)">
      <summary>
            Determines whether two vectors are equal (regarding a specific 
            tolerance).
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if the vectors are equal (within the tolerance 
            <paramref name="epsilon" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.Backward">
      <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> pointing backward (0, 0, 1).
            (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Clamp(DigitalRune.Mathematics.Algebra.Vector3D,System.Double,System.Double)">
      <summary>
            Returns a vector with the vector components clamped to the range [min, max].
            </summary>
      <param name="vector">The vector.</param>
      <param name="min">The min limit.</param>
      <param name="max">The max limit.</param>
      <returns>A vector with clamped components.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Clamp(System.Double,System.Double)">
      <summary>
            Clamps the vector components to the range [min, max].
            </summary>
      <param name="min">The min limit.</param>
      <param name="max">The max limit.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ClampToZero">
      <summary>
            Clamps near-zero vector components to zero.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ClampToZero(DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
      <param name="vector">The vector.</param>
      <returns>
            The vector with small components clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ClampToZero(DigitalRune.Mathematics.Algebra.Vector3D,System.Double)">
      <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
      <param name="vector">The vector.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
            The vector with small components clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ClampToZero(System.Double)">
      <summary>
            Clamps near-zero vector components to zero.
            </summary>
      <param name="epsilon">The tolerance value.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Cross(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Calculates the cross product of two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The cross product.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Divide(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Divides the components of a vector by the components of another 
            vector.
            </summary>
      <param name="dividend">The first vector (dividend).</param>
      <param name="divisor">The second vector (divisor).</param>
      <returns>The component-wise division of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Divide(DigitalRune.Mathematics.Algebra.Vector3D,System.Double)">
      <summary>
            Divides a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component divided by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Dot(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Calculates the dot product of two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The dot product.</returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.Down">
      <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> pointing down (0, −1, 0).
            (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Equals(DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same 
            type and represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.Forward">
      <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> pointing forward (0, 0, −1).
            (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.FromXna(Microsoft.Xna.Framework.Vector3)">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector3" /> 
            (XNA Framework).
            </summary>
      <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector3" /> (XNA Framework).</param>
      <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> (DigitalRune Mathematics).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.GetAngle(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Calculates the angle between two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The angle between the given vectors, such that 0 ≤ angle ≤ <c>π</c>.</returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
        <paramref name="vector1" /> or <paramref name="vector2" /> has a length of 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.IndexOfLargestComponent">
      <summary>
            Gets the index (zero-based) of the largest component.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.IndexOfSmallestComponent">
      <summary>
            Gets the index (zero-based) of the largest component.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.IsNaN">
      <summary>
            Gets a value indicating whether a component of the vector is <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.IsNumericallyNormalized">
      <summary>
            Returns a value indicating whether this vector is normalized (the length is numerically
            equal to 1).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.IsNumericallyZero">
      <summary>
            Returns a value indicating whether this vector has zero size (the length is numerically
            equal to 0).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.Item(System.Int32)">
      <summary>
            Gets or sets the component at the specified index.
            </summary>
      <param name="index">The index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.LargestComponent">
      <summary>
            Gets the value of the largest component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.Left">
      <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> pointing left (-1, 0, 0).
            (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.Length">
      <summary>
            Gets or sets the length of this vector.
            </summary>
      <returns>The length of the this vector.</returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The vector has a length of 0. The length cannot be changed.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.LengthSquared">
      <summary>
            Returns the squared length of this vector.
            </summary>
      <returns>The squared length of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Max(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The maximized vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Min(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Returns a vector that contains the lowest value from each matching pair of components.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The minimized vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Multiply(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Multiplies the components of two vectors by each other.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The component-wise product of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Multiply(System.Double,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Negate(DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Negates a vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The negated vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Normalize">
      <summary>
            Normalizes the vector.
            </summary>
      <exception cref="T:System.DivideByZeroException">
            The length of this vector is zero. The vector cannot be normalized.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.Normalized">
      <summary>
            Returns the normalized vector.
            </summary>
      <exception cref="T:System.DivideByZeroException">
            The length of the vector is zero. The quaternion cannot be normalized.
            </exception>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.One">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> with all of its components set to one.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Addition(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Adds two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Division(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Divides the components of a vector by the components of another 
            vector.
            </summary>
      <param name="dividend">The first vector (dividend).</param>
      <param name="divisor">The second vector (divisor).</param>
      <returns>The component-wise product of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Division(DigitalRune.Mathematics.Algebra.Vector3D,System.Double)">
      <summary>
            Divides a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component divided by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Equality(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Tests if two vectors are equal.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are equal; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector3D)~Microsoft.Xna.Framework.Vector3">
      <summary>
            Performs an conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> 
            (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector3" /> (XNA Framework).
            </summary>
      <param name="vector">The <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> (DigitalRune Mathematics).</param>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Vector3" /> (XNA Framework).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector3D)~DigitalRune.Mathematics.Algebra.Vector3F">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </summary>
      <param name="vector">The DigitalRune <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" />.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector3D)~System.Collections.Generic.List{System.Double}">
      <summary>
            Converts a vector to a list of 3 double values.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector3D)~System.Double[]">
      <summary>
            Converts a vector to an array of 3 double values.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The array with 3 values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Explicit(Microsoft.Xna.Framework.Vector3)~DigitalRune.Mathematics.Algebra.Vector3D">
      <summary>
            Performs an conversion from <see cref="T:Microsoft.Xna.Framework.Vector3" /> (XNA Framework) to 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> (DigitalRune Mathematics).
            </summary>
      <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector3" /> (XNA Framework).</param>
      <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> (DigitalRune Mathematics).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_GreaterThan(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Tests if each component of a vector is greater than the corresponding 
            component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is greater than its 
            counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_GreaterThanOrEqual(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Tests if each component of a vector is greater or equal than the 
            corresponding component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is greater or equal than
            its counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Implicit(DigitalRune.Mathematics.Algebra.Vector3D)~DigitalRune.Mathematics.Algebra.VectorD">
      <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" />.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Inequality(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Tests if two vectors are not equal.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are different; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_LessThan(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Tests if each component of a vector is less than the corresponding 
            component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is less than its 
            counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_LessThanOrEqual(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Tests if each component of a vector is less or equal than the 
            corresponding component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is less or equal than
            its counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Multiply(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Multiplies the components of two vectors by each other.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The component-wise product of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Multiply(DigitalRune.Mathematics.Algebra.Vector3D,System.Double)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Multiply(System.Double,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Subtraction(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Subtracts a vector from a vector.
            </summary>
      <param name="minuend">The first vector (minuend).</param>
      <param name="subtrahend">The second vector (subtrahend).</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Negates a vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The negated vector.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.Orthonormal1">
      <summary>
            Returns an arbitrary normalized <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> that is orthogonal
            to this vector.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.Orthonormal2">
      <summary>
            Gets a normalized orthogonal <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> that is orthogonal to
            this <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> and to <see cref="P:DigitalRune.Mathematics.Algebra.Vector3D.Orthonormal1" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Parse(System.String)">
      <summary>
            Converts the string representation of a 3-dimensional vector to its 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> equivalent.
            </summary>
      <param name="s">A string representation of a 3-dimensional vector.</param>
      <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> that represents the vector specified by the 
            <paramref name="s" /> parameter.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a 3-dimensional vector in a specified 
            culture-specific format to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> equivalent.
            </summary>
      <param name="s">A string representation of a 3-dimensional vector.</param>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting 
            information about <paramref name="s" />. 
            </param>
      <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> that represents the vector specified by the 
            <paramref name="s" /> parameter.
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ProjectTo(DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Sets this vector to its projection onto the axis given by the target vector.
            </summary>
      <param name="target">The target vector.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ProjectTo(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Projects a vector onto an axis given by the target vector.
            </summary>
      <param name="vector">The vector.</param>
      <param name="target">The target vector.</param>
      <returns>
            The projection of <paramref name="vector" /> onto <paramref name="target" />.
            </returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.Right">
      <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> pointing right (1, 0, 0).
            (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.SmallestComponent">
      <summary>
            Gets the value of the smallest component.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Subtract(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
      <summary>
            Subtracts a vector from a vector.
            </summary>
      <param name="minuend">The first vector (minuend).</param>
      <param name="subtrahend">The second vector (subtrahend).</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ToArray">
      <summary>
            Converts this vector to an array of 3 double values.
            </summary>
      <returns>The array with 3 values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ToCrossProductMatrix">
      <summary>
            Returns the cross product matrix (skew matrix) of this vector.
            </summary>
      <returns>The cross product matrix of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ToList">
      <summary>
            Converts this vector to a list of 3 double values.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ToString">
      <summary>
            Returns the string representation of this vector.
            </summary>
      <returns>The string representation of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of this vector using the specified 
            culture-specific format information.
            </summary>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific 
            formatting information
            </param>
      <returns>The string representation of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ToVector3F">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ToVectorD">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ToXna">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector3" /> 
            (XNA Framework).
            </summary>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Vector3" /> (XNA Framework).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.TryNormalize">
      <summary>
            Tries to normalize the vector.
            </summary>
      <returns>
        <see langword="true" /> if the vector was normalized; otherwise, <see langword="false" /> if 
            the vector could not be normalized. (The length is numerically zero.)
            </returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.UnitX">
      <summary>
            Returns the x unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> (1, 0, 0).
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.UnitY">
      <summary>
            Returns the value2 unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> (0, 1, 0).
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.UnitZ">
      <summary>
            Returns the z unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> (0, 0, 1).
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.Up">
      <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> pointing up (0, 1, 0).
            (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.X">
      <summary>
            The x component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.Y">
      <summary>
            The y component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.Z">
      <summary>
            The z component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.Zero">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> with all of its components set to zero.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.Vector3F">
      <summary>
            Defines a 3-dimensional vector (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.#ctor(System.Collections.Generic.IList{System.Single})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> class.
            </summary>
      <param name="components">
            List with the initial values for the components x, y and z.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="components" /> has less than 3 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="components" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.#ctor(System.Single)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </summary>
      <param name="componentValue">The initial value for 3 the vector components.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.#ctor(System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.#ctor(System.Single[])">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </summary>
      <param name="components">
            Array with the initial values for the components x, y and z.
            </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="components" /> has less than 3 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="components" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Absolute">
      <summary>
            Sets each vector component to its absolute value.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Absolute(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Returns a vector with the absolute values of the elements of the given vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>A vector with the absolute values of the elements of the given vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Add(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Adds two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Determines whether two vectors are equal (regarding the 
            tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />).
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
      <summary>
            Determines whether two vectors are equal (regarding a specific 
            tolerance).
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if the vectors are equal (within the tolerance 
            <paramref name="epsilon" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.Backward">
      <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> pointing backward (0, 0, 1).
            (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Clamp(DigitalRune.Mathematics.Algebra.Vector3F,System.Single,System.Single)">
      <summary>
            Returns a vector with the vector components clamped to the range [min, max].
            </summary>
      <param name="vector">The vector.</param>
      <param name="min">The min limit.</param>
      <param name="max">The max limit.</param>
      <returns>A vector with clamped components.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Clamp(System.Single,System.Single)">
      <summary>
            Clamps the vector components to the range [min, max].
            </summary>
      <param name="min">The min limit.</param>
      <param name="max">The max limit.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ClampToZero">
      <summary>
            Clamps near-zero vector components to zero.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ClampToZero(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
      <param name="vector">The vector.</param>
      <returns>
            The vector with small components clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ClampToZero(DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
      <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
      <param name="vector">The vector.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
            The vector with small components clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ClampToZero(System.Single)">
      <summary>
            Clamps near-zero vector components to zero.
            </summary>
      <param name="epsilon">The tolerance value.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Cross(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Calculates the cross product of two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The cross product.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Divide(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Divides the components of a vector by the components of another 
            vector.
            </summary>
      <param name="dividend">The first vector (dividend).</param>
      <param name="divisor">The second vector (divisor).</param>
      <returns>The component-wise division of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Divide(DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
      <summary>
            Divides a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component divided by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Dot(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Calculates the dot product of two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The dot product.</returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.Down">
      <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> pointing down (0, −1, 0).
            (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Equals(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same 
            type and represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.Forward">
      <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> pointing forward (0, 0, −1).
            (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.FromXna(Microsoft.Xna.Framework.Vector3)">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector3" /> 
            (XNA Framework).
            </summary>
      <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector3" /> (XNA Framework).</param>
      <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> (DigitalRune Mathematics).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.GetAngle(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Calculates the angle between two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The angle between the given vectors, such that 0 ≤ angle ≤ <c>π</c>.</returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
        <paramref name="vector1" /> or <paramref name="vector2" /> has a length of 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.IndexOfLargestComponent">
      <summary>
            Gets the index (zero-based) of the largest component.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.IndexOfSmallestComponent">
      <summary>
            Gets the index (zero-based) of the largest component.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.IsNaN">
      <summary>
            Gets a value indicating whether a component of the vector is <see cref="F:System.Single.NaN" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.IsNumericallyNormalized">
      <summary>
            Returns a value indicating whether this vector is normalized (the length is numerically
            equal to 1).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.IsNumericallyZero">
      <summary>
            Returns a value indicating whether this vector has zero size (the length is numerically
            equal to 0).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.Item(System.Int32)">
      <summary>
            Gets or sets the component at the specified index.
            </summary>
      <param name="index">The index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.LargestComponent">
      <summary>
            Gets the value of the largest component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.Left">
      <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> pointing left (-1, 0, 0).
            (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.Length">
      <summary>
            Gets or sets the length of this vector.
            </summary>
      <returns>The length of the this vector.</returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The vector has a length of 0. The length cannot be changed.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.LengthSquared">
      <summary>
            Returns the squared length of this vector.
            </summary>
      <returns>The squared length of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Max(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The maximized vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Min(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Returns a vector that contains the lowest value from each matching pair of components.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The minimized vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Multiply(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Multiplies the components of two vectors by each other.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The component-wise product of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Multiply(System.Single,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Negate(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Negates a vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The negated vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Normalize">
      <summary>
            Normalizes the vector.
            </summary>
      <exception cref="T:System.DivideByZeroException">
            The length of this vector is zero. The vector cannot be normalized.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.Normalized">
      <summary>
            Returns the normalized vector.
            </summary>
      <exception cref="T:System.DivideByZeroException">
            The length of the vector is zero. The quaternion cannot be normalized.
            </exception>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.One">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> with all of its components set to one.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Addition(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Adds two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Division(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Divides the components of a vector by the components of another 
            vector.
            </summary>
      <param name="dividend">The first vector (dividend).</param>
      <param name="divisor">The second vector (divisor).</param>
      <returns>The component-wise product of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Division(DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
      <summary>
            Divides a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component divided by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Equality(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Tests if two vectors are equal.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are equal; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Explicit(DigitalRune.Mathematics.Algebra.Vector3F)~System.Single[]">
      <summary>
            Converts a vector to an array of 3 float values.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The array with 3 values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Explicit(DigitalRune.Mathematics.Algebra.Vector3F)~System.Collections.Generic.List{System.Single}">
      <summary>
            Converts a vector to a list of 3 float values.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Explicit(DigitalRune.Mathematics.Algebra.Vector3F)~Microsoft.Xna.Framework.Vector3">
      <summary>
            Performs an conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> 
            (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector3" /> (XNA Framework).
            </summary>
      <param name="vector">The <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> (DigitalRune Mathematics).</param>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Vector3" /> (XNA Framework).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Explicit(Microsoft.Xna.Framework.Vector3)~DigitalRune.Mathematics.Algebra.Vector3F">
      <summary>
            Performs an conversion from <see cref="T:Microsoft.Xna.Framework.Vector3" /> (XNA Framework) to 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> (DigitalRune Mathematics).
            </summary>
      <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector3" /> (XNA Framework).</param>
      <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> (DigitalRune Mathematics).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_GreaterThan(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Tests if each component of a vector is greater than the corresponding 
            component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is greater than its 
            counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_GreaterThanOrEqual(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Tests if each component of a vector is greater or equal than the 
            corresponding component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is greater or equal than
            its counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Implicit(DigitalRune.Mathematics.Algebra.Vector3F)~DigitalRune.Mathematics.Algebra.Vector3D">
      <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" />.
            </summary>
      <param name="vector">The DigitalRune <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Implicit(DigitalRune.Mathematics.Algebra.Vector3F)~DigitalRune.Mathematics.Algebra.VectorF">
      <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" />.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Inequality(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Tests if two vectors are not equal.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are different; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_LessThan(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Tests if each component of a vector is less than the corresponding 
            component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is less than its 
            counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_LessThanOrEqual(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Tests if each component of a vector is less or equal than the 
            corresponding component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is less or equal than
            its counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Multiply(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Multiplies the components of two vectors by each other.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The component-wise product of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Multiply(DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Multiply(System.Single,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Subtraction(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Subtracts a vector from a vector.
            </summary>
      <param name="minuend">The first vector (minuend).</param>
      <param name="subtrahend">The second vector (subtrahend).</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Negates a vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The negated vector.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.Orthonormal1">
      <summary>
            Returns an arbitrary normalized <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> that is orthogonal
            to this vector.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.Orthonormal2">
      <summary>
            Gets a normalized orthogonal <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> that is orthogonal to
            this <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> and to <see cref="P:DigitalRune.Mathematics.Algebra.Vector3F.Orthonormal1" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Parse(System.String)">
      <summary>
            Converts the string representation of a 3-dimensional vector to its 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> equivalent.
            </summary>
      <param name="s">A string representation of a 3-dimensional vector.</param>
      <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> that represents the vector specified by the 
            <paramref name="s" /> parameter.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a 3-dimensional vector in a specified 
            culture-specific format to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> equivalent.
            </summary>
      <param name="s">A string representation of a 3-dimensional vector.</param>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting 
            information about <paramref name="s" />. 
            </param>
      <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> that represents the vector specified by the 
            <paramref name="s" /> parameter.
            </returns>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ProjectTo(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Sets this vector to its projection onto the axis given by the target vector.
            </summary>
      <param name="target">The target vector.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ProjectTo(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Projects a vector onto an axis given by the target vector.
            </summary>
      <param name="vector">The vector.</param>
      <param name="target">The target vector.</param>
      <returns>
            The projection of <paramref name="vector" /> onto <paramref name="target" />.
            </returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.Right">
      <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> pointing right (1, 0, 0).
            (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.SmallestComponent">
      <summary>
            Gets the value of the smallest component.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Subtract(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Subtracts a vector from a vector.
            </summary>
      <param name="minuend">The first vector (minuend).</param>
      <param name="subtrahend">The second vector (subtrahend).</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ToArray">
      <summary>
            Converts this vector to an array of 3 float values.
            </summary>
      <returns>The array with 3 values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ToCrossProductMatrix">
      <summary>
            Returns the cross product matrix (skew matrix) of this vector.
            </summary>
      <returns>The cross product matrix of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ToList">
      <summary>
            Converts this vector to a list of 3 float values.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ToString">
      <summary>
            Returns the string representation of this vector.
            </summary>
      <returns>The string representation of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of this vector using the specified 
            culture-specific format information.
            </summary>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific 
            formatting information
            </param>
      <returns>The string representation of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ToVector3D">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ToVectorF">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ToXna">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector3" /> 
            (XNA Framework).
            </summary>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Vector3" /> (XNA Framework).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.TryNormalize">
      <summary>
            Tries to normalize the vector.
            </summary>
      <returns>
        <see langword="true" /> if the vector was normalized; otherwise, <see langword="false" /> if 
            the vector could not be normalized. (The length is numerically zero.)
            </returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.UnitX">
      <summary>
            Returns the x unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> (1, 0, 0).
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.UnitY">
      <summary>
            Returns the value2 unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> (0, 1, 0).
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.UnitZ">
      <summary>
            Returns the z unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> (0, 0, 1).
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.Up">
      <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> pointing up (0, 1, 0).
            (Only available in the XNA-compatible build.)
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.X">
      <summary>
            The x component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.Y">
      <summary>
            The y component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.Z">
      <summary>
            The z component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.Zero">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> with all of its components set to zero.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.Vector4D">
      <summary>
            Defines a 4-dimensional vector (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.#ctor(DigitalRune.Mathematics.Algebra.Vector3D,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" /> class.
            </summary>
      <param name="vector">The vector (x, y, z).</param>
      <param name="w">The w component.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.#ctor(System.Collections.Generic.IList{System.Double})">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" />.
            </summary>
      <param name="components">
            List with the initial values for the components x, y, z and w.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="components" /> has less than 4 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="components" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.#ctor(System.Double)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" />.
            </summary>
      <param name="componentValue">The initial value for 4 the vector components.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" />.
            </summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the z component.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.#ctor(System.Double[])">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" />.
            </summary>
      <param name="components">
            Array with the initial values for the components x, y, z and w.
            </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="components" /> has less than 4 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="components" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Absolute">
      <summary>
            Sets each vector component to its absolute value.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Absolute(DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Returns a vector with the absolute values of the elements of the given vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>A vector with the absolute values of the elements of the given vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Add(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Adds two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Determines whether two vectors are equal (regarding the 
            tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />).
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D,System.Double)">
      <summary>
            Determines whether two vectors are equal (regarding a specific 
            tolerance).
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if the vectors are equal (within the tolerance 
            <paramref name="epsilon" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Clamp(DigitalRune.Mathematics.Algebra.Vector4D,System.Double,System.Double)">
      <summary>
            Returns a vector with the vector components clamped to the range [min, max].
            </summary>
      <param name="vector">The vector.</param>
      <param name="min">The min limit.</param>
      <param name="max">The max limit.</param>
      <returns>A vector with clamped components.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Clamp(System.Double,System.Double)">
      <summary>
            Clamps the vector components to the range [min, max].
            </summary>
      <param name="min">The min limit.</param>
      <param name="max">The max limit.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ClampToZero">
      <summary>
            Clamps near-zero vector components to zero.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ClampToZero(DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
      <param name="vector">The vector.</param>
      <returns>
            The vector with small components clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ClampToZero(DigitalRune.Mathematics.Algebra.Vector4D,System.Double)">
      <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
      <param name="vector">The vector.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
            The vector with small components clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ClampToZero(System.Double)">
      <summary>
            Clamps near-zero vector components to zero.
            </summary>
      <param name="epsilon">The tolerance value.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Divide(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Divides the components of a vector by the components of another 
            vector.
            </summary>
      <param name="dividend">The first vector (dividend).</param>
      <param name="divisor">The second vector (divisor).</param>
      <returns>The component-wise division of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Divide(DigitalRune.Mathematics.Algebra.Vector4D,System.Double)">
      <summary>
            Divides a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component divided by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Dot(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Returns the dot product of two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The dot product.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Equals(DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same 
            type and represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.FromXna(Microsoft.Xna.Framework.Vector4)">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" /> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector4" /> 
            (XNA Framework).
            </summary>
      <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector4" /> (XNA Framework).</param>
      <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" /> (DigitalRune Mathematics).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.HomogeneousDivide(DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Performs the homogeneous divide or perspective divide: X, Y and Z are divided by W.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The vector (X/W, Y/W, Z/W).</returns>
      <exception cref="T:System.DivideByZeroException">Component W is 0.</exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.IndexOfLargestComponent">
      <summary>
            Gets the index (zero-based) of the largest component.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.IndexOfSmallestComponent">
      <summary>
            Gets the index (zero-based) of the smallest component.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.IsNaN">
      <summary>
            Gets a value indicating whether a component of the vector is <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.IsNumericallyNormalized">
      <summary>
            Returns a value indicating whether this vector is normalized (the length is numerically
            equal to 1).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.IsNumericallyZero">
      <summary>
            Returns a value indicating whether this vector has zero size (the length is numerically
            equal to 0).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.Item(System.Int32)">
      <summary>
            Gets or sets the component at the specified index.
            </summary>
      <param name="index">The index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.LargestComponent">
      <summary>
            Gets the value of the largest component.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.Length">
      <summary>
            Gets or sets the length of this vector.
            </summary>
      <returns>The length of the this vector.</returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The vector has a length of 0. The length cannot be changed.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.LengthSquared">
      <summary>
            Returns the squared length of this vector.
            </summary>
      <returns>The squared length of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Max(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The maximized vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Min(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Returns a vector that contains the lowest value from each matching pair of components.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The minimized vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Multiply(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Multiplies the components of two vectors by each other.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The component-wise product of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Multiply(System.Double,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Negate(DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Negates a vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The negated vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Normalize">
      <summary>
            Normalizes the vector.
            </summary>
      <exception cref="T:System.DivideByZeroException">
            The length of this vector is zero. The vector cannot be normalized.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.Normalized">
      <summary>
            Returns the normalized vector.
            </summary>
      <exception cref="T:System.DivideByZeroException">
            The length of the vector is zero. The quaternion cannot be normalized.
            </exception>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector4D.One">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" /> with all of its components set to one.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Addition(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Adds two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Division(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Divides the components of a vector by the components of another 
            vector.
            </summary>
      <param name="dividend">The first vector (dividend).</param>
      <param name="divisor">The second vector (divisor).</param>
      <returns>The component-wise product of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Division(DigitalRune.Mathematics.Algebra.Vector4D,System.Double)">
      <summary>
            Divides a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component divided by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Equality(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Tests if two vectors are equal.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are equal; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector4D)~System.Double[]">
      <summary>
            Converts a vector to an array of 4 double values.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The array with 4 values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector4D)~System.Collections.Generic.List{System.Double}">
      <summary>
            Converts a vector to a list of 4 double values.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The list with 4 values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector4D)~DigitalRune.Mathematics.Algebra.Vector4F">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" /> 
            to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </summary>
      <param name="vector">The DigitalRune <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" />.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector4D)~Microsoft.Xna.Framework.Vector4">
      <summary>
            Performs an conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" /> 
            (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector4" /> (XNA Framework).
            </summary>
      <param name="vector">The <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" /> (DigitalRune Mathematics).</param>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Vector4" /> (XNA Framework).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Explicit(Microsoft.Xna.Framework.Vector4)~DigitalRune.Mathematics.Algebra.Vector4D">
      <summary>
            Performs an conversion from <see cref="T:Microsoft.Xna.Framework.Vector4" /> (XNA Framework) to 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" /> (DigitalRune Mathematics).
            </summary>
      <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector4" /> (XNA Framework).</param>
      <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" /> (DigitalRune Mathematics).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_GreaterThan(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Tests if each component of a vector is greater than the corresponding 
            component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is greater than its 
            counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_GreaterThanOrEqual(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Tests if each component of a vector is greater or equal than the 
            corresponding component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is greater or equal than
            its counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Implicit(DigitalRune.Mathematics.Algebra.Vector4D)~DigitalRune.Mathematics.Algebra.VectorD">
      <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" /> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" />.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Inequality(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Tests if two vectors are not equal.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are different; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_LessThan(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Tests if each component of a vector is less than the corresponding 
            component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is less than its 
            counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_LessThanOrEqual(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Tests if each component of a vector is less or equal than the 
            corresponding component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is less or equal than
            its counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Multiply(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Multiplies the components of two vectors by each other.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The component-wise product of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Multiply(DigitalRune.Mathematics.Algebra.Vector4D,System.Double)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>The vector with each component multiplied by scalar.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Multiply(System.Double,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Subtraction(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Subtracts a vector from a vector.
            </summary>
      <param name="minuend">The first vector (minuend).</param>
      <param name="subtrahend">The second vector (subtrahend).</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Negates a vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The negated vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Parse(System.String)">
      <summary>
            Converts the string representation of a 4-dimensional vector to its 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" /> equivalent.
            </summary>
      <param name="s">A string representation of a 4-dimensional vector.</param>
      <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" /> that represents the vector specified by the 
            <paramref name="s" /> parameter.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a 4-dimensional vector in a specified 
            culture-specific format to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" /> equivalent.
            </summary>
      <param name="s">A string representation of a 4-dimensional vector.</param>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting 
            information about <paramref name="s" />. 
            </param>
      <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" /> that represents the vector specified by the 
            <paramref name="s" /> parameter.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ProjectTo(DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Sets this vector to its projection onto the axis given by the target vector.
            </summary>
      <param name="target">The target vector.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ProjectTo(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Projects a vector onto an axis given by the target vector.
            </summary>
      <param name="vector">The vector.</param>
      <param name="target">The target vector.</param>
      <returns>
            The projection of <paramref name="vector" /> onto <paramref name="target" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.SmallestComponent">
      <summary>
            Gets the value of the largest component.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Subtract(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
      <summary>
            Subtracts a vector from a vector.
            </summary>
      <param name="minuend">The first vector (minuend).</param>
      <param name="subtrahend">The second vector (subtrahend).</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ToArray">
      <summary>
            Converts this vector to an array of 4 double values.
            </summary>
      <returns>The array with 4 values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ToList">
      <summary>
            Converts this vector to a list of 4 double values.
            </summary>
      <returns>The list with 4 values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ToString">
      <summary>
            Returns the string representation of this vector.
            </summary>
      <returns>The string representation of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of this vector using the specified 
            culture-specific format information.
            </summary>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific 
            formatting information
            </param>
      <returns>The string representation of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ToVector4F">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ToVectorD">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" /> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ToXna">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" /> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector4" /> 
            (XNA Framework).
            </summary>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Vector4" /> (XNA Framework).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.TryNormalize">
      <summary>
            Tries to normalize the vector.
            </summary>
      <returns>
        <see langword="true" /> if the vector was normalized; otherwise, <see langword="false" /> if 
            the vector could not be normalized. (The length is numerically zero.)
            </returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector4D.UnitW">
      <summary>
            Returns the w unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" /> (0, 0, 0, 1).
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector4D.UnitX">
      <summary>
            Returns the x unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" /> (1, 0, 0, 0).
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector4D.UnitY">
      <summary>
            Returns the y unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" /> (0, 1, 0, 0).
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector4D.UnitZ">
      <summary>
            Returns the z unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" /> (0, 0, 1, 0).
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector4D.W">
      <summary>
            The w component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector4D.X">
      <summary>
            The x component.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.XYZ">
      <summary>
            Gets the components x, y and z as a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" />.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector4D.Y">
      <summary>
            The y component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector4D.Z">
      <summary>
            The z component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector4D.Zero">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" /> with all of its components set to zero.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.Vector4F">
      <summary>
            Defines a 4-dimensional vector (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> class.
            </summary>
      <param name="vector">The vector (x, y, z).</param>
      <param name="w">The w component.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.#ctor(System.Collections.Generic.IList{System.Single})">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </summary>
      <param name="components">
            List with the initial values for the components x, y, z and w.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="components" /> has less than 4 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="components" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.#ctor(System.Single)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </summary>
      <param name="componentValue">The initial value for 4 the vector components.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the z component.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.#ctor(System.Single[])">
      <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </summary>
      <param name="components">
            Array with the initial values for the components x, y, z and w.
            </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="components" /> has less than 4 elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="components" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Absolute">
      <summary>
            Sets each vector component to its absolute value.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Absolute(DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Returns a vector with the absolute values of the elements of the given vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>A vector with the absolute values of the elements of the given vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Add(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Adds two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Determines whether two vectors are equal (regarding the 
            tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />).
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F,System.Single)">
      <summary>
            Determines whether two vectors are equal (regarding a specific 
            tolerance).
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if the vectors are equal (within the tolerance 
            <paramref name="epsilon" />); otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Clamp(DigitalRune.Mathematics.Algebra.Vector4F,System.Single,System.Single)">
      <summary>
            Returns a vector with the vector components clamped to the range [min, max].
            </summary>
      <param name="vector">The vector.</param>
      <param name="min">The min limit.</param>
      <param name="max">The max limit.</param>
      <returns>A vector with clamped components.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Clamp(System.Single,System.Single)">
      <summary>
            Clamps the vector components to the range [min, max].
            </summary>
      <param name="min">The min limit.</param>
      <param name="max">The max limit.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ClampToZero">
      <summary>
            Clamps near-zero vector components to zero.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ClampToZero(DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
      <param name="vector">The vector.</param>
      <returns>
            The vector with small components clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ClampToZero(DigitalRune.Mathematics.Algebra.Vector4F,System.Single)">
      <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
      <param name="vector">The vector.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
            The vector with small components clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ClampToZero(System.Single)">
      <summary>
            Clamps near-zero vector components to zero.
            </summary>
      <param name="epsilon">The tolerance value.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Divide(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Divides the components of a vector by the components of another 
            vector.
            </summary>
      <param name="dividend">The first vector (dividend).</param>
      <param name="divisor">The second vector (divisor).</param>
      <returns>The component-wise division of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Divide(DigitalRune.Mathematics.Algebra.Vector4F,System.Single)">
      <summary>
            Divides a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component divided by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Dot(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Returns the dot product of two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The dot product.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Equals(DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same 
            type and represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.FromXna(Microsoft.Xna.Framework.Vector4)">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector4" /> 
            (XNA Framework).
            </summary>
      <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector4" /> (XNA Framework).</param>
      <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> (DigitalRune Mathematics).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.HomogeneousDivide(DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Performs the homogeneous divide or perspective divide: X, Y and Z are divided by W.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The vector (X/W, Y/W, Z/W).</returns>
      <exception cref="T:System.DivideByZeroException">Component W is 0.</exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.IndexOfLargestComponent">
      <summary>
            Gets the index (zero-based) of the largest component.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.IndexOfSmallestComponent">
      <summary>
            Gets the index (zero-based) of the smallest component.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.IsNaN">
      <summary>
            Gets a value indicating whether a component of the vector is <see cref="F:System.Single.NaN" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.IsNumericallyNormalized">
      <summary>
            Returns a value indicating whether this vector is normalized (the length is numerically
            equal to 1).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.IsNumericallyZero">
      <summary>
            Returns a value indicating whether this vector has zero size (the length is numerically
            equal to 0).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.Item(System.Int32)">
      <summary>
            Gets or sets the component at the specified index.
            </summary>
      <param name="index">The index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.LargestComponent">
      <summary>
            Gets the value of the largest component.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.Length">
      <summary>
            Gets or sets the length of this vector.
            </summary>
      <returns>The length of the this vector.</returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The vector has a length of 0. The length cannot be changed.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.LengthSquared">
      <summary>
            Returns the squared length of this vector.
            </summary>
      <returns>The squared length of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Max(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The maximized vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Min(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Returns a vector that contains the lowest value from each matching pair of components.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The minimized vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Multiply(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Multiplies the components of two vectors by each other.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The component-wise product of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Multiply(System.Single,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Negate(DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Negates a vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The negated vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Normalize">
      <summary>
            Normalizes the vector.
            </summary>
      <exception cref="T:System.DivideByZeroException">
            The length of this vector is zero. The vector cannot be normalized.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.Normalized">
      <summary>
            Returns the normalized vector.
            </summary>
      <exception cref="T:System.DivideByZeroException">
            The length of the vector is zero. The quaternion cannot be normalized.
            </exception>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector4F.One">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> with all of its components set to one.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Addition(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Adds two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Division(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Divides the components of a vector by the components of another 
            vector.
            </summary>
      <param name="dividend">The first vector (dividend).</param>
      <param name="divisor">The second vector (divisor).</param>
      <returns>The component-wise product of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Division(DigitalRune.Mathematics.Algebra.Vector4F,System.Single)">
      <summary>
            Divides a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component divided by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Equality(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Tests if two vectors are equal.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are equal; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Explicit(DigitalRune.Mathematics.Algebra.Vector4F)~System.Single[]">
      <summary>
            Converts a vector to an array of 4 float values.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The array with 4 values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Explicit(DigitalRune.Mathematics.Algebra.Vector4F)~System.Collections.Generic.List{System.Single}">
      <summary>
            Converts a vector to a list of 4 float values.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The list with 4 values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Explicit(DigitalRune.Mathematics.Algebra.Vector4F)~Microsoft.Xna.Framework.Vector4">
      <summary>
            Performs an conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> 
            (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector4" /> (XNA Framework).
            </summary>
      <param name="vector">The <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> (DigitalRune Mathematics).</param>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Vector4" /> (XNA Framework).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Explicit(Microsoft.Xna.Framework.Vector4)~DigitalRune.Mathematics.Algebra.Vector4F">
      <summary>
            Performs an conversion from <see cref="T:Microsoft.Xna.Framework.Vector4" /> (XNA Framework) to 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> (DigitalRune Mathematics).
            </summary>
      <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector4" /> (XNA Framework).</param>
      <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> (DigitalRune Mathematics).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_GreaterThan(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Tests if each component of a vector is greater than the corresponding 
            component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is greater than its 
            counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_GreaterThanOrEqual(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Tests if each component of a vector is greater or equal than the 
            corresponding component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is greater or equal than
            its counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Implicit(DigitalRune.Mathematics.Algebra.Vector4F)~DigitalRune.Mathematics.Algebra.VectorF">
      <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" />.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Implicit(DigitalRune.Mathematics.Algebra.Vector4F)~DigitalRune.Mathematics.Algebra.Vector4D">
      <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> 
            to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" />.
            </summary>
      <param name="vector">The DigitalRune <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Inequality(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Tests if two vectors are not equal.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are different; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_LessThan(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Tests if each component of a vector is less than the corresponding 
            component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is less than its 
            counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_LessThanOrEqual(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Tests if each component of a vector is less or equal than the 
            corresponding component of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each component of <paramref name="vector1" /> is less or equal than
            its counterpart in <paramref name="vector2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Multiply(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Multiplies the components of two vectors by each other.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The component-wise product of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Multiply(DigitalRune.Mathematics.Algebra.Vector4F,System.Single)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>The vector with each component multiplied by scalar.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Multiply(System.Single,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each component multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Subtraction(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Subtracts a vector from a vector.
            </summary>
      <param name="minuend">The first vector (minuend).</param>
      <param name="subtrahend">The second vector (subtrahend).</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Negates a vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The negated vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Parse(System.String)">
      <summary>
            Converts the string representation of a 4-dimensional vector to its 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> equivalent.
            </summary>
      <param name="s">A string representation of a 4-dimensional vector.</param>
      <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> that represents the vector specified by the 
            <paramref name="s" /> parameter.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a 4-dimensional vector in a specified 
            culture-specific format to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> equivalent.
            </summary>
      <param name="s">A string representation of a 4-dimensional vector.</param>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting 
            information about <paramref name="s" />. 
            </param>
      <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> that represents the vector specified by the 
            <paramref name="s" /> parameter.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ProjectTo(DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Sets this vector to its projection onto the axis given by the target vector.
            </summary>
      <param name="target">The target vector.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ProjectTo(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Projects a vector onto an axis given by the target vector.
            </summary>
      <param name="vector">The vector.</param>
      <param name="target">The target vector.</param>
      <returns>
            The projection of <paramref name="vector" /> onto <paramref name="target" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.SmallestComponent">
      <summary>
            Gets the value of the largest component.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Subtract(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Subtracts a vector from a vector.
            </summary>
      <param name="minuend">The first vector (minuend).</param>
      <param name="subtrahend">The second vector (subtrahend).</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ToArray">
      <summary>
            Converts this vector to an array of 4 float values.
            </summary>
      <returns>The array with 4 values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ToList">
      <summary>
            Converts this vector to a list of 4 float values.
            </summary>
      <returns>The list with 4 values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ToString">
      <summary>
            Returns the string representation of this vector.
            </summary>
      <returns>The string representation of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of this vector using the specified 
            culture-specific format information.
            </summary>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific 
            formatting information
            </param>
      <returns>The string representation of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ToVector4D">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ToVectorF">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" />.
            </summary>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ToXna">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector4" /> 
            (XNA Framework).
            </summary>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Vector4" /> (XNA Framework).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.TryNormalize">
      <summary>
            Tries to normalize the vector.
            </summary>
      <returns>
        <see langword="true" /> if the vector was normalized; otherwise, <see langword="false" /> if 
            the vector could not be normalized. (The length is numerically zero.)
            </returns>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector4F.UnitW">
      <summary>
            Returns the w unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> (0, 0, 0, 1).
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector4F.UnitX">
      <summary>
            Returns the x unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> (1, 0, 0, 0).
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector4F.UnitY">
      <summary>
            Returns the y unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> (0, 1, 0, 0).
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector4F.UnitZ">
      <summary>
            Returns the z unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> (0, 0, 1, 0).
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector4F.W">
      <summary>
            The w component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector4F.X">
      <summary>
            The x component.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.XYZ">
      <summary>
            Gets the components x, y and z as a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector4F.Y">
      <summary>
            The y component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector4F.Z">
      <summary>
            The z component.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Algebra.Vector4F.Zero">
      <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> with all of its components set to zero.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.VectorD">
      <summary>
            Defines an n-dimensional vector (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" /> class with 4 vector elements.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.#ctor(System.Collections.Generic.IList{System.Double})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" /> class.
            </summary>
      <param name="elements">The list with the initial values for the vector elements.</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.#ctor(System.Double[])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" /> class.
            </summary>
      <param name="elements">The array with the initial values for the vector elements.</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" /> class.
            </summary>
      <param name="numberOfElements">The number of elements.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="numberOfElements" /> must be greater than 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.#ctor(System.Int32,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" /> class.
            </summary>
      <param name="numberOfElements">The number of elements.</param>
      <param name="value">The initial value for the vector elements.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            Couldn't deserialize <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Absolute">
      <summary>
            Sets each vector element to its absolute value.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Absolute(DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Returns a vector with the absolute values of the elements of the given vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>A vector with the absolute values of the elements of the given vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Add(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Adds two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Determines whether two vectors are equal (regarding the 
            tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />).
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD" />); otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector1" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector2" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD,System.Double)">
      <summary>
            Determines whether two vectors are equal (regarding a specific 
            tolerance).
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if the vectors are equal (within the tolerance 
            <paramref name="epsilon" />); otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector1" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector2" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Clamp(DigitalRune.Mathematics.Algebra.VectorD,System.Double,System.Double)">
      <summary>
            Returns a vector with the vector elements clamped to the range [min, max].
            </summary>
      <param name="vector">The vector.</param>
      <param name="min">The min limit.</param>
      <param name="max">The max limit.</param>
      <returns>A vector with clamped elements.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Clamp(System.Double,System.Double)">
      <summary>
            Clamps the vector elements to the range [min, max].
            </summary>
      <param name="min">The min limit.</param>
      <param name="max">The max limit.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ClampToZero">
      <summary>
            Clamps near-zero vector elements to zero.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ClampToZero(DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Returns a vector with near-zero vector elements clamped to 0.
            </summary>
      <param name="vector">The vector.</param>
      <returns>
            The vector with small elements clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ClampToZero(DigitalRune.Mathematics.Algebra.VectorD,System.Double)">
      <summary>
            Returns a vector with near-zero vector elements clamped to 0.
            </summary>
      <param name="vector">The vector.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
            The vector with small elements clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ClampToZero(System.Double)">
      <summary>
            Clamps near-zero vector elements to zero.
            </summary>
      <param name="epsilon">The tolerance value.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Clone">
      <summary>
            Clones this instance.
            </summary>
      <returns>A copy of this instance.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Divide(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Divides the elements of a vector by the elements of another 
            vector.
            </summary>
      <param name="dividend">The first vector (dividend).</param>
      <param name="divisor">The second vector (divisor).</param>
      <returns>The element-wise division of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Divide(DigitalRune.Mathematics.Algebra.VectorD,System.Double)">
      <summary>
            Divides a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each element divided by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Dot(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Returns the dot product of two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The dot product.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector1" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Equals(DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same 
            type and represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target 
            object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.
            </param>
      <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.GetSchema">
      <summary>
            This property is reserved, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class 
            instead.
            </summary>
      <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is 
            produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and 
            consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.GetSubvector(System.Int32,System.Int32)">
      <summary>
            Gets a subvector of this vector.
            </summary>
      <param name="startIndex">The index of the first element of the subvector.</param>
      <param name="subvectorLength">The length of the subvector.</param>
      <returns>The subvector.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="startIndex" /> is negative or equal to or greater than the 
            <see cref="P:DigitalRune.Mathematics.Algebra.VectorD.NumberOfElements" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="subvectorLength" /> is less than 1.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="startIndex" /> + <paramref name="subvectorLength" /> exceeds the 
            <see cref="P:DigitalRune.Mathematics.Algebra.VectorD.NumberOfElements" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorD.IndexOfLargestElement">
      <summary>
            Gets the index (zero-based) of the largest element.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorD.IndexOfSmallestElement">
      <summary>
            Gets the index (zero-based) of the smallest element.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorD.InternalArray">
      <summary>
            Gets or sets the internal array that is used to store the vector values.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorD.IsNaN">
      <summary>
            Gets a value indicating whether a component of the vector is <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorD.IsNumericallyNormalized">
      <summary>
            Returns a value indicating whether this vector is normalized (the length is numerically
            equal to 1).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorD.IsNumericallyZero">
      <summary>
            Returns a value indicating whether this vector has zero size (the length is numerically
            equal to 0).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorD.Item(System.Int32)">
      <summary>
            Gets or sets the component at the specified index.
            </summary>
      <param name="index">The index.</param>
      <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorD.LargestElement">
      <summary>
            Gets the value of the largest element.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorD.Length">
      <summary>
            Gets or sets the length of this vector.
            </summary>
      <returns>The length of the this vector.</returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The vector has a length of 0. The length cannot be changed.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorD.LengthSquared">
      <summary>
            Returns the squared length of this vector.
            </summary>
      <returns>The squared length of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Max(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The maximized vector.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector1" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Min(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Returns a vector that contains the lowest value from each matching pair of elements.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The minimized vector.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector1" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Multiply(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Multiplies the components of two vectors by each other.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The element-wise product of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Multiply(System.Double,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each element multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Negate(DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Negates a vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The negated vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Normalize">
      <summary>
            Normalizes the vector.
            </summary>
      <exception cref="T:System.DivideByZeroException">
            The length of this vector is zero. The vector cannot be normalized.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorD.Normalized">
      <summary>
            Returns the normalized vector.
            </summary>
      <exception cref="T:System.DivideByZeroException">
            The length of the vector is zero. The quaternion cannot be normalized.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorD.NumberOfElements">
      <summary>
            Gets the number of elements <i>n</i>.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Addition(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Adds two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The sum of the two vectors.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector1" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Division(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Divides the elements of a vector by the elements of another 
            vector.
            </summary>
      <param name="dividend">The first vector (dividend).</param>
      <param name="divisor">The second vector (divisor).</param>
      <returns>The element-wise product of the two vectors.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dividend" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="divisor" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Division(DigitalRune.Mathematics.Algebra.VectorD,System.Double)">
      <summary>
            Divides a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each element divided by <paramref name="scalar" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Equality(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Tests if two vectors are equal.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are equal; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Explicit(DigitalRune.Mathematics.Algebra.VectorD)~DigitalRune.Mathematics.Algebra.Vector3D">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" />.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.InvalidCastException">This vector has more than 3 elements.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Explicit(DigitalRune.Mathematics.Algebra.VectorD)~System.Double[]">
      <summary>
            Converts a vector to an array of double values.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The array.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Explicit(DigitalRune.Mathematics.Algebra.VectorD)~DigitalRune.Mathematics.Algebra.Vector4D">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" />.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.InvalidCastException">
            This vector has more than 4 elements.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Explicit(DigitalRune.Mathematics.Algebra.VectorD)~DigitalRune.Mathematics.Algebra.VectorF">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" /> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" />.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Explicit(DigitalRune.Mathematics.Algebra.VectorD)~DigitalRune.Mathematics.Algebra.MatrixD">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" /> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" />.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Explicit(DigitalRune.Mathematics.Algebra.VectorD)~DigitalRune.Mathematics.Algebra.Vector2D">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" />.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.InvalidCastException">This vector has more than 3 elements.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Explicit(DigitalRune.Mathematics.Algebra.VectorD)~System.Collections.Generic.List{System.Double}">
      <summary>
            Converts a vector to a list of double values.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The list with of double values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_GreaterThan(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Tests if each element of a vector is greater than the corresponding 
            element of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each element of <paramref name="vector1" /> is greater than its 
            counterpart in <paramref name="vector2" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector1" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_GreaterThanOrEqual(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Tests if each element of a vector is greater or equal than the 
            corresponding element of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each element of <paramref name="vector1" /> is greater or equal than
            its counterpart in <paramref name="vector2" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector1" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Inequality(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Tests if two vectors are not equal.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are different; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_LessThan(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Tests if each element of a vector is less than the corresponding 
            element of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each element of <paramref name="vector1" /> is less than its 
            counterpart in <paramref name="vector2" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector1" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_LessThanOrEqual(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Tests if each element of a vector is less or equal than the 
            corresponding element of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each element of <paramref name="vector1" /> is less or equal than
            its counterpart in <paramref name="vector2" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector1" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Multiply(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Multiplies the components of two vectors by each other.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The element-wise product of the two vectors.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector1" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Multiply(DigitalRune.Mathematics.Algebra.VectorD,System.Double)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>The vector with each element multiplied by scalar.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Multiply(System.Double,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each element multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Subtraction(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Subtracts a vector from a vector.
            </summary>
      <param name="minuend">The first vector (minuend).</param>
      <param name="subtrahend">The second vector (subtrahend).</param>
      <returns>The difference of the two vectors.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="minuend" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subtrahend" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_UnaryNegation(DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Negates a vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The negated vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ProjectTo(DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Sets this vector to its projection onto the axis given by the target vector.
            </summary>
      <param name="target">The target vector.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ProjectTo(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Projects a vector onto an axis given by the target vector.
            </summary>
      <param name="vector">The vector.</param>
      <param name="target">The target vector.</param>
      <returns>
            The projection of <paramref name="vector" /> onto <paramref name="target" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ReadXml(System.Xml.XmlReader)">
      <summary>
            Generates an object from its XML representation.
            </summary>
      <param name="reader">
            The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized.
            </param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Set(DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Sets this instance to a copy of the specified vector.
            </summary>
      <param name="vector">The vector.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="vector" /> must have at least <see cref="P:DigitalRune.Mathematics.Algebra.VectorD.NumberOfElements" /> elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="vector" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Set(System.Collections.Generic.IList{System.Double})">
      <summary>
            Sets the vector elements to the values of the list.
            </summary>
      <param name="elements">The elements list.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="elements" /> must have at least <see cref="P:DigitalRune.Mathematics.Algebra.VectorD.NumberOfElements" /> elements.
            </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Set(System.Double)">
      <summary>
            Sets all vector elements to the specified value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Set(System.Double[])">
      <summary>
            Sets the vector elements to the values of the array.
            </summary>
      <param name="elements">The elements array.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> must have at least <see cref="P:DigitalRune.Mathematics.Algebra.VectorD.NumberOfElements" /> elements.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.SetSubvector(System.Int32,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Sets a subvector of this instance.
            </summary>
      <param name="startIndex">The start index.</param>
      <param name="subvector">The subvector.</param>
      <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="startIndex" /> or the number of elements of the subvector is to high, so 
            that the subvector does not fit into this vector.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subvector" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorD.SmallestElement">
      <summary>
            Gets the value of the smallest element.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Subtract(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
      <summary>
            Subtracts a vector from a vector.
            </summary>
      <param name="minuend">The first vector (minuend).</param>
      <param name="subtrahend">The second vector (subtrahend).</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.System#ICloneable#Clone">
      <summary>
            Creates a copy of this instance.
            </summary>
      <returns>Copy of this instance.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ToArray">
      <summary>
            Converts this vector to an array of double values.
            </summary>
      <returns>The array.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ToList">
      <summary>
            Converts this vector to a list of double values.
            </summary>
      <returns>The list of double values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ToMatrixD">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" /> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" />.
            </summary>
      <returns>The result of the conversion</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ToString">
      <summary>
            Returns the string representation of this vector.
            </summary>
      <returns>The string representation of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of this vector using the specified 
            culture-specific format information.
            </summary>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific 
            formatting information
            </param>
      <returns>The string representation of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ToVector2D">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" />.
            </summary>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.InvalidCastException">This vector has more than 2 elements.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ToVector3D">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" />.
            </summary>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.InvalidCastException">This vector has more than 3 elements.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ToVector4D">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" />.
            </summary>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.InvalidCastException">This vector has more than 4 elements.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ToVectorF">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" /> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" />.
            </summary>
      <returns>The result of the conversion</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.TryNormalize">
      <summary>
            Tries to normalize the vector.
            </summary>
      <returns>
        <see langword="true" /> if the vector was normalized; otherwise, <see langword="false" /> if 
            the vector could not be normalized. (The length is numerically zero.)
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorD.WriteXml(System.Xml.XmlWriter)">
      <summary>
            Converts an object into its XML representation.
            </summary>
      <param name="writer">
            The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.
            </param>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.VectorF">
      <summary>
            Defines an n-dimensional vector (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" /> class with 4 vector elements.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.#ctor(System.Collections.Generic.IList{System.Single})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" /> class.
            </summary>
      <param name="elements">The list with the initial values for the vector elements.</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" /> class.
            </summary>
      <param name="numberOfElements">The number of elements.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="numberOfElements" /> must be greater than 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.#ctor(System.Int32,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" /> class.
            </summary>
      <param name="numberOfElements">The number of elements.</param>
      <param name="value">The initial value for the vector elements.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            Couldn't deserialize <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.#ctor(System.Single[])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" /> class.
            </summary>
      <param name="elements">The array with the initial values for the vector elements.</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Absolute">
      <summary>
            Sets each vector element to its absolute value.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Absolute(DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Returns a vector with the absolute values of the elements of the given vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>A vector with the absolute values of the elements of the given vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Add(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Adds two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Determines whether two vectors are equal (regarding the 
            tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />).
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF" />); otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector1" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector2" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF,System.Single)">
      <summary>
            Determines whether two vectors are equal (regarding a specific 
            tolerance).
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
        <see langword="true" /> if the vectors are equal (within the tolerance 
            <paramref name="epsilon" />); otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector1" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector2" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Clamp(DigitalRune.Mathematics.Algebra.VectorF,System.Single,System.Single)">
      <summary>
            Returns a vector with the vector elements clamped to the range [min, max].
            </summary>
      <param name="vector">The vector.</param>
      <param name="min">The min limit.</param>
      <param name="max">The max limit.</param>
      <returns>A vector with clamped elements.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Clamp(System.Single,System.Single)">
      <summary>
            Clamps the vector elements to the range [min, max].
            </summary>
      <param name="min">The min limit.</param>
      <param name="max">The max limit.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ClampToZero">
      <summary>
            Clamps near-zero vector elements to zero.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ClampToZero(DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Returns a vector with near-zero vector elements clamped to 0.
            </summary>
      <param name="vector">The vector.</param>
      <returns>
            The vector with small elements clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ClampToZero(DigitalRune.Mathematics.Algebra.VectorF,System.Single)">
      <summary>
            Returns a vector with near-zero vector elements clamped to 0.
            </summary>
      <param name="vector">The vector.</param>
      <param name="epsilon">The tolerance value.</param>
      <returns>
            The vector with small elements clamped to zero.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ClampToZero(System.Single)">
      <summary>
            Clamps near-zero vector elements to zero.
            </summary>
      <param name="epsilon">The tolerance value.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Clone">
      <summary>
            Clones this instance.
            </summary>
      <returns>A copy of this instance.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Divide(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Divides the elements of a vector by the elements of another 
            vector.
            </summary>
      <param name="dividend">The first vector (dividend).</param>
      <param name="divisor">The second vector (divisor).</param>
      <returns>The element-wise division of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Divide(DigitalRune.Mathematics.Algebra.VectorF,System.Single)">
      <summary>
            Divides a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each element divided by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Dot(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Returns the dot product of two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The dot product.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector1" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Equals(DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same 
            type and represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target 
            object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.
            </param>
      <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.GetSchema">
      <summary>
            This property is reserved, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class 
            instead.
            </summary>
      <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is 
            produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and 
            consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.GetSubvector(System.Int32,System.Int32)">
      <summary>
            Gets a subvector of this vector.
            </summary>
      <param name="startIndex">The index of the first element of the subvector.</param>
      <param name="subvectorLength">The length of the subvector.</param>
      <returns>The subvector.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="startIndex" /> is negative or equal to or greater than the 
            <see cref="P:DigitalRune.Mathematics.Algebra.VectorF.NumberOfElements" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="subvectorLength" /> is less than 1.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="startIndex" /> + <paramref name="subvectorLength" /> exceeds the 
            <see cref="P:DigitalRune.Mathematics.Algebra.VectorF.NumberOfElements" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorF.IndexOfLargestElement">
      <summary>
            Gets the index (zero-based) of the largest element.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorF.IndexOfSmallestElement">
      <summary>
            Gets the index (zero-based) of the smallest element.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorF.InternalArray">
      <summary>
            Gets or sets the internal array that is used to store the vector values.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorF.IsNaN">
      <summary>
            Gets a value indicating whether a component of the vector is <see cref="F:System.Single.NaN" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorF.IsNumericallyNormalized">
      <summary>
            Returns a value indicating whether this vector is normalized (the length is numerically
            equal to 1).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorF.IsNumericallyZero">
      <summary>
            Returns a value indicating whether this vector has zero size (the length is numerically
            equal to 0).
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorF.Item(System.Int32)">
      <summary>
            Gets or sets the component at the specified index.
            </summary>
      <param name="index">The index.</param>
      <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorF.LargestElement">
      <summary>
            Gets the value of the largest element.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorF.Length">
      <summary>
            Gets or sets the length of this vector.
            </summary>
      <returns>The length of the this vector.</returns>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The vector has a length of 0. The length cannot be changed.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorF.LengthSquared">
      <summary>
            Returns the squared length of this vector.
            </summary>
      <returns>The squared length of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Max(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The maximized vector.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector1" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Min(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Returns a vector that contains the lowest value from each matching pair of elements.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The minimized vector.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector1" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Multiply(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Multiplies the components of two vectors by each other.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The element-wise product of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Multiply(System.Single,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each element multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Negate(DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Negates a vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The negated vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Normalize">
      <summary>
            Normalizes the vector.
            </summary>
      <exception cref="T:System.DivideByZeroException">
            The length of this vector is zero. The vector cannot be normalized.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorF.Normalized">
      <summary>
            Returns the normalized vector.
            </summary>
      <exception cref="T:System.DivideByZeroException">
            The length of the vector is zero. The quaternion cannot be normalized.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorF.NumberOfElements">
      <summary>
            Gets the number of elements <i>n</i>.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Addition(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Adds two vectors.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The sum of the two vectors.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector1" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Division(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Divides the elements of a vector by the elements of another 
            vector.
            </summary>
      <param name="dividend">The first vector (dividend).</param>
      <param name="divisor">The second vector (divisor).</param>
      <returns>The element-wise product of the two vectors.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dividend" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="divisor" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Division(DigitalRune.Mathematics.Algebra.VectorF,System.Single)">
      <summary>
            Divides a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each element divided by <paramref name="scalar" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Equality(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Tests if two vectors are equal.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are equal; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Explicit(DigitalRune.Mathematics.Algebra.VectorF)~DigitalRune.Mathematics.Algebra.Vector3F">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.InvalidCastException">This vector has more than 3 elements.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Explicit(DigitalRune.Mathematics.Algebra.VectorF)~System.Single[]">
      <summary>
            Converts a vector to an array of float values.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The array.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Explicit(DigitalRune.Mathematics.Algebra.VectorF)~DigitalRune.Mathematics.Algebra.Vector4F">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.InvalidCastException">This vector has more than 4 elements.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Explicit(DigitalRune.Mathematics.Algebra.VectorF)~DigitalRune.Mathematics.Algebra.MatrixF">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" /> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" />.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Explicit(DigitalRune.Mathematics.Algebra.VectorF)~DigitalRune.Mathematics.Algebra.Vector2F">
      <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.InvalidCastException">This vector has more than 3 elements.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Explicit(DigitalRune.Mathematics.Algebra.VectorF)~System.Collections.Generic.List{System.Single}">
      <summary>
            Converts a vector to a list of float values.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The list with of float values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_GreaterThan(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Tests if each element of a vector is greater than the corresponding 
            element of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each element of <paramref name="vector1" /> is greater than its 
            counterpart in <paramref name="vector2" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector1" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_GreaterThanOrEqual(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Tests if each element of a vector is greater or equal than the 
            corresponding element of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each element of <paramref name="vector1" /> is greater or equal than
            its counterpart in <paramref name="vector2" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector1" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Implicit(DigitalRune.Mathematics.Algebra.VectorF)~DigitalRune.Mathematics.Algebra.VectorD">
      <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" /> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" />.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Inequality(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Tests if two vectors are not equal.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
        <see langword="true" /> if the vectors are different; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_LessThan(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Tests if each element of a vector is less than the corresponding 
            element of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each element of <paramref name="vector1" /> is less than its 
            counterpart in <paramref name="vector2" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector1" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_LessThanOrEqual(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Tests if each element of a vector is less or equal than the 
            corresponding element of another vector.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>
            True if each element of <paramref name="vector1" /> is less or equal than
            its counterpart in <paramref name="vector2" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector1" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Multiply(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Multiplies the components of two vectors by each other.
            </summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The element-wise product of the two vectors.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector1" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector2" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Multiply(DigitalRune.Mathematics.Algebra.VectorF,System.Single)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>The vector with each element multiplied by scalar.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Multiply(System.Single,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Multiplies a vector by a scalar.
            </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>
            The vector with each element multiplied by <paramref name="scalar" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Subtraction(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Subtracts a vector from a vector.
            </summary>
      <param name="minuend">The first vector (minuend).</param>
      <param name="subtrahend">The second vector (subtrahend).</param>
      <returns>The difference of the two vectors.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="minuend" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subtrahend" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_UnaryNegation(DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Negates a vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The negated vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ProjectTo(DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Sets this vector to its projection onto the axis given by the target vector.
            </summary>
      <param name="target">The target vector.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ProjectTo(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Projects a vector onto an axis given by the target vector.
            </summary>
      <param name="vector">The vector.</param>
      <param name="target">The target vector.</param>
      <returns>
            The projection of <paramref name="vector" /> onto <paramref name="target" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ReadXml(System.Xml.XmlReader)">
      <summary>
            Generates an object from its XML representation.
            </summary>
      <param name="reader">
            The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized.
            </param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Set(DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Sets this instance to a copy of the specified vector.
            </summary>
      <param name="vector">The vector.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="vector" /> must have at least 
            <see cref="P:DigitalRune.Mathematics.Algebra.VectorF.NumberOfElements" /> elements.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="vector" /> must not be <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Set(System.Collections.Generic.IList{System.Single})">
      <summary>
            Sets the vector elements to the values of the list.
            </summary>
      <param name="elements">The elements list.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="elements" /> must have at least 
            <see cref="P:DigitalRune.Mathematics.Algebra.VectorF.NumberOfElements" /> elements.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="elements" /> must not be <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Set(System.Single)">
      <summary>
            Sets all vector elements to the specified value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Set(System.Single[])">
      <summary>
            Sets the vector elements to the values of the array.
            </summary>
      <param name="elements">The elements array.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="elements" /> must have at least 
            <see cref="P:DigitalRune.Mathematics.Algebra.VectorF.NumberOfElements" /> elements.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.SetSubvector(System.Int32,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Sets a subvector of this instance.
            </summary>
      <param name="startIndex">The start index.</param>
      <param name="subvector">The subvector.</param>
      <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="startIndex" /> or the number of elements of the subvector is to high, so 
            that the subvector does not fit into this vector.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subvector" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Algebra.VectorF.SmallestElement">
      <summary>
            Gets the value of the smallest element.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Subtract(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Subtracts a vector from a vector.
            </summary>
      <param name="minuend">The first vector (minuend).</param>
      <param name="subtrahend">The second vector (subtrahend).</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.System#ICloneable#Clone">
      <summary>
            Creates a copy of this instance.
            </summary>
      <returns>Copy of this instance.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ToArray">
      <summary>
            Converts this vector to an array of float values.
            </summary>
      <returns>The array.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ToList">
      <summary>
            Converts this vector to a list of float values.
            </summary>
      <returns>The list of float values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ToMatrixF">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" /> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" />.
            </summary>
      <returns>The result of the conversion</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ToString">
      <summary>
            Returns the string representation of this vector.
            </summary>
      <returns>The string representation of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of this vector using the specified 
            culture-specific format information.
            </summary>
      <param name="provider">
            An <see cref="T:System.IFormatProvider" /> that supplies culture-specific 
            formatting information
            </param>
      <returns>The string representation of this vector.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ToVector2F">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />.
            </summary>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.InvalidCastException">This vector has more than 2 elements.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ToVector3F">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </summary>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.InvalidCastException">This vector has more than 3 elements.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ToVector4F">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" /> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </summary>
      <returns>The result of the conversion.</returns>
      <exception cref="T:System.InvalidCastException">This vector has more than 4 elements.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ToVectorD">
      <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" /> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" />.
            </summary>
      <returns>The result of the conversion</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.TryNormalize">
      <summary>
            Tries to normalize the vector.
            </summary>
      <returns>
        <see langword="true" /> if the vector was normalized; otherwise, <see langword="false" /> if 
            the vector could not be normalized. (The length is numerically zero.)
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.VectorF.WriteXml(System.Xml.XmlWriter)">
      <summary>
            Converts an object into its XML representation.
            </summary>
      <param name="writer">
            The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.
            </param>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.Design.QuaternionDConverter">
      <summary>
            Converts a <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" /> to and from string representation.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.QuaternionDConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Design.QuaternionDConverter" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.QuaternionDConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert an object of the given type 
            to the type of this converter, using the specified context.     
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="sourceType">
            A <see cref="T:System.Type" /> that represents the type you want to convert from. 
            </param>
      <returns>
        <see langword="true" /> if this converter can perform the conversion; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.QuaternionDConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert the object to the specified 
            type, using the specified context. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to convert to. 
            </param>
      <returns>
        <see langword="true" /> if this converter can perform the conversion; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.QuaternionDConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given object to the type of this converter, using the 
            specified context and culture information. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.
            </param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.QuaternionDConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the 
            specified context and culture information. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.
            </param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to convert to. 
            </param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.Design.QuaternionFConverter">
      <summary>
            Converts a <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" /> to and from string representation.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.QuaternionFConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Design.QuaternionFConverter" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.QuaternionFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert an object of the given type 
            to the type of this converter, using the specified context.     
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="sourceType">
            A <see cref="T:System.Type" /> that represents the type you want to convert from. 
            </param>
      <returns>
        <see langword="true" /> if this converter can perform the conversion; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.QuaternionFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert the object to the specified 
            type, using the specified context. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to convert to. 
            </param>
      <returns>
        <see langword="true" /> if this converter can perform the conversion; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.QuaternionFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given object to the type of this converter, using the 
            specified context and culture information. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.
            </param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.QuaternionFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the 
            specified context and culture information. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.
            </param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to convert to. 
            </param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.Design.Vector2DConverter">
      <summary>
            Converts a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" /> to and from string representation.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector2DConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Design.Vector2DConverter" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector2DConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert an object of the given type 
            to the type of this converter, using the specified context.     
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="sourceType">
            A <see cref="T:System.Type" /> that represents the type you want to convert from. 
            </param>
      <returns>
        <see langword="true" /> if this converter can perform the conversion; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector2DConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert the object to the specified 
            type, using the specified context. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to convert to. 
            </param>
      <returns>
        <see langword="true" /> if this converter can perform the conversion; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector2DConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given object to the type of this converter, using the 
            specified context and culture information. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.
            </param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector2DConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the 
            specified context and culture information. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.
            </param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to convert to. 
            </param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.Design.Vector2FConverter">
      <summary>
            Converts a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" /> to and from string representation.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector2FConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Design.Vector2FConverter" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector2FConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert an object of the given type 
            to the type of this converter, using the specified context.     
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="sourceType">
            A <see cref="T:System.Type" /> that represents the type you want to convert from. 
            </param>
      <returns>
        <see langword="true" /> if this converter can perform the conversion; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector2FConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert the object to the specified 
            type, using the specified context. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to convert to. 
            </param>
      <returns>
        <see langword="true" /> if this converter can perform the conversion; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector2FConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given object to the type of this converter, using the 
            specified context and culture information. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.
            </param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector2FConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the 
            specified context and culture information. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.
            </param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to convert to. 
            </param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.Design.Vector3DConverter">
      <summary>
            Converts a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" /> to and from string representation.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector3DConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Design.Vector3DConverter" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector3DConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert an object of the given type 
            to the type of this converter, using the specified context.     
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="sourceType">
            A <see cref="T:System.Type" /> that represents the type you want to convert from. 
            </param>
      <returns>
        <see langword="true" /> if this converter can perform the conversion; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector3DConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert the object to the specified 
            type, using the specified context. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to convert to. 
            </param>
      <returns>
        <see langword="true" /> if this converter can perform the conversion; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector3DConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given object to the type of this converter, using the 
            specified context and culture information. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.
            </param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector3DConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the 
            specified context and culture information. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.
            </param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to convert to. 
            </param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.Design.Vector3FConverter">
      <summary>
            Converts a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" /> to and from string representation.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector3FConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Design.Vector3FConverter" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector3FConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert an object of the given type 
            to the type of this converter, using the specified context.     
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="sourceType">
            A <see cref="T:System.Type" /> that represents the type you want to convert from. 
            </param>
      <returns>
        <see langword="true" /> if this converter can perform the conversion; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector3FConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert the object to the specified 
            type, using the specified context. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to convert to. 
            </param>
      <returns>
        <see langword="true" /> if this converter can perform the conversion; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector3FConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given object to the type of this converter, using the 
            specified context and culture information. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.
            </param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector3FConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the 
            specified context and culture information. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.
            </param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to convert to. 
            </param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.Design.Vector4DConverter">
      <summary>
            Converts a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" /> to and from string representation.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector4DConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Design.Vector4DConverter" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector4DConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert an object of the given type 
            to the type of this converter, using the specified context.     
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="sourceType">
            A <see cref="T:System.Type" /> that represents the type you want to convert from. 
            </param>
      <returns>
        <see langword="true" /> if this converter can perform the conversion; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector4DConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert the object to the specified 
            type, using the specified context. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to convert to. 
            </param>
      <returns>
        <see langword="true" /> if this converter can perform the conversion; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector4DConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given object to the type of this converter, using the 
            specified context and culture information. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.
            </param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector4DConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the 
            specified context and culture information. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.
            </param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to convert to. 
            </param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Algebra.Design.Vector4FConverter">
      <summary>
            Converts a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" /> to and from string representation.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector4FConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Design.Vector4FConverter" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector4FConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert an object of the given type 
            to the type of this converter, using the specified context.     
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="sourceType">
            A <see cref="T:System.Type" /> that represents the type you want to convert from. 
            </param>
      <returns>
        <see langword="true" /> if this converter can perform the conversion; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector4FConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert the object to the specified 
            type, using the specified context. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to convert to. 
            </param>
      <returns>
        <see langword="true" /> if this converter can perform the conversion; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector4FConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given object to the type of this converter, using the 
            specified context and culture information. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.
            </param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Algebra.Design.Vector4FConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the 
            specified context and culture information. 
            </summary>
      <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
            </param>
      <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.
            </param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to convert to. 
            </param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.BisectionMethodD">
      <summary>
            Finds roots using the bisection method (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.BisectionMethodD.#ctor(System.Func{System.Double,System.Double})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.BisectionMethodD" /> class.
            </summary>
      <param name="function">The function f(x), which root we want to find.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.BisectionMethodD.FindRoot(System.Func{System.Double,System.Double},System.Double,System.Double)">
      <summary>
            Finds the root of the given function.
            </summary>
      <param name="function">The function f.</param>
      <param name="x0">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <param name="x1">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <returns>
            The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.
            </returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.BisectionMethodF">
      <summary>
            Finds roots using the bisection method (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.BisectionMethodF.#ctor(System.Func{System.Single,System.Single})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.BisectionMethodF" /> class.
            </summary>
      <param name="function">The function f(x), which root we want to find.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.BisectionMethodF.FindRoot(System.Func{System.Single,System.Single},System.Single,System.Single)">
      <summary>
            Finds the root of the given function.
            </summary>
      <param name="function">The function f.</param>
      <param name="x0">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <param name="x1">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <returns>
            The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.
            </returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.ExplicitEulerIntegratorD">
      <summary>
            Performs numerical integration using <i>Explicit Euler</i> (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.ExplicitEulerIntegratorD.#ctor(System.Func{DigitalRune.Mathematics.Algebra.VectorD,System.Double,DigitalRune.Mathematics.Algebra.VectorD})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.ExplicitEulerIntegratorD" /> class.
            </summary>
      <param name="firstOrderDerivative">
            The function f(x, t) that computes the first order derivative of the vector x (see 
            <see cref="P:DigitalRune.Mathematics.Analysis.OdeIntegratorD.FirstOrderDerivative" />).
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="firstOrderDerivative" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.ExplicitEulerIntegratorD.Integrate(DigitalRune.Mathematics.Algebra.VectorD,System.Double,System.Double)">
      <summary>
            Computes the new state x1 at time t1.
            </summary>
      <param name="x0">The state x0 at time t0.</param>
      <param name="t0">The time t0.</param>
      <param name="t1">The target time t1 for which the new state x1 is computed.</param>
      <returns>The new state x1 at time t1.</returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.ExplicitEulerIntegratorF">
      <summary>
            Performs numerical integration using <i>Explicit Euler</i> (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.ExplicitEulerIntegratorF.#ctor(System.Func{DigitalRune.Mathematics.Algebra.VectorF,System.Single,DigitalRune.Mathematics.Algebra.VectorF})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.ExplicitEulerIntegratorF" /> class.
            </summary>
      <param name="firstOrderDerivative">
            The function f(x, t) that computes the first order derivative of the vector x (see 
            <see cref="P:DigitalRune.Mathematics.Analysis.OdeIntegratorF.FirstOrderDerivative" />).
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="firstOrderDerivative" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.ExplicitEulerIntegratorF.Integrate(DigitalRune.Mathematics.Algebra.VectorF,System.Single,System.Single)">
      <summary>
            Computes the new state x1 at time t1.
            </summary>
      <param name="x0">The state x0 at time t0.</param>
      <param name="t0">The time t0.</param>
      <param name="t1">The target time t1 for which the new state x1 is computed.</param>
      <returns>The new state x1 at time t1.</returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.ImprovedNewtonRaphsonMethodD">
      <summary>
            Finds roots using an improved Newton-Raphson method (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.ImprovedNewtonRaphsonMethodD.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.ImprovedNewtonRaphsonMethodD" /> class.
            </summary>
      <param name="function">The function f(x), which root we want to find.</param>
      <param name="derivative">The function f'(x), which computes the derivative.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="derivative" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.ImprovedNewtonRaphsonMethodD.FindRoot(System.Func{System.Double,System.Double},System.Double,System.Double)">
      <summary>
            Finds the root of the given function.
            </summary>
      <param name="function">The function f.</param>
      <param name="x0">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <param name="x1">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <returns>
            The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.
            </returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.ImprovedNewtonRaphsonMethodF">
      <summary>
            Finds roots using an improved Newton-Raphson method (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.ImprovedNewtonRaphsonMethodF.#ctor(System.Func{System.Single,System.Single},System.Func{System.Single,System.Single})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.ImprovedNewtonRaphsonMethodF" /> class.
            </summary>
      <param name="function">The function f(x), which root we want to find.</param>
      <param name="derivative">The function f'(x), which computes the derivative.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="derivative" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.ImprovedNewtonRaphsonMethodF.FindRoot(System.Func{System.Single,System.Single},System.Single,System.Single)">
      <summary>
            Finds the root of the given function.
            </summary>
      <param name="function">The function f.</param>
      <param name="x0">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <param name="x1">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <returns>
            The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.
            </returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.IntegratorD">
      <summary>
            A base class for numerical integration of a function over an interval (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.IntegratorD.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.IntegratorD" /> class</summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Analysis.IntegratorD.Epsilon">
      <summary>
            Gets or sets the tolerance value. 
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.IntegratorD.Integrate(System.Func{System.Double,System.Double},System.Double,System.Double)">
      <summary>
            Integrates the specified function within the given interval.
            </summary>
      <param name="function">The function.</param>
      <param name="lowerBound">The lower bound.</param>
      <param name="upperBound">The upper bound.</param>
      <returns>
            The integral of the given function over the interval 
            [<paramref name="lowerBound" />, <paramref name="upperBound" />].
            </returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Analysis.IntegratorD.MaxNumberOfIterations">
      <summary>
            Gets or sets the maximum number number of iterations.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Analysis.IntegratorD.MinNumberOfIterations">
      <summary>
            Gets or sets the minimum number number of iterations.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Analysis.IntegratorD.NumberOfIterations">
      <summary>
            Gets (or sets) the number of iterations of the last <see cref="M:DigitalRune.Mathematics.Analysis.IntegratorD.Integrate(System.Func{System.Double,System.Double},System.Double,System.Double)" /> method call.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.IntegratorF">
      <summary>
            A base class for numerical integration of a function over an interval (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.IntegratorF.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.IntegratorF" /> class</summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Analysis.IntegratorF.Epsilon">
      <summary>
            Gets or sets the tolerance value. 
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.IntegratorF.Integrate(System.Func{System.Single,System.Single},System.Single,System.Single)">
      <summary>
            Integrates the specified function within the given interval.
            </summary>
      <param name="function">The function.</param>
      <param name="lowerBound">The lower bound.</param>
      <param name="upperBound">The upper bound.</param>
      <returns>
            The integral of the given function over the interval 
            [<paramref name="lowerBound" />, <paramref name="upperBound" />].
            </returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Analysis.IntegratorF.MaxNumberOfIterations">
      <summary>
            Gets or sets the maximum number number of iterations.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Analysis.IntegratorF.MinNumberOfIterations">
      <summary>
            Gets or sets the minimum number number of iterations.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Analysis.IntegratorF.NumberOfIterations">
      <summary>
            Gets (or sets) the number of iterations of the last <see cref="M:DigitalRune.Mathematics.Analysis.IntegratorF.Integrate(System.Func{System.Single,System.Single},System.Single,System.Single)" /> method call.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.MidpointIntegratorD">
      <summary>
            Performs numerical integration using <i>Midpoint method</i> (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.MidpointIntegratorD.#ctor(System.Func{DigitalRune.Mathematics.Algebra.VectorD,System.Double,DigitalRune.Mathematics.Algebra.VectorD})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.MidpointIntegratorD" /> class.
            </summary>
      <param name="firstOrderDerivative">
            The function f(x, t) that computes the first order derivative of the vector x (see 
            <see cref="P:DigitalRune.Mathematics.Analysis.OdeIntegratorD.FirstOrderDerivative" />).
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="firstOrderDerivative" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.MidpointIntegratorD.Integrate(DigitalRune.Mathematics.Algebra.VectorD,System.Double,System.Double)">
      <summary>
            Computes the new state x1 at time t1.
            </summary>
      <param name="x0">The state x0 at time t0.</param>
      <param name="t0">The time t0.</param>
      <param name="t1">The target time t1 for which the new state x1 is computed.</param>
      <returns>The new state x1 at time t1.</returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.MidpointIntegratorF">
      <summary>
            Performs numerical integration using <i>Midpoint method</i> (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.MidpointIntegratorF.#ctor(System.Func{DigitalRune.Mathematics.Algebra.VectorF,System.Single,DigitalRune.Mathematics.Algebra.VectorF})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.MidpointIntegratorF" /> class.
            </summary>
      <param name="firstOrderDerivative">
            The function f(x, t) that computes the first order derivative of the vector x (see 
            <see cref="P:DigitalRune.Mathematics.Analysis.OdeIntegratorF.FirstOrderDerivative" />).
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="firstOrderDerivative" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.MidpointIntegratorF.Integrate(DigitalRune.Mathematics.Algebra.VectorF,System.Single,System.Single)">
      <summary>
            Computes the new state x1 at time t1.
            </summary>
      <param name="x0">The state x0 at time t0.</param>
      <param name="t0">The time t0.</param>
      <param name="t1">The target time t1 for which the new state x1 is computed.</param>
      <returns>The new state x1 at time t1.</returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.NewtonRaphsonMethodD">
      <summary>
            Finds roots using the Newton-Raphson method (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.NewtonRaphsonMethodD.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.NewtonRaphsonMethodD" /> class.
            </summary>
      <param name="function">The function f(x), which root we want to find.</param>
      <param name="derivative">The function f'(x), which computes the derivative.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="derivative" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Analysis.NewtonRaphsonMethodD.Derivative">
      <summary>
            Gets a function that computes the derivative <i>f'(x)</i>.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.NewtonRaphsonMethodD.FindRoot(System.Func{System.Double,System.Double},System.Double,System.Double)">
      <summary>
            Finds the root of the given function.
            </summary>
      <param name="function">The function f.</param>
      <param name="x0">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <param name="x1">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <returns>
            The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.
            </returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.NewtonRaphsonMethodF">
      <summary>
            Finds roots using the Newton-Raphson method (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.NewtonRaphsonMethodF.#ctor(System.Func{System.Single,System.Single},System.Func{System.Single,System.Single})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.NewtonRaphsonMethodF" /> class.
            </summary>
      <param name="function">The function f(x), which root we want to find.</param>
      <param name="derivative">The function f'(x), which computes the derivative.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="derivative" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Analysis.NewtonRaphsonMethodF.Derivative">
      <summary>
            Gets a function that computes the derivative <i>f'(x)</i>.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.NewtonRaphsonMethodF.FindRoot(System.Func{System.Single,System.Single},System.Single,System.Single)">
      <summary>
            Finds the root of the given function.
            </summary>
      <param name="function">The function f.</param>
      <param name="x0">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <param name="x1">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <returns>
            The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.
            </returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.OdeIntegratorD">
      <summary>
            A base class for numerical integration strategies for ordinary differential equations (ODE).
            (Double-precision)
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.OdeIntegratorD.#ctor(System.Func{DigitalRune.Mathematics.Algebra.VectorD,System.Double,DigitalRune.Mathematics.Algebra.VectorD})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.OdeIntegratorD" /> class.
            </summary>
      <param name="firstOrderDerivative">
            The function f(x, t) that computes the first order derivative of the vector x 
            (see <see cref="P:DigitalRune.Mathematics.Analysis.OdeIntegratorD.FirstOrderDerivative" />).
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="firstOrderDerivative" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Analysis.OdeIntegratorD.FirstOrderDerivative">
      <summary>
            Gets the function f(x, t) that computes the first order derivative.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.OdeIntegratorD.Integrate(DigitalRune.Mathematics.Algebra.VectorD,System.Double,System.Double)">
      <summary>
            Computes the new state x1 at time t1.
            </summary>
      <param name="x0">The state x0 at time t0.</param>
      <param name="t0">The time t0.</param>
      <param name="t1">The target time t1 for which the new state x1 is computed.</param>
      <returns>The new state x1 at time t1.</returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.OdeIntegratorF">
      <summary>
            A base class for numerical integration strategies for ordinary differential equations (ODE).
            (Single-precision)
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.OdeIntegratorF.#ctor(System.Func{DigitalRune.Mathematics.Algebra.VectorF,System.Single,DigitalRune.Mathematics.Algebra.VectorF})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.OdeIntegratorF" /> class.
            </summary>
      <param name="firstOrderDerivative">
            The function f(x, t) that computes the first order derivative of the vector x 
            (see <see cref="P:DigitalRune.Mathematics.Analysis.OdeIntegratorF.FirstOrderDerivative" />).
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="firstOrderDerivative" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Analysis.OdeIntegratorF.FirstOrderDerivative">
      <summary>
            Gets the function f(x, t) that computes the first order derivative.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.OdeIntegratorF.Integrate(DigitalRune.Mathematics.Algebra.VectorF,System.Single,System.Single)">
      <summary>
            Computes the new state x1 at time t1.
            </summary>
      <param name="x0">The state x0 at time t0.</param>
      <param name="t0">The time t0.</param>
      <param name="t1">The target time t1 for which the new state x1 is computed.</param>
      <returns>The new state x1 at time t1.</returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.RegulaFalsiMethodD">
      <summary>
            Finds roots using the regula falsi (false position) method (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RegulaFalsiMethodD.#ctor(System.Func{System.Double,System.Double})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.RegulaFalsiMethodD" /> class.
            </summary>
      <param name="function">The function f(x), which root we want to find.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RegulaFalsiMethodD.FindRoot(System.Func{System.Double,System.Double},System.Double,System.Double)">
      <summary>
            Finds the root of the given function.
            </summary>
      <param name="function">The function f.</param>
      <param name="x0">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <param name="x1">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <returns>
            The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.
            </returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.RegulaFalsiMethodF">
      <summary>
            Finds roots using the regula falsi (false position) method (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RegulaFalsiMethodF.#ctor(System.Func{System.Single,System.Single})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.RegulaFalsiMethodF" /> class.
            </summary>
      <param name="function">The function f(x), which root we want to find.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RegulaFalsiMethodF.FindRoot(System.Func{System.Single,System.Single},System.Single,System.Single)">
      <summary>
            Finds the root of the given function.
            </summary>
      <param name="function">The function f.</param>
      <param name="x0">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <param name="x1">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <returns>
            The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.
            </returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.RombergIntegratorD">
      <summary>
            Performs numerical integration using the <i>Romberg's method</i> (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RombergIntegratorD.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.RombergIntegratorD" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RombergIntegratorD.Integrate(System.Func{System.Double,System.Double},System.Double,System.Double)">
      <summary>
            Integrates the specified function within the given interval.
            </summary>
      <param name="function">The function.</param>
      <param name="lowerBound">The lower bound.</param>
      <param name="upperBound">The upper bound.</param>
      <returns>
            The integral of the given function over the interval 
            [<paramref name="lowerBound" />, <paramref name="upperBound" />].
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.RombergIntegratorF">
      <summary>
            Performs numerical integration using the <i>Romberg's method</i> (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RombergIntegratorF.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.RombergIntegratorF" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RombergIntegratorF.Integrate(System.Func{System.Single,System.Single},System.Single,System.Single)">
      <summary>
            Integrates the specified function within the given interval.
            </summary>
      <param name="function">The function.</param>
      <param name="lowerBound">The lower bound.</param>
      <param name="upperBound">The upper bound.</param>
      <returns>
            The integral of the given function over the interval 
            [<paramref name="lowerBound" />, <paramref name="upperBound" />].
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.RootFinderD">
      <summary>
            A base class for methods which solve a single equation (double-precision). 
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RootFinderD.#ctor(System.Func{System.Double,System.Double})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.RootFinderD" /> class.
            </summary>
      <param name="function">The function f(x), which root we want to find.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Analysis.RootFinderD.Epsilon">
      <summary>
            Gets or sets the tolerance value. 
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RootFinderD.ExpandBracket(System.Double@,System.Double@)">
      <summary>
            Takes the initial guessed range [<paramref name="x0" />, <paramref name="x1" />] and expands
            this interval such that the root <i>x<sub>root</sub></i> where 
            <i>f(x<sub>root</sub>) = 0</i> is in the interval.
            </summary>
      <param name="x0">The left bound of the interval.</param>
      <param name="x1">The right bound of the interval.</param>
      <returns>
        <see langword="true" /> if a valid bracket was found; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RootFinderD.ExpandBracket(System.Double@,System.Double@,System.Double)">
      <summary>
            Takes the initial guessed range [<paramref name="x0" />, <paramref name="x1" />] and expands
            this interval such that <i>x</i> with <i>f(x) = y</i>
            is in the interval.
            </summary>
      <param name="x0">The left bound of the interval.</param>
      <param name="x1">The right bound of the interval.</param>
      <param name="y">The y for which an x is searched for such that <i>f(x) = y</i>.</param>
      <returns>
        <see langword="true" /> if a valid bracket was found; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RootFinderD.FindRoot(System.Double,System.Double)">
      <summary>
            Finds the root of the given function.
            </summary>
      <param name="x0">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <param name="x1">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <returns>The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RootFinderD.FindRoot(System.Double,System.Double,System.Double)">
      <summary>
            Finds the x for the given function, such that <i>f(x) = y</i>.
            </summary>
      <param name="x0">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <param name="x1">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <param name="y">
            The y for which an x is searched for such that <i>f(x) = y</i>.
            </param>
      <returns>
            The x value such that <i>f(x) = y</i>; or <i>NaN</i> if no suitable x is found.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RootFinderD.FindRoot(System.Func{System.Double,System.Double},System.Double,System.Double)">
      <summary>
            Finds the root of the given function.
            </summary>
      <param name="function">The function f(x).</param>
      <param name="x0">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <param name="x1">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <returns>The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Analysis.RootFinderD.Function">
      <summary>
            Gets the function f(x), which root we want to find.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Analysis.RootFinderD.MaxNumberOfIterations">
      <summary>
            Gets or sets the maximum number of iterations.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Analysis.RootFinderD.NumberOfIterations">
      <summary>
            Gets or sets the number of iterations of the last 
            <see cref="M:DigitalRune.Mathematics.Analysis.RootFinderD.FindRoot(System.Double,System.Double)" /> method call.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.RootFinderF">
      <summary>
            A base class for methods which solve a single equation (single-precision). 
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RootFinderF.#ctor(System.Func{System.Single,System.Single})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.RootFinderF" /> class.
            </summary>
      <param name="function">The function f(x), which root we want to find.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Analysis.RootFinderF.Epsilon">
      <summary>
            Gets or sets the tolerance value. 
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RootFinderF.ExpandBracket(System.Single@,System.Single@)">
      <summary>
            Takes the initial guessed range [<paramref name="x0" />, <paramref name="x1" />] and expands
            this interval such that the root <i>x<sub>root</sub></i> where 
            <i>f(x<sub>root</sub>) = 0</i> is in the interval.
            </summary>
      <param name="x0">The left bound of the interval.</param>
      <param name="x1">The right bound of the interval.</param>
      <returns>
        <see langword="true" /> if a valid bracket was found; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RootFinderF.ExpandBracket(System.Single@,System.Single@,System.Single)">
      <summary>
            Takes the initial guessed range [<paramref name="x0" />, <paramref name="x1" />] and expands
            this interval such that <i>x</i> with <i>f(x) = y</i>
            is in the interval.
            </summary>
      <param name="x0">The left bound of the interval.</param>
      <param name="x1">The right bound of the interval.</param>
      <param name="y">The y for which an x is searched for such that <i>f(x) = y</i>.</param>
      <returns>
        <see langword="true" /> if a valid bracket was found; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RootFinderF.FindRoot(System.Func{System.Single,System.Single},System.Single,System.Single)">
      <summary>
            Finds the root of the given function.
            </summary>
      <param name="function">The function f(x).</param>
      <param name="x0">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <param name="x1">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <returns>The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RootFinderF.FindRoot(System.Single,System.Single)">
      <summary>
            Finds the root of the given function.
            </summary>
      <param name="x0">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <param name="x1">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <returns>The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RootFinderF.FindRoot(System.Single,System.Single,System.Single)">
      <summary>
            Finds the x for the given function, such that <i>f(x) = y</i>.
            </summary>
      <param name="x0">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <param name="x1">
            An x value such that the root lies between <paramref name="x0" /> and <paramref name="x1" />.
            </param>
      <param name="y">
            The y for which an x is searched for such that <i>f(x) = y</i>.
            </param>
      <returns>
            The x value such that <i>f(x) = y</i>; or <i>NaN</i> if no suitable x is found.
            </returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Analysis.RootFinderF.Function">
      <summary>
            Gets the function f(x), which root we want to find.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Analysis.RootFinderF.MaxNumberOfIterations">
      <summary>
            Gets or sets the maximum number of iterations.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Analysis.RootFinderF.NumberOfIterations">
      <summary>
            Gets or sets the number of iterations of the last 
            <see cref="M:DigitalRune.Mathematics.Analysis.RootFinderF.FindRoot(System.Single,System.Single)" /> method call.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.RungeKutta4IntegratorD">
      <summary>
            Performs numerical integration using <i>4th-order Runge-Kutta method</i> (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RungeKutta4IntegratorD.#ctor(System.Func{DigitalRune.Mathematics.Algebra.VectorD,System.Double,DigitalRune.Mathematics.Algebra.VectorD})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.RungeKutta4IntegratorD" /> class.
            </summary>
      <param name="firstOrderDerivative">
            The function f(x, t) that computes the first order derivative of the vector x (see 
            <see cref="P:DigitalRune.Mathematics.Analysis.OdeIntegratorD.FirstOrderDerivative" />).
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="firstOrderDerivative" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RungeKutta4IntegratorD.Integrate(DigitalRune.Mathematics.Algebra.VectorD,System.Double,System.Double)">
      <summary>
            Computes the new state x1 at time t1.
            </summary>
      <param name="x0">The state x0 at time t0.</param>
      <param name="t0">The time t0.</param>
      <param name="t1">The target time t1 for which the new state x1 is computed.</param>
      <returns>The new state x1 at time t1.</returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.RungeKutta4IntegratorF">
      <summary>
            Performs numerical integration using <i>4th-order Runge-Kutta method</i> (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RungeKutta4IntegratorF.#ctor(System.Func{DigitalRune.Mathematics.Algebra.VectorF,System.Single,DigitalRune.Mathematics.Algebra.VectorF})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.RungeKutta4IntegratorF" /> class.
            </summary>
      <param name="firstOrderDerivative">
            The function f(x, t) that computes the first order derivative of the vector x (see 
            <see cref="P:DigitalRune.Mathematics.Analysis.OdeIntegratorF.FirstOrderDerivative" />).
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="firstOrderDerivative" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.RungeKutta4IntegratorF.Integrate(DigitalRune.Mathematics.Algebra.VectorF,System.Single,System.Single)">
      <summary>
            Computes the new state x1 at time t1.
            </summary>
      <param name="x0">The state x0 at time t0.</param>
      <param name="t0">The time t0.</param>
      <param name="t1">The target time t1 for which the new state x1 is computed.</param>
      <returns>The new state x1 at time t1.</returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.SimpsonIntegratorD">
      <summary>
            Performs numerical integration using the <i>Simpson's rule</i> (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.SimpsonIntegratorD.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.SimpsonIntegratorD" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.SimpsonIntegratorD.Integrate(System.Func{System.Double,System.Double},System.Double,System.Double)">
      <summary>
            Integrates the specified function within the given interval.
            </summary>
      <param name="function">The function.</param>
      <param name="lowerBound">The lower bound.</param>
      <param name="upperBound">The upper bound.</param>
      <returns>
            The integral of the given function over the interval 
            [<paramref name="lowerBound" />, <paramref name="upperBound" />].
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.SimpsonIntegratorF">
      <summary>
            Performs numerical integration using the <i>Simpson's rule</i> (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.SimpsonIntegratorF.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.SimpsonIntegratorF" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.SimpsonIntegratorF.Integrate(System.Func{System.Single,System.Single},System.Single,System.Single)">
      <summary>
            Integrates the specified function within the given interval.
            </summary>
      <param name="function">The function.</param>
      <param name="lowerBound">The lower bound.</param>
      <param name="upperBound">The upper bound.</param>
      <returns>
            The integral of the given function over the interval 
            [<paramref name="lowerBound" />, <paramref name="upperBound" />].
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.TrapezoidalIntegratorD">
      <summary>
            Performs numerical integration using the <i>extended trapezoidal rule</i> (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.TrapezoidalIntegratorD.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.TrapezoidalIntegratorD" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.TrapezoidalIntegratorD.Integrate(System.Func{System.Double,System.Double},System.Double,System.Double)">
      <summary>
            Integrates the specified function within the given interval.
            </summary>
      <param name="function">The function.</param>
      <param name="lowerBound">The lower bound.</param>
      <param name="upperBound">The upper bound.</param>
      <returns>
            The integral of the given function over the interval 
            [<paramref name="lowerBound" />, <paramref name="upperBound" />].
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Analysis.TrapezoidalIntegratorF">
      <summary>
            Performs numerical integration using the <i>extended trapezoidal rule</i> (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.TrapezoidalIntegratorF.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.TrapezoidalIntegratorF" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Analysis.TrapezoidalIntegratorF.Integrate(System.Func{System.Single,System.Single},System.Single,System.Single)">
      <summary>
            Integrates the specified function within the given interval.
            </summary>
      <param name="function">The function.</param>
      <param name="lowerBound">The lower bound.</param>
      <param name="upperBound">The upper bound.</param>
      <returns>
            The integral of the given function over the interval 
            [<paramref name="lowerBound" />, <paramref name="upperBound" />].
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.BezierSegment1F">
      <summary>
            Defines a single segment of a 1-dimensional cubic Bézier spline (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment1F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BezierSegment1F" /> class</summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment1F.ControlPoint1">
      <summary>
            Gets or sets the first control point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment1F.ControlPoint2">
      <summary>
            Gets or sets the second control point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment1F.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BezierSegment1F" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BezierSegment1F" /> class.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment1F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length. 
            The absolute error will be less than this tolerance. 
            </param>
      <returns>
            The approximated length of the curve in the given interval. For some curves the length is 
            computed with an iterative algorithm. The iterations end when the 
            <paramref name="maxNumberOfIterations" /> were performed, or when the 
            <paramref name="tolerance" /> criterion is met - whichever comes first.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment1F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve point.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment1F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment1F.Point1">
      <summary>
            Gets or sets the start point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment1F.Point2">
      <summary>
            Gets or sets the end point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment1F.Recycle">
      <summary>
            Recycles this instance.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.BezierSegment2F">
      <summary>
            Defines a single segment of a 2-dimensional cubic Bézier splines (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment2F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BezierSegment2F" /> class</summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment2F.ControlPoint1">
      <summary>
            Gets or sets the first control point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment2F.ControlPoint2">
      <summary>
            Gets or sets the second control point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment2F.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BezierSegment2F" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BezierSegment2F" /> class.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment2F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length. 
            The absolute error will be less than this tolerance. 
            </param>
      <returns>
            The approximated length of the curve in the given interval. For some curves the length is 
            computed with an iterative algorithm. The iterations end when the 
            <paramref name="maxNumberOfIterations" /> were performed, or when the 
            <paramref name="tolerance" /> criterion is met - whichever comes first.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment2F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve point.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment2F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment2F.Point1">
      <summary>
            Gets or sets the start point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment2F.Point2">
      <summary>
            Gets or sets the end point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment2F.Recycle">
      <summary>
            Recycles this instance.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.BezierSegment3F">
      <summary>
            Defines a single segment of a 3-dimensional cubic Bézier splines (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment3F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BezierSegment3F" /> class</summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment3F.ControlPoint1">
      <summary>
            Gets or sets the first control point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment3F.ControlPoint2">
      <summary>
            Gets or sets the second control point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment3F.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BezierSegment3F" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BezierSegment3F" /> class.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment3F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length. 
            The absolute error will be less than this tolerance. 
            </param>
      <returns>
            The approximated length of the curve in the given interval. For some curves the length is 
            computed with an iterative algorithm. The iterations end when the 
            <paramref name="maxNumberOfIterations" /> were performed, or when the 
            <paramref name="tolerance" /> criterion is met - whichever comes first.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment3F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve point.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment3F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment3F.Point1">
      <summary>
            Gets or sets the start point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment3F.Point2">
      <summary>
            Gets or sets the end point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment3F.Recycle">
      <summary>
            Recycles this instance.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.BSplineSegment1F">
      <summary>
            Defines a single segment of a 1-dimensional cubic B-spline (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BSplineSegment1F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BSplineSegment1F" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BSplineSegment1F" /> class.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length.
            The absolute error will be less than this tolerance.
            </param>
      <returns>
            The approximated length of the curve in the given interval.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve point.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.Point1">
      <summary>
            Gets or sets the previous point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.Point2">
      <summary>
            Gets or sets the start point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.Point3">
      <summary>
            Gets or sets the end point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.Point4">
      <summary>
            Gets or sets the subsequent point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.Recycle">
      <summary>
            Recycles this instance.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.BSplineSegment2F">
      <summary>
            Defines a single segment of a 2-dimensional cubic B-spline (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BSplineSegment2F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BSplineSegment2F" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BSplineSegment2F" /> class.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length.
            The absolute error will be less than this tolerance.
            </param>
      <returns>
            The approximated length of the curve in the given interval.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve point.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.Point1">
      <summary>
            Gets or sets the previous point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.Point2">
      <summary>
            Gets or sets the start point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.Point3">
      <summary>
            Gets or sets the end point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.Point4">
      <summary>
            Gets or sets the subsequent point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.Recycle">
      <summary>
            Recycles this instance.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.BSplineSegment3F">
      <summary>
            Defines a single segment of a 3-dimensional cubic B-spline (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BSplineSegment3F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BSplineSegment3F" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BSplineSegment3F" /> class.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length.
            The absolute error will be less than this tolerance.
            </param>
      <returns>
            The approximated length of the curve in the given interval.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve point.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.Point1">
      <summary>
            Gets or sets the previous point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.Point2">
      <summary>
            Gets or sets the start point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.Point3">
      <summary>
            Gets or sets the end point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.Point4">
      <summary>
            Gets or sets the subsequent point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.Recycle">
      <summary>
            Recycles this instance.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.CardinalSegment1F">
      <summary>
            Defines a single segment of a 1-dimensional cubic Cardinal spline (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CardinalSegment1F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CardinalSegment1F" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CardinalSegment1F" /> class.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length.
            The absolute error will be less than this tolerance.
            </param>
      <returns>
            The approximated length of the curve in the given interval.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve point.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Point1">
      <summary>
            Gets or sets the previous point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Point2">
      <summary>
            Gets or sets the start point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Point3">
      <summary>
            Gets or sets the end point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Point4">
      <summary>
            Gets or sets the subsequent point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Recycle">
      <summary>
            Recycles this instance.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Tension">
      <summary>
            Gets or sets the tension constant.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.CardinalSegment2F">
      <summary>
            Defines a single segment of a 2-dimensional cubic Cardinal spline (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CardinalSegment2F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CardinalSegment2F" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CardinalSegment2F" /> class.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length.
            The absolute error will be less than this tolerance.
            </param>
      <returns>
            The approximated length of the curve in the given interval.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve point.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Point1">
      <summary>
            Gets or sets the previous point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Point2">
      <summary>
            Gets or sets the start point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Point3">
      <summary>
            Gets or sets the end point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Point4">
      <summary>
            Gets or sets the subsequent point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Recycle">
      <summary>
            Recycles this instance.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Tension">
      <summary>
            Gets or sets the tension constant.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.CardinalSegment3F">
      <summary>
            Defines a single segment of a 3-dimensional cubic Cardinal spline (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CardinalSegment3F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CardinalSegment3F" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CardinalSegment3F" /> class.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length.
            The absolute error will be less than this tolerance.
            </param>
      <returns>
            The approximated length of the curve in the given interval.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve point.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Point1">
      <summary>
            Gets or sets the previous point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Point2">
      <summary>
            Gets or sets the start point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Point3">
      <summary>
            Gets or sets the end point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Point4">
      <summary>
            Gets or sets the subsequent point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Recycle">
      <summary>
            Recycles this instance.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Tension">
      <summary>
            Gets or sets the tension constant.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F">
      <summary>
            Defines a single segment of a 1-dimensional cubic Catmull-Rom spline (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F" /> class.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length.
            The absolute error will be less than this tolerance.
            </param>
      <returns>
            The approximated length of the curve in the given interval.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve point.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Point1">
      <summary>
            Gets or sets the previous point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Point2">
      <summary>
            Gets or sets the start point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Point3">
      <summary>
            Gets or sets the end point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Point4">
      <summary>
            Gets or sets the subsequent point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Recycle">
      <summary>
            Recycles this instance.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F">
      <summary>
            Defines a single segment of a 2-dimensional cubic Catmull-Rom spline (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F" /> class.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length.
            The absolute error will be less than this tolerance.
            </param>
      <returns>
            The approximated length of the curve in the given interval.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve point.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Point1">
      <summary>
            Gets or sets the previous point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Point2">
      <summary>
            Gets or sets the start point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Point3">
      <summary>
            Gets or sets the end point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Point4">
      <summary>
            Gets or sets the subsequent point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Recycle">
      <summary>
            Recycles this instance.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F">
      <summary>
            Defines a single segment of a 3-dimensional cubic Catmull-Rom spline (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F" /> class.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length.
            The absolute error will be less than this tolerance.
            </param>
      <returns>
            The approximated length of the curve in the given interval.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve point.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Point1">
      <summary>
            Gets or sets the previous point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Point2">
      <summary>
            Gets or sets the start point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Point3">
      <summary>
            Gets or sets the end point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Point4">
      <summary>
            Gets or sets the subsequent point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Recycle">
      <summary>
            Recycles this instance.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.Curve2F">
      <summary>
            Represents a 2-dimensional curve that is used to define a function <i>y = f(x)</i> 
            (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Curve2F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.Curve2F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Curve2F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Not supported.
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length.
            The absolute error will be less than this tolerance.
            </param>
      <returns>
            The approximated length of the curve in the given interval.
            </returns>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Curve2F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>
            The curve point. (If the curve does not contain any points a vector with NaN values is
            returned.)
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Curve2F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>
            The curve tangent. If the function is not differentiable at the given parameter, either the 
            incoming or outgoing tangent is returned.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Curve2F.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>
            This method is reserved and should not be used. When implementing the 
            <see cref="T:System.Xml.Serialization.IXmlSerializable" /> interface, you should return <see langword="null" /> from this method, 
            and instead, if specifying a custom schema is required, apply the 
            <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
            </summary>
      <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the 
            object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 
            method.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Curve2F.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
            Generates an object from its XML representation.
            </summary>
      <param name="reader">
            The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized. 
            </param>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Curve2F.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
            Converts an object into its XML representation.
            </summary>
      <param name="writer">
            The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized. 
            </param>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.CurveKey`2">
      <summary>
            Defines a curve key (control point) of a piecewise curve.
            </summary>
      <typeparam name="TParam">
            The type of the curve parameter (usually <see cref="T:System.Single" /> or <see cref="T:System.Double" />).
            </typeparam>
      <typeparam name="TPoint">
            The type of the curve points (such as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />, <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />, etc.).
            </typeparam>
      <typeparam name="TCurveKey">
            The type of the curve key. (A type derived from <see cref="T:DigitalRune.Mathematics.Interpolation.CurveKey`2" />.)
            </typeparam>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CurveKey`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CurveKey`2" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CurveKey`2.GetParameter">
      <summary>
            Gets the parameter.
            </summary>
      <returns>The parameter.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.Interpolation">
      <summary>
            Gets or sets the type of interpolation (the spline type) used for the current curve segment.
            between this key and the next key.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.Parameter">
      <summary>
            Gets or sets a value that defines where this curve key is positioned on the curve.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.Point">
      <summary>
            Gets or sets the curve point for this curve key.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CurveKey`2.SetParameter(`0)">
      <summary>
            Sets the parameter.
            </summary>
      <param name="value">The parameter</param>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.TangentIn">
      <summary>
            Gets or sets the incoming tangent or the control point before this curve key.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.TangentOut">
      <summary>
            Gets or sets the outgoing tangent or the control point after this curve key.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.CurveKey2F">
      <summary>
            Defines a control point on a <see cref="T:DigitalRune.Mathematics.Interpolation.Curve2F" /> (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CurveKey2F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CurveKey2F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CurveKey2F.GetParameter">
      <summary>
            Gets the parameter.
            </summary>
      <returns>The parameter.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.CurveKey2F.SetParameter(System.Single)">
      <summary>
            Sets the parameter.
            </summary>
      <param name="value">The parameter</param>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.CurveLoopType">
      <summary>
            Defines how a curve is continued before the first curve key or after the last curve key.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.Constant">
      <summary>
            The curve value is constant and equal to the nearest key.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.Linear">
      <summary>
            The curve value is a linear extrapolation of the nearest key value in the direction
            of the tangent. 
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.Cycle">
      <summary>
            Parameters specified past the ends of the curve will wrap around to the opposite side of the 
            curve. If the values of the first and last key are different, the value will "jump" 
            instantly from one value to the other at the curve ends.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.CycleOffset">
      <summary>
            Same as <see cref="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.Cycle" /> but the curve values are offset by the difference
            of the first and last key value. Unlike <see cref="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.Cycle" /> the curve is continued without 
            "jumps" at the curve ends. 
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.Oscillate">
      <summary>
            Parameters specified past the ends of the curve act as an offset from the same side of the 
            curve toward the opposite side. This is similar to <see cref="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.Cycle" /> where
            the curve is mirrored beyond the curve ends.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.HermiteSegment1F">
      <summary>
            Defines a single segment of a 1-dimensional cubic Hermite spline (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.HermiteSegment1F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.HermiteSegment1F" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.HermiteSegment1F" /> class.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length.
            The absolute error will be less than this tolerance.
            </param>
      <returns>
            The approximated length of the curve in the given interval. For some curves the length is 
            computed with an iterative algorithm. The iterations end when the 
            <paramref name="maxNumberOfIterations" /> were performed, or when the 
            <paramref name="tolerance" /> criterion is met - whichever comes first.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve point.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Point1">
      <summary>
            Gets or sets the start point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Point2">
      <summary>
            Gets or sets the end point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Recycle">
      <summary>
            Recycles this instance.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Tangent1">
      <summary>
            Gets or sets the tangent at <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Point1" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Tangent2">
      <summary>
            Gets or sets the tangent at <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Point2" />.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.HermiteSegment2F">
      <summary>
            Defines a single segment of a 2-dimensional cubic Hermite spline (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.HermiteSegment2F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.HermiteSegment2F" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.HermiteSegment2F" /> class.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length.
            The absolute error will be less than this tolerance.
            </param>
      <returns>
            The approximated length of the curve in the given interval. For some curves the length is 
            computed with an iterative algorithm. The iterations end when the 
            <paramref name="maxNumberOfIterations" /> were performed, or when the 
            <paramref name="tolerance" /> criterion is met - whichever comes first.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve point.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Point1">
      <summary>
            Gets or sets the start point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Point2">
      <summary>
            Gets or sets the end point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Recycle">
      <summary>
            Recycles this instance.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Tangent1">
      <summary>
            Gets or sets the tangent at <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Point1" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Tangent2">
      <summary>
            Gets or sets the tangent at <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Point2" />.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.HermiteSegment3F">
      <summary>
            Defines a single segment of a 3-dimensional cubic Hermite spline (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.HermiteSegment3F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.HermiteSegment3F" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.HermiteSegment3F" /> class.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length.
            The absolute error will be less than this tolerance.
            </param>
      <returns>
            The approximated length of the curve in the given interval. For some curves the length is 
            computed with an iterative algorithm. The iterations end when the 
            <paramref name="maxNumberOfIterations" /> were performed, or when the 
            <paramref name="tolerance" /> criterion is met - whichever comes first.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve point.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Point1">
      <summary>
            Gets or sets the start point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Point2">
      <summary>
            Gets or sets the end point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Recycle">
      <summary>
            Recycles this instance.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Tangent1">
      <summary>
            Gets or sets the tangent at <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Point1" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Tangent2">
      <summary>
            Gets or sets the tangent at <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Point2" />.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.ICurve`2">
      <summary>
            Represents a curve.
            </summary>
      <typeparam name="TParam">
            The type of the curve parameter (usually <see cref="T:System.Single" /> or <see cref="T:System.Double" />).
            </typeparam>
      <typeparam name="TPoint">
            The type of the curve points (such as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />, <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />, etc.).
            </typeparam>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.ICurve`2.GetLength(`0,`0,System.Int32,`0)">
      <summary>
            Computes the approximated length of the curve for the parameter interval 
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length. 
            The absolute error will be less than this tolerance. 
            </param>
      <returns>
            The approximated length of the curve for the given parameter interval. 
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.ICurve`2.GetPoint(`0)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>
            The curve point. (If the curve does not contain any points a vector with NaN values is
            returned.)
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.ICurve`2.GetTangent(`0)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.InterpolationHelper">
      <summary>
            Provides methods for interpolation and approximation of values.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CosineInterpolation(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D,System.Double)">
      <summary>
            Performs a cosine interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" />.
            </summary>
      <param name="source">The source value.</param>
      <param name="target">The target value.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <returns>The cosine interpolation of two values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CosineInterpolation(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F,System.Single)">
      <summary>
            Performs a cosine interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />.
            </summary>
      <param name="source">The source value.</param>
      <param name="target">The target value.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <returns>The cosine interpolation of two values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CosineInterpolation(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D,System.Double)">
      <summary>
            Performs a cosine interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" />.
            </summary>
      <param name="source">The source value.</param>
      <param name="target">The target value.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <returns>The cosine interpolation of two values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CosineInterpolation(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
      <summary>
            Performs a cosine interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </summary>
      <param name="source">The source value.</param>
      <param name="target">The target value.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <returns>The cosine interpolation of two values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CosineInterpolation(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D,System.Double)">
      <summary>
            Performs a cosine interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" />.
            </summary>
      <param name="source">The source value.</param>
      <param name="target">The target value.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <returns>The cosine interpolation of two values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CosineInterpolation(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F,System.Single)">
      <summary>
            Performs a cosine interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </summary>
      <param name="source">The source value.</param>
      <param name="target">The target value.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <returns>The cosine interpolation of two values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CosineInterpolation(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD,System.Double)">
      <summary>
            Performs a cosine interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" />.
            </summary>
      <param name="source">The source value.</param>
      <param name="target">The target value.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <returns>The cosine interpolation of two values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CosineInterpolation(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF,System.Single)">
      <summary>
            Performs a cosine interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" />.
            </summary>
      <param name="source">The source value.</param>
      <param name="target">The target value.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <returns>The cosine interpolation of two values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CosineInterpolation(System.Double,System.Double,System.Double)">
      <summary>
            Performs a cosine interpolation between two values (double-precision).
            </summary>
      <param name="source">The source value.</param>
      <param name="target">The target value.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <returns>The cosine interpolation of two values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CosineInterpolation(System.Single,System.Single,System.Single)">
      <summary>
            Performs a cosine interpolation between two values (single-precision).
            </summary>
      <param name="source">The source value.</param>
      <param name="target">The target value.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <returns>The cosine interpolation of two values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CriticallyDampedSmoothing(System.Double@,System.Double@,System.Double,System.Double,System.Double)">
      <summary>
            Updates position and velocity according to a critically damped spring (double-precision).
            </summary>
      <param name="position">The position.</param>
      <param name="velocity">The velocity.</param>
      <param name="targetPosition">The target position.</param>
      <param name="deltaTime">The size of the timestep.</param>
      <param name="smoothTime">
        <paramref name="smoothTime" /> is parameter that determines how fast the 
            <paramref name="targetPosition" /> is reached. <paramref name="smoothTime" /> is equal to the 
            time that is required to reach the target when at maximum speed.
            </param>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CriticallyDampedSmoothing(System.Single@,System.Single@,System.Single,System.Single,System.Single)">
      <summary>
            Updates position and velocity according to a critically damped spring (single-precision).
            </summary>
      <param name="position">The position.</param>
      <param name="velocity">The velocity.</param>
      <param name="targetPosition">The target position.</param>
      <param name="deltaTime">The size of the timestep.</param>
      <param name="smoothTime">
        <paramref name="smoothTime" /> is parameter that determines how fast the 
            <paramref name="targetPosition" /> is reached. <paramref name="smoothTime" /> is equal to the 
            time that is required to reach the target when at maximum speed.
            </param>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.EaseInOutSmoothStep(System.Double)">
      <summary>
            Computes a constant acceleration ease-in/ease-out smooth step function (double-precision).
            </summary>
      <param name="x">The argument x.</param>
      <returns>The function value y.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.EaseInOutSmoothStep(System.Single)">
      <summary>
            Computes a constant acceleration ease-in/ease-out smooth step function (single-precision).
            </summary>
      <param name="x">The argument x.</param>
      <returns>The function value y.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.HermiteSmoothStep(System.Double)">
      <summary>
            Computes the Hermite smooth step function (double-precision).
            </summary>
      <param name="x">The argument x.</param>
      <returns>The function value y.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.HermiteSmoothStep(System.Single)">
      <summary>
            Computes the Hermite smooth step function (single-precision).
            </summary>
      <param name="x">The argument x.</param>
      <returns>The function value y.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,System.Double)">
      <summary>
            Performs a linear interpolation of two <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" />.
            </summary>
      <param name="source">The start quaternion.</param>
      <param name="target">The end quaternion.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.</param>
      <returns>The linear interpolation of the two quaternions</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,System.Single)">
      <summary>
            Performs a linear interpolation of two <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" />.
            </summary>
      <param name="source">The start quaternion.</param>
      <param name="target">The end quaternion.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.</param>
      <returns>The linear interpolation of the two quaternions</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D,System.Double)">
      <summary>
            Performs a linear interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" />.
            </summary>
      <param name="source">The source vector.</param>
      <param name="target">The target vector.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <returns>The linear interpolation of two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F,System.Single)">
      <summary>
            Performs a linear interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />.
            </summary>
      <param name="source">The source vector.</param>
      <param name="target">The target vector.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <returns>The linear interpolation of two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D,System.Double)">
      <summary>
            Performs a linear interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" />.
            </summary>
      <param name="source">The source vector.</param>
      <param name="target">The target vector.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <returns>The linear interpolation of two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
      <summary>
            Performs a linear interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </summary>
      <param name="source">The source vector.</param>
      <param name="target">The target vector.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <returns>The linear interpolation of two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D,System.Double)">
      <summary>
            Performs a linear interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" />.
            </summary>
      <param name="source">The source vector.</param>
      <param name="target">The target vector.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <returns>The linear interpolation of two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F,System.Single)">
      <summary>
            Performs a linear interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </summary>
      <param name="source">The source vector.</param>
      <param name="target">The target vector.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <returns>The linear interpolation of two vectors.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD,System.Double)">
      <summary>
            Performs a linear interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" />.
            </summary>
      <param name="source">The source vector.</param>
      <param name="target">The target vector.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <returns>The linear interpolation of two vectors.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="target" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF,System.Single)">
      <summary>
            Performs a linear interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" />.
            </summary>
      <param name="source">The source vector.</param>
      <param name="target">The target vector.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <returns>The linear interpolation of two vectors.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="target" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(System.Double,System.Double,System.Double)">
      <summary>
            Performs a linear interpolation between two values (double-precision).
            </summary>
      <param name="source">The source value.</param>
      <param name="target">The target value.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <returns>The linear interpolation of two values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(System.Single,System.Single,System.Single)">
      <summary>
            Performs a linear interpolation between two values (single-precision).
            </summary>
      <param name="source">The source value.</param>
      <param name="target">The target value.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <returns>The linear interpolation of two values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.PolynomialInterpolation(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector2D},System.Double)">
      <summary>
            Computes the function value for <paramref name="x" /> using polynomial interpolation (double-precision).
            </summary>
      <param name="points">The points.</param>
      <param name="x">The <i>x</i> value.</param>
      <returns>The interpolated value <i>y = P(x)</i>.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.PolynomialInterpolation(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector2D},System.Double,System.Double@)">
      <summary>
            Computes the function value for <paramref name="x" /> using polynomial interpolation (double-precision).
            </summary>
      <param name="points">The points.</param>
      <param name="x">The <i>x</i> value.</param>
      <param name="error">The error estimate.</param>
      <returns>The interpolated value <i>y = P(x)</i>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="points" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of points should be greater than 1.
            </exception>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            2 points have identical x-values (within roundoff tolerance).
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.PolynomialInterpolation(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector2F},System.Single)">
      <summary>
            Computes the function value for <paramref name="x" /> using polynomial interpolation (single-precision).
            </summary>
      <param name="points">The points.</param>
      <param name="x">The <i>x</i> value.</param>
      <returns>The interpolated value <i>y = P(x)</i>.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.PolynomialInterpolation(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector2F},System.Single,System.Single@)">
      <summary>
            Computes the function value for <paramref name="x" /> using polynomial interpolation (single-precision).
            </summary>
      <param name="points">The points.</param>
      <param name="x">The <i>x</i> value.</param>
      <param name="error">The error estimate.</param>
      <returns>The interpolated value <i>y = P(x)</i>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="points" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of points should be greater than 1.
            </exception>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            2 points have identical x-values (within roundoff tolerance).
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Slerp(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,System.Double)">
      <summary>
            Performs a spherical linear interpolation of the two <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" />.
            </summary>
      <param name="source">The start quaternion.</param>
      <param name="target">The end quaternion.</param>
      <param name="parameter">
            The interpolation factor that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <returns>The spherical linear interpolation of the two quaternions.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Slerp(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,System.Single)">
      <summary>
            Performs a spherical linear interpolation of the two <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" />.
            </summary>
      <param name="source">The start quaternion.</param>
      <param name="target">The end quaternion.</param>
      <param name="parameter">
            The interpolation factor that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <returns>The spherical linear interpolation of the two quaternions.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Squad(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,System.Double)">
      <summary>
            Interpolates between quaternions using spherical quadrangle interpolation (double-precision).
            </summary>
      <param name="q">The source quaternion (<i>q<sub>n</sub></i>).</param>
      <param name="a">The first intermediate quaternion (<i>a<sub>n</sub></i>).</param>
      <param name="b">The second intermediate quaternion (<i>a<sub>n+1</sub></i>).</param>
      <param name="p">The target quaternion (<i>q<sub>n+1</sub></i>).</param>
      <param name="t">The interpolation parameter t.</param>
      <returns>The interpolated quaternion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Squad(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,System.Single)">
      <summary>
            Interpolates between quaternions using spherical quadrangle interpolation (single-precision).
            </summary>
      <param name="q">The source quaternion (<i>q<sub>n</sub></i>).</param>
      <param name="a">The first intermediate quaternion (<i>a<sub>n</sub></i>).</param>
      <param name="b">The second intermediate quaternion (<i>a<sub>n+1</sub></i>).</param>
      <param name="p">The target quaternion (<i>q<sub>n+1</sub></i>).</param>
      <param name="t">The interpolation parameter t.</param>
      <returns>The interpolated quaternion.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.SquadSetup(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD@,DigitalRune.Mathematics.Algebra.QuaternionD@,DigitalRune.Mathematics.Algebra.QuaternionD@,DigitalRune.Mathematics.Algebra.QuaternionD@)">
      <summary>
            Calculates the parameters for a spline-based quaternion interpolation (double-precision).
            </summary>
      <param name="q0">The previous quaternion (<i>q<sub>n-1</sub></i>).</param>
      <param name="q1">The source quaternion (<i>q<sub>n</sub></i>).</param>
      <param name="q2">The target quaternion (<i>q<sub>n+1</sub></i>).</param>
      <param name="q3">The subsequent quaternion (<i>q<sub>n+2</sub></i>).</param>
      <param name="q">The source quaternion (<i>q<sub>n</sub></i>).</param>
      <param name="a">The first intermediate quaternion (<i>a<sub>n</sub></i>).</param>
      <param name="b">The second intermediate quaternion (<i>a<sub>n+1</sub></i>).</param>
      <param name="p">The target quaternion (<i>q<sub>n+1</sub></i>).</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.SquadSetup(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@)">
      <summary>
            Calculates the parameters for a spline-based quaternion interpolation (single-precision).
            </summary>
      <param name="q0">The previous quaternion (<i>q<sub>n-1</sub></i>).</param>
      <param name="q1">The source quaternion (<i>q<sub>n</sub></i>).</param>
      <param name="q2">The target quaternion (<i>q<sub>n+1</sub></i>).</param>
      <param name="q3">The subsequent quaternion (<i>q<sub>n+2</sub></i>).</param>
      <param name="q">The source quaternion (<i>q<sub>n</sub></i>).</param>
      <param name="a">The first intermediate quaternion (<i>a<sub>n</sub></i>).</param>
      <param name="b">The second intermediate quaternion (<i>a<sub>n+1</sub></i>).</param>
      <param name="p">The target quaternion (<i>q<sub>n+1</sub></i>).</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Step``1(``0,``0,System.Double,DigitalRune.Mathematics.Interpolation.StepInterpolation)">
      <summary>
            Performs a step interpolation between two values.
            </summary>
      <param name="source">The source value.</param>
      <param name="target">The target value.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <param name="interpolation">The step interpolation type.</param>
      <typeparam name="T">The type of the value.</typeparam>
      <returns>The step interpolation of two values.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Step``1(``0,``0,System.Single,DigitalRune.Mathematics.Interpolation.StepInterpolation)">
      <summary>
            Performs a step interpolation between two values.
            </summary>
      <param name="source">The source value.</param>
      <param name="target">The target value.</param>
      <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
      <param name="interpolation">The step interpolation type.</param>
      <typeparam name="T">The type of the value.</typeparam>
      <returns>The step interpolation of two values.</returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.LineSegment1F">
      <summary>
            Defines a 1-dimensional line segment (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment1F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.LineSegment1F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment1F.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.LineSegment1F" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.LineSegment1F" /> class.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment1F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length.
            The absolute error will be less than this tolerance.
            </param>
      <returns>
            The approximated length of the curve in the given interval. For some curves the length is 
            computed with an iterative algorithm. The iterations end when the 
            <paramref name="maxNumberOfIterations" /> were performed, or when the 
            <paramref name="tolerance" /> criterion is met - whichever comes first.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment1F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve point.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment1F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.LineSegment1F.Point1">
      <summary>
            Gets or sets the start point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.LineSegment1F.Point2">
      <summary>
            Gets or sets the end point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment1F.Recycle">
      <summary>
            Recycles this instance.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.LineSegment2F">
      <summary>
            Defines a 2-dimensional line segment (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment2F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.LineSegment2F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment2F.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.LineSegment2F" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.LineSegment2F" /> class.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment2F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length.
            The absolute error will be less than this tolerance.
            </param>
      <returns>
            The approximated length of the curve in the given interval. For some curves the length is 
            computed with an iterative algorithm. The iterations end when the 
            <paramref name="maxNumberOfIterations" /> were performed, or when the 
            <paramref name="tolerance" /> criterion is met - whichever comes first.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment2F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve point.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment2F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.LineSegment2F.Point1">
      <summary>
            Gets or sets the start point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.LineSegment2F.Point2">
      <summary>
            Gets or sets the end point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment2F.Recycle">
      <summary>
            Recycles this instance.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.LineSegment3F">
      <summary>
            Defines a 3-dimensional line segment (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment3F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.LineSegment3F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment3F.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.LineSegment3F" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.LineSegment3F" /> class.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment3F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length.
            The absolute error will be less than this tolerance.
            </param>
      <returns>
            The approximated length of the curve in the given interval. For some curves the length is 
            computed with an iterative algorithm. The iterations end when the 
            <paramref name="maxNumberOfIterations" /> were performed, or when the 
            <paramref name="tolerance" /> criterion is met - whichever comes first.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment3F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve point.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment3F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.LineSegment3F.Point1">
      <summary>
            Gets or sets the start point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.LineSegment3F.Point2">
      <summary>
            Gets or sets the end point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment3F.Recycle">
      <summary>
            Recycles this instance.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.Path2F">
      <summary>
            Represents a 2-dimensional path that is defined by piecewise interpolation of key points 
            (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Path2F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.Path2F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Path2F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length.
            The absolute error will be less than this tolerance.
            </param>
      <returns>
            The approximated length of the curve in the given interval.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Path2F.GetParameterFromLength(System.Single,System.Int32,System.Single)">
      <summary>
            Gets the curve parameter for the given curve length (for length-parameterized splines).
            </summary>
      <param name="length">The length.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise parameter.
            The absolute error will be less than this tolerance.
            </param>
      <returns>The parameter at which the curve has the given length.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="tolerance" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Path2F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>
            The curve point. (If the curve does not contain any points a vector with NaN values is
            returned.)
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Path2F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Path2F.ParameterizeByLength(System.Int32,System.Single)">
      <summary>
            Parameterizes the path by its length.
            </summary>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length. The 
            absolute error will be less than this tolerance.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="tolerance" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Path2F.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>
            This method is reserved and should not be used. When implementing the 
            <see cref="T:System.Xml.Serialization.IXmlSerializable" /> interface, you should return <see langword="null" /> from this
            method, and instead, if specifying a custom schema is required, apply the 
            <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
            </summary>
      <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is
            produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by
            the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Path2F.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
            Generates an object from its XML representation.
            </summary>
      <param name="reader">
            The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized. 
            </param>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Path2F.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
            Converts an object into its XML representation.
            </summary>
      <param name="writer">
            The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized. 
            </param>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.Path3F">
      <summary>
            Represents a 3-dimensional path that is defined by piecewise interpolation of key points 
            (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Path3F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.Path3F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Path3F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length.
            The absolute error will be less than this tolerance.
            </param>
      <returns>
            The approximated length of the curve in the given interval.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Path3F.GetParameterFromLength(System.Single,System.Int32,System.Single)">
      <summary>
            Gets the curve parameter for the given curve length (for length-parameterized splines).
            </summary>
      <param name="length">The length.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise parameter.
            The absolute error will be less than this tolerance.
            </param>
      <returns>The parameter at which the curve has the given length.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="tolerance" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Path3F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>
            The curve point. (If the curve does not contain any points a vector with NaN values is
            returned.)
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Path3F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Path3F.ParameterizeByLength(System.Int32,System.Single)">
      <summary>
            Parameterizes the path by its length.
            </summary>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length. The 
            absolute error will be less than this tolerance.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="tolerance" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Path3F.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>
            This method is reserved and should not be used. When implementing the 
            <see cref="T:System.Xml.Serialization.IXmlSerializable" /> interface, you should return <see langword="null" /> from this
            method, and instead, if specifying a custom schema is required, apply the 
            <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
            </summary>
      <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is
            produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by
            the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Path3F.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
            Generates an object from its XML representation.
            </summary>
      <param name="reader">
            The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized. 
            </param>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.Path3F.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
            Converts an object into its XML representation.
            </summary>
      <param name="writer">
            The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized. 
            </param>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.PathKey2F">
      <summary>
            Defines a waypoint of a 2-dimensional path (singe-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.PathKey2F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.PathKey2F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.PathKey2F.GetParameter">
      <summary>
            Gets the parameter.
            </summary>
      <returns>The parameter.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.PathKey2F.SetParameter(System.Single)">
      <summary>
            Sets the parameter.
            </summary>
      <param name="value">The parameter</param>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.PathKey3F">
      <summary>
            Defines a waypoint of a 3-dimensional path (singe-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.PathKey3F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.PathKey3F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.PathKey3F.GetParameter">
      <summary>
            Gets the parameter.
            </summary>
      <returns>The parameter.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.PathKey3F.SetParameter(System.Single)">
      <summary>
            Sets the parameter.
            </summary>
      <param name="value">The parameter</param>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3">
      <summary>
            Represents a curve that is defined by piecewise interpolation of curve keys (control points).
            </summary>
      <typeparam name="TParam">
            The type of the curve parameter (usually <see cref="T:System.Single" /> or <see cref="T:System.Double" />).
            </typeparam>
      <typeparam name="TPoint">
            The type of the curve points (such as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />, <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />, etc.).
            </typeparam>
      <typeparam name="TCurveKey">
            The type of the curve key. (A type derived from <see cref="T:DigitalRune.Mathematics.Interpolation.CurveKey`2" />.)
            </typeparam>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the curve keys of the 
            <see cref="T:DigitalRune.Mathematics.Interpolation.PiecewiseCurveF`2" />. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for <see cref="T:DigitalRune.Mathematics.Interpolation.PiecewiseCurveF`2" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.GetKeyIndex(`0)">
      <summary>
            Gets the index of the curve key <i>before</i> or at the given parameter value.
            </summary>
      <param name="parameter">The parameter value.</param>
      <returns>The index of the curve key or <c>-1</c> if no suitable curve key exists.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.GetLength(`0,`0,System.Int32,`0)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length.
            The absolute error will be less than this tolerance.
            </param>
      <returns>
            The approximated length of the curve in the given interval.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.GetPoint(`0)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>
            The curve point. (If the curve does not contain any points a vector with NaN values is
            returned.)
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.GetTangent(`0)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.InsertItem(System.Int32,`2)">
      <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
      <param name="item">
            The object to insert. The value can be null for reference types.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero. Or <paramref name="index" /> is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.IsInMirroredOscillation(`0)">
      <summary>
            Determines whether the given parameter corresponds to a mirrored oscillation loop.
            </summary>
      <param name="parameter">The parameter value.</param>
      <returns>
        <see langword="true" /> if the parameter is in a mirrored oscillation loop; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.LoopParameter(`0)">
      <summary>
            Handles pre- and post-looping by changing the given parameter so that it lies on the curve.
            </summary>
      <param name="parameter">The parameter value.</param>
      <returns>The modified parameter value.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.PostLoop">
      <summary>
            Gets or sets a value that defines how the curve looks after the last curve key.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.PreLoop">
      <summary>
            Gets or sets a value that defines how the curve looks before the first path key.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.ReadXml(System.Xml.XmlReader)">
      <summary>
            Generates an object from its XML representation.
            </summary>
      <param name="reader">
            The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized. 
            </param>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.SetItem(System.Int32,`2)">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">
            The new value for the element at the specified index.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero. Or <paramref name="index" /> is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.SmoothEnds">
      <summary>
            Gets or sets a value indicating whether the curve ends are smoothed.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.Sort">
      <summary>
            Sorts the curve keys in the collection by their parameter (see
            <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.Parameter" />).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.WriteXml(System.Xml.XmlWriter)">
      <summary>
            Converts an object into its XML representation.
            </summary>
      <param name="writer">
            The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized. 
            </param>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.PiecewiseCurveF`2">
      <summary>
            Represents a curve that is defined by piecewise interpolation of curve keys (control points).
            (Single-precision)
            </summary>
      <typeparam name="TPoint">
            The type of the curve points (such as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />, <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />, etc.).
            </typeparam>
      <typeparam name="TCurveKey">
            The type of the curve key. (A type derived from <see cref="T:DigitalRune.Mathematics.Interpolation.CurveKey`2" />.)
            </typeparam>
      <typeparam name="TParam">
            The type of the curve parameter (usually <see cref="T:System.Single" /> or <see cref="T:System.Double" />).
            </typeparam>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurveF`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.PiecewiseCurveF`2" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurveF`2.GetKeyIndex(System.Single)">
      <summary>
            Gets the index of the curve key <i>before</i> or at the given parameter value.
            </summary>
      <param name="parameter">The parameter value.</param>
      <returns>
            The index of the curve key or <c>-1</c> if no suitable curve key exists.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurveF`2.IsInMirroredOscillation(System.Single)">
      <summary>
            Determines whether the given parameter corresponds to a mirrored oscillation loop.
            </summary>
      <param name="parameter">The parameter value.</param>
      <returns>
        <see langword="true" /> if the parameter is in a mirrored oscillation loop; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurveF`2.LoopParameter(System.Single)">
      <summary>
            Handles pre- and post-looping by changing the given parameter so that it lies on the curve.
            </summary>
      <param name="parameter">The parameter value.</param>
      <returns>The modified parameter value.</returns>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.RadialBasisRegressionF">
      <summary>
            Scattered Interpolation using multiple regression analysis with radial basis functions
            (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.RadialBasisRegressionF.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.RadialBasisRegressionF" /> class</summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.RadialBasisRegressionF.BasisFunction">
      <summary>
            Gets or sets the basis function.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.RadialBasisRegressionF.DistanceFunction">
      <summary>
            Gets or sets the distance function.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.RadialBasisRegressionF.OnCompute(DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Called when <see cref="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Compute(DigitalRune.Mathematics.Algebra.VectorF)" /> is called.
            </summary>
      <param name="x">The x value.</param>
      <returns>The y value.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.RadialBasisRegressionF.OnSetup">
      <summary>
            Called when <see cref="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Setup" /> is called.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            Cannot compute regression - try to choose different reference data pairs or another basis 
            function.
            </exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF">
      <summary>
            Base class for scattered interpolation methods (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.ClearItems">
      <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Compute(DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Computes a y value for the specified x value using scattered interpolation.
            </summary>
      <param name="x">The x value.</param>
      <returns>The y value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="x" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">No reference data pairs were added.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.InsertItem(System.Int32,DigitalRune.Collections.Pair{DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF})">
      <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
      <param name="item">
            The object to insert. The value can be null for reference types.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The vector dimension of a newly added vector is different from the dimensions of the already
            registered vectors.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The x or y vector in <paramref name="item" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.OnCompute(DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Called when <see cref="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Compute(DigitalRune.Mathematics.Algebra.VectorF)" /> is called.
            </summary>
      <param name="x">The x value.</param>
      <returns>The y value.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.OnSetup">
      <summary>
            Called when <see cref="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Setup" /> is called.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.RemoveItem(System.Int32)">
      <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.SetItem(System.Int32,DigitalRune.Collections.Pair{DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF})">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">
            The new value for the element at the specified index. The value can be 
            <see langword="null" /> for reference types.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The vector dimension of a newly added vector is different from the dimensions of the already
            registered vectors.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The x or y vector in <paramref name="item" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Setup">
      <summary>
            Prepares the scattered interpolation.
            </summary>
      <exception cref="T:DigitalRune.Mathematics.MathematicsException">No reference data pairs were added.</exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.ShepardInterpolationF">
      <summary>
            Scattered Interpolation using Shepard's method (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.ShepardInterpolationF.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.ShepardInterpolationF" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.ShepardInterpolationF.OnCompute(DigitalRune.Mathematics.Algebra.VectorF)">
      <summary>
            Called when <see cref="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Compute(DigitalRune.Mathematics.Algebra.VectorF)" /> is called.
            </summary>
      <param name="x">The x value.</param>
      <returns>The y value.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.ShepardInterpolationF.OnSetup">
      <summary>
            Called when <see cref="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Setup" /> is called.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.ShepardInterpolationF.Power">
      <summary>
            Gets or sets the exponent for the power of the distance.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.SplineInterpolation">
      <summary>
            The type of spline interpolation used to interpolate between two curve keys.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.Linear">
      <summary>
            Linear interpolation (LERP).
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.StepLeft">
      <summary>
            Step interpolation using "left steps". See <see cref="T:DigitalRune.Mathematics.Interpolation.StepInterpolation" />.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.StepCentered">
      <summary>
            Step interpolation using "centered steps". See <see cref="T:DigitalRune.Mathematics.Interpolation.StepInterpolation" />.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.StepRight">
      <summary>
            Step interpolation using "right steps". See <see cref="T:DigitalRune.Mathematics.Interpolation.StepInterpolation" />.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.Bezier">
      <summary>
            Interpolation using a cubic Bézier spline.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.BSpline">
      <summary>
            Interpolation using a cubic B-spline.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.Hermite">
      <summary>
            Interpolation using a cubic Hermite spline.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.CatmullRom">
      <summary>
            Interpolation using a Catmull-Rom spline.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.StepInterpolation">
      <summary>
            The type of step interpolation.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Interpolation.StepInterpolation.Left">
      <summary>
            A step interpolation between two values <i>a</i> and <i>b</i> with an interpolation 
            parameter <i>u</i> that returns <i>a</i> for <i> u = 0</i> and 
            <i>b</i> for <i>u &gt; 0</i>.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Interpolation.StepInterpolation.Centered">
      <summary>
            A step interpolation between two values <i>a</i> and <i>b</i> with an interpolation 
            parameter <i>u</i> that returns <i>a</i> for all <i>u &lt; 0.5</i> and <i>b</i> for
            <i>u ≥ 0.5</i>.
            </summary>
    </member>
    <member name="F:DigitalRune.Mathematics.Interpolation.StepInterpolation.Right">
      <summary>
            A step interpolation between two values <i>a</i> and <i>b</i> with an interpolation 
            parameter <i>u</i> that returns <i>a</i> for all <i>u &lt; 1</i> and <i>b</i> for
            <i>u = 1</i>.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.StepSegment1F">
      <summary>
            Defines a step interpolation between two values (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment1F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.StepSegment1F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment1F.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.StepSegment1F" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.StepSegment1F" /> class.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment1F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length. 
            The absolute error will be less than this tolerance. 
            </param>
      <returns>
            The approximated length of the curve in the given interval. For some curves the length is 
            computed with an iterative algorithm. The iterations end when the 
            <paramref name="maxNumberOfIterations" /> were performed, or when the 
            <paramref name="tolerance" /> criterion is met - whichever comes first.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment1F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve point.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment1F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.StepSegment1F.Point1">
      <summary>
            Gets or sets the start point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.StepSegment1F.Point2">
      <summary>
            Gets or sets the end point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment1F.Recycle">
      <summary>
            Recycles this instance.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.StepSegment1F.StepType">
      <summary>
            Gets or sets the type of step interpolation.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.StepSegment2F">
      <summary>
            Defines a step interpolation between two 2-dimensional points (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment2F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.StepSegment2F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment2F.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.StepSegment2F" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.StepSegment2F" /> class.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment2F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length. 
            The absolute error will be less than this tolerance. 
            </param>
      <returns>
            The approximated length of the curve in the given interval. For some curves the length is 
            computed with an iterative algorithm. The iterations end when the 
            <paramref name="maxNumberOfIterations" /> were performed, or when the 
            <paramref name="tolerance" /> criterion is met - whichever comes first.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment2F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve point.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment2F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.StepSegment2F.Point1">
      <summary>
            Gets or sets the start point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.StepSegment2F.Point2">
      <summary>
            Gets or sets the end point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment2F.Recycle">
      <summary>
            Recycles this instance.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.StepSegment2F.StepType">
      <summary>
            Gets or sets the type of step interpolation.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Interpolation.StepSegment3F">
      <summary>
            Defines a step interpolation between two 3-dimensional points (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment3F.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.StepSegment3F" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment3F.Create">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.StepSegment3F" /> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.StepSegment3F" /> class.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment3F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length. 
            The absolute error will be less than this tolerance. 
            </param>
      <returns>
            The approximated length of the curve in the given interval. For some curves the length is 
            computed with an iterative algorithm. The iterations end when the 
            <paramref name="maxNumberOfIterations" /> were performed, or when the 
            <paramref name="tolerance" /> criterion is met - whichever comes first.
            </returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment3F.GetPoint(System.Single)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve point.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment3F.GetTangent(System.Single)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.StepSegment3F.Point1">
      <summary>
            Gets or sets the start point.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.StepSegment3F.Point2">
      <summary>
            Gets or sets the end point.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment3F.Recycle">
      <summary>
            Recycles this instance.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Interpolation.StepSegment3F.StepType">
      <summary>
            Gets or sets the type of step interpolation.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Statistics.BoxDistribution">
      <summary>
            A distribution that returns random positions from inside a box.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.BoxDistribution.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.BoxDistribution" /> class</summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.BoxDistribution.MaxValue">
      <summary>
            Gets or sets the maximum value.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.BoxDistribution.MinValue">
      <summary>
            Gets or sets the minimum value.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.BoxDistribution.Next(System.Random)">
      <summary>
            Gets a new random value for the underlying probability distribution.
            </summary>
      <param name="random">
            The random number generator. (Must not be <see langword="null" />.)
            </param>
      <returns>A random value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="random" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Statistics.CircleDistribution">
      <summary>
            A distribution that returns random positions from a circular area.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.CircleDistribution.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.CircleDistribution" /> class</summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.CircleDistribution.Center">
      <summary>
            Gets or sets the center of the circle.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.CircleDistribution.InnerRadius">
      <summary>
            Gets or sets the inner radius of the ring.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.CircleDistribution.Next(System.Random)">
      <summary>
            Gets a new random value for the underlying probability distribution.
            </summary>
      <param name="random">
            The random number generator. (Must not be <see langword="null" />.)
            </param>
      <returns>A random value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="random" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.CircleDistribution.OuterRadius">
      <summary>
            Gets or sets the outer radius of the ring.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.</exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.CircleDistribution.Scale">
      <summary>
            Gets or sets the scale factors that are multiplied to the random position.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Statistics.ConstValueDistribution`1">
      <summary>
            Represents a probability distribution that contains only 1 value with 100% probability. Hence 
            this distribution always returns a single constant value - no uncertainty.
            </summary>
      <typeparam name="T">The type of the constant.</typeparam>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.ConstValueDistribution`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.ConstValueDistribution`1" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.ConstValueDistribution`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.ConstValueDistribution`1" /> class.
            </summary>
      <param name="value">The single constant value.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.ConstValueDistribution`1.Next(System.Random)">
      <summary>
            Gets a new random value for the underlying probability distribution.
            </summary>
      <param name="random">
            The random number generator. (Must not be <see langword="null" />.)
            </param>
      <returns>A random value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="random" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.ConstValueDistribution`1.Value">
      <summary>
            Gets or sets the single constant value.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Statistics.DirectionDistribution">
      <summary>
            A distribution that returns a random direction vector.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.DirectionDistribution.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.DirectionDistribution" /> class</summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.DirectionDistribution.Deviation">
      <summary>
            Gets or sets the angle of the cone measured from the central vector to a border vector.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.DirectionDistribution.Direction">
      <summary>
            Gets or sets the direction of the cone (the central vector in the cone).
            </summary>
      <exception cref="T:System.ArgumentException">
            The vector is not a valid direction. The length is 0.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.DirectionDistribution.IsUniform">
      <summary>
            Gets or sets a value indicating whether the random direction vectors are distributed
            uniformly or follow a Gaussian distribution
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.DirectionDistribution.Next(System.Random)">
      <summary>
            Gets a new random value for the underlying probability distribution.
            </summary>
      <param name="random">
            The random number generator. (Must not be <see langword="null" />.)
            </param>
      <returns>A random value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="random" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Statistics.Distribution`1">
      <summary>
            Base class of probability distributions.
            </summary>
      <typeparam name="T">The type of the random value.</typeparam>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.Distribution`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.Distribution`1" /> class</summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.Distribution`1.Next(System.Random)">
      <summary>
            Gets a new random value for the underlying probability distribution.
            </summary>
      <param name="random">
            The random number generator. (Must not be <see langword="null" />.)
            </param>
      <returns>A random value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="random" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.Distribution`1.NextValue">
      <summary>
            Gets a new random value for the underlying probability distribution.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.Distribution`1.Random">
      <summary>
            Gets or sets the random number generator.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Statistics.FastGaussianDistributionD">
      <summary>
            Creates random values using an approximate Gaussian distribution (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.FastGaussianDistributionD.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.FastGaussianDistributionD" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.FastGaussianDistributionD.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF" /> class.
            </summary>
      <param name="expectedValue">The expected value.</param>
      <param name="standardDeviation">The standard deviation.</param>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.FastGaussianDistributionD.ExpectedValue">
      <summary>
            Gets or sets the expected value.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.FastGaussianDistributionD.Next(System.Random)">
      <summary>
            Gets a new random value for the underlying probability distribution.
            </summary>
      <param name="random">
            The random number generator. (Must not be <see langword="null" />.)
            </param>
      <returns>A random value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="random" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.FastGaussianDistributionD.StandardDeviation">
      <summary>
            Gets or sets the standard deviation.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF">
      <summary>
            Creates random values using an approximate Gaussian distribution (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF.#ctor(System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF" /> class.
            </summary>
      <param name="expectedValue">The expected value.</param>
      <param name="standardDeviation">The standard deviation.</param>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF.ExpectedValue">
      <summary>
            Gets or sets the expected value.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF.Next(System.Random)">
      <summary>
            Gets a new random value for the underlying probability distribution.
            </summary>
      <param name="random">
            The random number generator. (Must not be <see langword="null" />.)
            </param>
      <returns>A random value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="random" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF.StandardDeviation">
      <summary>
            Gets or sets the standard deviation.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Statistics.Int32UniformDistribution">
      <summary>
            Represents a uniform distribution that returns random <see cref="T:System.Int32" /> values for a given 
            interval [<see cref="P:DigitalRune.Mathematics.Statistics.Int32UniformDistribution.MinValue" />, <see cref="P:DigitalRune.Mathematics.Statistics.Int32UniformDistribution.MaxValue" />].
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.Int32UniformDistribution.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.Int32UniformDistribution" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.Int32UniformDistribution.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.Int32UniformDistribution" /> class.
            </summary>
      <param name="minValue">The minimum value.</param>
      <param name="maxValue">The maximum value.</param>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.Int32UniformDistribution.MaxValue">
      <summary>
            Gets or sets the maximum value.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.Int32UniformDistribution.MinValue">
      <summary>
            Gets or sets the minimum value.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.Int32UniformDistribution.Next(System.Random)">
      <summary>
            Gets a new random value for the underlying probability distribution.
            </summary>
      <param name="random">
            The random number generator. (Must not be <see langword="null" />.)
            </param>
      <returns>A random value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="random" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Statistics.LineSegmentDistribution">
      <summary>
            A distribution that returns random positions on a line segment.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.LineSegmentDistribution.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.LineSegmentDistribution" /> class</summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.LineSegmentDistribution.End">
      <summary>
            Gets or sets the end position of the line segment.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.LineSegmentDistribution.Next(System.Random)">
      <summary>
            Gets a new random value for the underlying probability distribution.
            </summary>
      <param name="random">
            The random number generator. (Must not be <see langword="null" />.)
            </param>
      <returns>A random value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="random" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.LineSegmentDistribution.Start">
      <summary>
            Gets or sets the start position of the line segment.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Statistics.PerlinNoise">
      <summary>
            Computes Improved Perlin Noise.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.PerlinNoise.Noise(System.Double,System.Double,System.Double)">
      <summary>
            Computes a 3d noise value for a 3d position given by (x, y, z).
            </summary>
      <param name="x">The x position.</param>
      <param name="y">The y position.</param>
      <param name="z">The z position.</param>
      <returns>The 3d noise value for the given position (x, y, z).</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.PerlinNoise.Noise(System.Double,System.Double,System.Double,System.Int32)">
      <summary>
            Computes a 3d noise value for a 3d position given by (x, y, z).
            </summary>
      <param name="x">The x position.</param>
      <param name="y">The y position.</param>
      <param name="z">The z position.</param>
      <param name="numberOfOctaves">The number of octaves.</param>
      <returns>
            The 3d noise value for the given position (x, y, z).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numberOfOctaves" /> is negative or 0.
            </exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Statistics.PrincipalComponentAnalysisD">
      <summary>
            Performs a Principal Component Analysis (PCA) using the covariance method (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.PrincipalComponentAnalysisD.#ctor(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.VectorD})">
      <summary>
            Creates the principal component analysis for the given list of points.
            </summary>
      <param name="points">
            The list of data points. All points must have the same <see cref="P:DigitalRune.Mathematics.Algebra.VectorD.NumberOfElements" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="points" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="points" /> is empty.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.PrincipalComponentAnalysisD.V">
      <summary>
            Gets the matrix of the principal components.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.PrincipalComponentAnalysisD.Variances">
      <summary>
            Gets the variances.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Statistics.PrincipalComponentAnalysisF">
      <summary>
            Performs a Principal Component Analysis (PCA) using the covariance method (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.PrincipalComponentAnalysisF.#ctor(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.VectorF})">
      <summary>
            Creates the principal component analysis for the given list of points.
            </summary>
      <param name="points">
            The list of data points. All points must have the same <see cref="P:DigitalRune.Mathematics.Algebra.VectorF.NumberOfElements" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="points" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="points" /> is empty.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.PrincipalComponentAnalysisF.V">
      <summary>
            Gets the matrix of the principal components.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.PrincipalComponentAnalysisF.Variances">
      <summary>
            Gets the variances.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Statistics.RandomHelper">
      <summary>
            A class to generate random values.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.Next``1(System.Random,DigitalRune.Mathematics.Statistics.Distribution{``0})">
      <summary>
            Gets a new random value for the specified probability distribution.
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <param name="distribution">The probability distribution.</param>
      <typeparam name="T">The type of the random value.</typeparam>
      <returns>A random value.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextBool(System.Random)">
      <summary>
            Gets a random boolean value.
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <returns>A random boolean value.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextByte(System.Random)">
      <summary>
            Gets a random byte value.
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <returns>A random byte value.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextDouble(System.Random,System.Double,System.Double)">
      <summary>
            Gets a random double value that lies in the interval [<paramref name="min" />, 
            <paramref name="max" />].
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <param name="min">The minimal allowed value.</param>
      <param name="max">The maximal allowed value.</param>
      <returns>A random double value within the bounds [min, max].</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextFloat(System.Random,System.Single,System.Single)">
      <summary>
            Gets a random float value that lies in the interval [<paramref name="min" />, 
            <paramref name="max" />].
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <param name="min">The minimal allowed value.</param>
      <param name="max">The maximal allowed value.</param>
      <returns>A random float value within the bounds [min, max].</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextInteger(System.Random,System.Int32,System.Int32)">
      <summary>
            Gets a random integer value that lies in the interval [<paramref name="min" />, 
            <paramref name="max" />].
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <param name="min">The minimal allowed value.</param>
      <param name="max">The maximal allowed value.</param>
      <returns>A random integer value within the bounds [min, max].</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextMatrix22D(System.Random,System.Double,System.Double)">
      <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D" />.
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <param name="min">The minimal allowed value for a matrix element.</param>
      <param name="max">The maximal allowed value for a matrix element.</param>
      <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D" />.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextMatrix22F(System.Random,System.Single,System.Single)">
      <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F" />.
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <param name="min">The minimal allowed value for a matrix element.</param>
      <param name="max">The maximal allowed value for a matrix element.</param>
      <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F" />.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextMatrix33D(System.Random,System.Double,System.Double)">
      <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D" />.
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <param name="min">The minimal allowed value for a matrix element.</param>
      <param name="max">The maximal allowed value for a matrix element.</param>
      <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D" />.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextMatrix33F(System.Random,System.Single,System.Single)">
      <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F" />.
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <param name="min">The minimal allowed value for a matrix element.</param>
      <param name="max">The maximal allowed value for a matrix element.</param>
      <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F" />.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextMatrix44D(System.Random,System.Double,System.Double)">
      <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" />.
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <param name="min">The minimal allowed value for a matrix element.</param>
      <param name="max">The maximal allowed value for a matrix element.</param>
      <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D" />.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextMatrix44F(System.Random,System.Single,System.Single)">
      <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" />.
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <param name="min">The minimal allowed value for a matrix element.</param>
      <param name="max">The maximal allowed value for a matrix element.</param>
      <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" />.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextMatrixD(System.Random,DigitalRune.Mathematics.Algebra.MatrixD,System.Double,System.Double)">
      <summary>
            Fills a <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD" /> with random values.
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <param name="matrix">The matrix that is filled with random values.</param>
      <param name="min">The minimal allowed value for a matrix element.</param>
      <param name="max">The maximal allowed value for a matrix element.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextMatrixF(System.Random,DigitalRune.Mathematics.Algebra.MatrixF,System.Single,System.Single)">
      <summary>
            Fills a <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" /> with random values.
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <param name="matrix">The matrix that is filled with random values.</param>
      <param name="min">The minimal allowed value for a matrix element.</param>
      <param name="max">The maximal allowed value for a matrix element.</param>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextQuaternionD(System.Random)">
      <summary>
            Gets a random unit <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" />.
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <returns>A random unit <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD" />;.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextQuaternionF(System.Random)">
      <summary>
            Gets a random unit <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" />.
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <returns>A random unit <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF" />.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextVector2D(System.Random,System.Double,System.Double)">
      <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" />.
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <param name="min">The minimal allowed value for a vector element.</param>
      <param name="max">The maximal allowed value for a vector element.</param>
      <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D" />.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextVector2F(System.Random,System.Single,System.Single)">
      <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />.
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <param name="min">The minimal allowed value for a vector element.</param>
      <param name="max">The maximal allowed value for a vector element.</param>
      <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextVector3D(System.Random,System.Double,System.Double)">
      <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" />.
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <param name="min">The minimal allowed value for a vector element.</param>
      <param name="max">The maximal allowed value for a vector element.</param>
      <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D" />.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextVector3F(System.Random,System.Single,System.Single)">
      <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <param name="min">The minimal allowed value for a vector element.</param>
      <param name="max">The maximal allowed value for a vector element.</param>
      <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextVector4D(System.Random,System.Double,System.Double)">
      <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" />.
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <param name="min">The minimal allowed value for a vector element.</param>
      <param name="max">The maximal allowed value for a vector element.</param>
      <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D" />.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextVector4F(System.Random,System.Single,System.Single)">
      <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <param name="min">The minimal allowed value for a vector element.</param>
      <param name="max">The maximal allowed value for a vector element.</param>
      <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextVectorD(System.Random,DigitalRune.Mathematics.Algebra.VectorD,System.Double,System.Double)">
      <summary>
            Fills a <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" /> with random values.
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <param name="vector">The vector that should be filled with random values.</param>
      <param name="min">The minimal allowed value for a vector element.</param>
      <param name="max">The maximal allowed value for a vector element.</param>
      <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.VectorD" />.</returns>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextVectorF(System.Random,DigitalRune.Mathematics.Algebra.VectorF,System.Single,System.Single)">
      <summary>
            Fills a <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" /> with random values.
            </summary>
      <param name="random">
            The random number generator. If this parameter is <see langword="null" />, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random" />) is used.
            </param>
      <param name="vector">The vector that should be filled with random values.</param>
      <param name="min">The minimal allowed value for a vector element.</param>
      <param name="max">The maximal allowed value for a vector element.</param>
      <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.VectorF" />.</returns>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random">
      <summary>
            Gets or sets the default random number generator.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The property is set <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Statistics.SphereDistribution">
      <summary>
            A distribution that returns random positions from a spherical volume.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.SphereDistribution.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.SphereDistribution" /> class</summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.SphereDistribution.Center">
      <summary>
            Gets or sets the center of the sphere.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.SphereDistribution.InnerRadius">
      <summary>
            Gets or sets the inner radius of the sphere.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.</exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.SphereDistribution.Next(System.Random)">
      <summary>
            Gets a new random value for the underlying probability distribution.
            </summary>
      <param name="random">
            The random number generator. (Must not be <see langword="null" />.)
            </param>
      <returns>A random value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="random" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.SphereDistribution.OuterRadius">
      <summary>
            Gets or sets the outer radius of the circle.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.</exception>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.SphereDistribution.Scale">
      <summary>
            Gets or sets the scale factors that are multiplied to the random position.
            </summary>
    </member>
    <member name="T:DigitalRune.Mathematics.Statistics.StatisticsHelper">
      <summary>
            Provides helper methods for statistical tasks.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.StatisticsHelper.ComputeCovarianceMatrix(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3D})">
      <summary>
            Computes the covariance matrix for a list of 3-dimensional points (double-precision).
            </summary>
      <param name="points">The points.</param>
      <returns>The covariance matrix.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="points" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.StatisticsHelper.ComputeCovarianceMatrix(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F})">
      <summary>
            Computes the covariance matrix for a list of 3-dimensional points (single-precision).
            </summary>
      <param name="points">The points.</param>
      <returns>The covariance matrix.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="points" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.StatisticsHelper.ComputeCovarianceMatrix(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.VectorD})">
      <summary>
            Computes the covariance matrix for a list of n-dimensional points (double-precision).
            </summary>
      <param name="points">
            The points. All points must have the same <see cref="P:DigitalRune.Mathematics.Algebra.VectorF.NumberOfElements" />.
            </param>
      <returns>The covariance matrix.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="points" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="points" /> is empty.
            </exception>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.StatisticsHelper.ComputeCovarianceMatrix(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.VectorF})">
      <summary>
            Computes the covariance matrix for a list of n-dimensional points (single-precision).
            </summary>
      <param name="points">
            The points. All points must have the same <see cref="P:DigitalRune.Mathematics.Algebra.VectorF.NumberOfElements" />.
            </param>
      <returns>The covariance matrix.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="points" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="points" /> is empty.
            </exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Statistics.UniformDistributionD">
      <summary>
            Represents a uniform distribution that returns random values for a given interval 
            [<see cref="P:DigitalRune.Mathematics.Statistics.UniformDistributionD.MinValue" />, <see cref="P:DigitalRune.Mathematics.Statistics.UniformDistributionD.MaxValue" />] (double-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.UniformDistributionD.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.UniformDistributionD" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.UniformDistributionD.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.UniformDistributionD" /> class.
            </summary>
      <param name="minValue">The minimum value.</param>
      <param name="maxValue">The maximum value.</param>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.UniformDistributionD.MaxValue">
      <summary>
            Gets or sets the maximum value.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.UniformDistributionD.MinValue">
      <summary>
            Gets or sets the minimum value.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.UniformDistributionD.Next(System.Random)">
      <summary>
            Gets a new random value for the underlying probability distribution.
            </summary>
      <param name="random">
            The random number generator. (Must not be <see langword="null" />.)
            </param>
      <returns>A random value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="random" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Mathematics.Statistics.UniformDistributionF">
      <summary>
            Represents a uniform distribution that returns random values for a given 
            interval [<see cref="P:DigitalRune.Mathematics.Statistics.UniformDistributionF.MinValue" />, <see cref="P:DigitalRune.Mathematics.Statistics.UniformDistributionF.MaxValue" />] (single-precision).
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.UniformDistributionF.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.UniformDistributionF" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.UniformDistributionF.#ctor(System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.UniformDistributionF" /> class.
            </summary>
      <param name="minValue">The minimum value.</param>
      <param name="maxValue">The maximum value.</param>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.UniformDistributionF.MaxValue">
      <summary>
            Gets or sets the maximum value.
            </summary>
    </member>
    <member name="P:DigitalRune.Mathematics.Statistics.UniformDistributionF.MinValue">
      <summary>
            Gets or sets the minimum value.
            </summary>
    </member>
    <member name="M:DigitalRune.Mathematics.Statistics.UniformDistributionF.Next(System.Random)">
      <summary>
            Gets a new random value for the underlying probability distribution.
            </summary>
      <param name="random">
            The random number generator. (Must not be <see langword="null" />.)
            </param>
      <returns>A random value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="random" /> is <see langword="null" />.
            </exception>
    </member>
  </members>
</doc>