<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>DigitalRune.Graphics</name>
  </assembly>
  <members>
    <member name="T:DigitalRune.Graphics.AmbientLight">
      <summary>
            Represents an ambient light (indirect light).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.AmbientLight.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.AmbientLight" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.AmbientLight.CloneCore(DigitalRune.Graphics.Light)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Light" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.AmbientLight.Color">
      <summary>
            Gets or sets the RGB color of the light.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.AmbientLight.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Light" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.AmbientLight.GetLightIntensityAt(System.Single)">
      <summary>
            Gets the (approximated) light intensity at the given distance.
            </summary>
      <param name="distance">The distance from the light.</param>
      <returns>
            A value representing the (red, green and blue) light intensity at 
            the specified distance. 
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.AmbientLight.HdrScale">
      <summary>
            Gets or sets the HDR scale of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.AmbientLight.HemisphericAttenuation">
      <summary>
            Gets or sets the hemispheric attenuation factor.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.AmbientLight.Intensity">
      <summary>
            Gets or sets the intensity of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.AmbientLight.Shape">
      <summary>
            Gets or sets the shape of the light volume.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Camera">
      <summary>
            Represents a camera that defines a view into the 3D scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Camera.#ctor(DigitalRune.Graphics.Projection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Camera" /> class with a given projection.
            </summary>
      <param name="projection">The projection.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Camera.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Camera" /> that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Camera" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Camera.CloneCore(DigitalRune.Graphics.Camera)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Camera" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Camera.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Camera" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Camera.LastProjection">
      <summary>
            Gets or sets the projection transformation of the last frame.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Camera.Name">
      <summary>
            Gets or sets the name of this camera.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Camera.Projection">
      <summary>
            Gets the projection.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Camera.System#ICloneable#Clone">
      <summary>
            Creates a new object that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new object that is a clone (deep copy) of this instance.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.DebugRenderer">
      <summary>
            Provides methods to render debug information.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.SpriteFont)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.DebugRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="spriteFont">The sprite font.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.DebugRenderer.ArrowHeadSize">
      <summary>
            Gets or sets the size of the arrow head (relative to the arrow length).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.Clear">
      <summary>
            Clears the debug renderer (removes all draw jobs).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.DebugRenderer.DefaultColor">
      <summary>
            Gets or sets the default color that is used if no color is explicitly specified.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.DebugRenderer.DefaultTextPosition">
      <summary>
            Gets or sets the default text position.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawAabb(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean)">
      <summary>
            Draws an axis-aligned bounding-box (AABB). Wire-frame only.
            </summary>
      <param name="aabb">The axis-aligned bounding box.</param>
      <param name="pose">The pose of the AABB.</param>
      <param name="color">The color.</param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene 
            (depth-test disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawAabbs(System.Collections.Generic.IEnumerable{DigitalRune.Geometry.IGeometricObject},System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean)">
      <summary>
            Draws the axis-aligned bounding-boxes (AABBs) of a collection of geometries.
            </summary>
      <param name="geometricObjects">The geometric objects.</param>
      <param name="color">
            The color. If this parameter is <see langword="null" />, each AABB is drawn with a unique 
            color.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawArrow(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean)">
      <summary>
            Draws an arrow pointing from <paramref name="start" /> to <paramref name="end" />.
            </summary>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <param name="color">The color.</param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawAxes(DigitalRune.Geometry.Pose,System.Single,System.Boolean)">
      <summary>
            Draws 3 axes for a coordinate cross.
            </summary>
      <param name="pose">The pose (position and orientation).</param>
      <param name="size">The size in world space.</param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawBox(System.Single,System.Single,System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a box.
            </summary>
      <param name="widthX">The x-size of the box.</param>
      <param name="widthY">The y-size of the box.</param>
      <param name="widthZ">The z-size of the box.</param>
      <param name="pose">The pose.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawCapsule(System.Single,System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a capsule that is centered at the local origin and parallel to the local y axis.
            </summary>
      <param name="radius">The radius of the capsule.</param>
      <param name="height">The total height of the capsule.</param>
      <param name="pose">The pose of the sphere in world space.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawCone(System.Single,System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a cone with the base on the local xz plane pointing up into the local +y direction.
            </summary>
      <param name="radius">The radius of the cone.</param>
      <param name="height">The total height of the cone.</param>
      <param name="pose">The pose of the sphere in world space.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawContact(DigitalRune.Geometry.Collisions.Contact,System.Single,Microsoft.Xna.Framework.Color,System.Boolean)">
      <summary>
            Draws a contact.
            </summary>
      <param name="contact">The contact.</param>
      <param name="normalLength">The length of the normal vector in world space.</param>
      <param name="color">The color.</param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawContacts(DigitalRune.Geometry.Collisions.ContactSet,System.Single,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean)">
      <summary>
            Draws contacts.
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="normalLength">The length of the normal vector in world space.</param>
      <param name="color">
            The color. If this parameter is <see langword="null" />, each contact is drawn with a unique 
            color.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawContacts(DigitalRune.Geometry.Collisions.ContactSetCollection,System.Single,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean)">
      <summary>
            Draws contacts.
            </summary>
      <param name="contactSets">The contact sets.</param>
      <param name="normalLength">The length of the normal vector in world space.</param>
      <param name="color">
            The color. If this parameter is <see langword="null" />, each contact is drawn with a unique 
            color.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawCylinder(System.Single,System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a cylinder that is centered at the local origin and parallel to the local y axis.
            </summary>
      <param name="radius">The radius of the cylinder.</param>
      <param name="height">The total height of the cylinder.</param>
      <param name="pose">The pose of the sphere in world space.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawLine(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean)">
      <summary>
            Draws a line.
            </summary>
      <param name="start">The start position in world space.</param>
      <param name="end">The end position in world space.</param>
      <param name="color">The color.</param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawModel(Microsoft.Xna.Framework.Graphics.Model,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a model (without textures).
            </summary>
      <param name="model">The model.</param>
      <param name="pose">The pose.</param>
      <param name="scale">The scale.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawObject(DigitalRune.Geometry.IGeometricObject,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a geometric object.
            </summary>
      <param name="geometricObject">The geometric object.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawObjects(System.Collections.Generic.IEnumerable{DigitalRune.Geometry.IGeometricObject},System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Boolean)">
      <summary>
            Draws geometric objects.
            </summary>
      <param name="geometricObjects">The geometric objects.</param>
      <param name="color">
            The color. If this parameter is <see langword="null" />, each geometric object is drawn with 
            a unique color.
            </param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawPoint(DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean)">
      <summary>
            Draws a point.
            </summary>
      <param name="position">The position in world space.</param>
      <param name="color">The color.</param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawShape(DigitalRune.Geometry.Shapes.Shape,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a geometric object.
            </summary>
      <param name="shape">The shape.</param>
      <param name="pose">The pose.</param>
      <param name="scale">The scale.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawSphere(System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a sphere.
            </summary>
      <param name="radius">The radius of the sphere.</param>
      <param name="pose">The pose of the sphere in world space.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawText(System.String)">
      <summary>
            Draws the text to the screen.
            </summary>
      <param name="text">The text.</param>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawText(System.String,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Color)">
      <summary>
            Draws a text on a 2D position in screen space.
            </summary>
      <param name="text">The text.</param>
      <param name="position">The position in screen space (measured in pixels).</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawText(System.String,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean)">
      <summary>
            Draws a text on a 3D position in world space.
            </summary>
      <param name="text">The text.</param>
      <param name="position">The position in world space.</param>
      <param name="color">The color.</param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawText(System.Text.StringBuilder)">
      <summary>
            Draws the text to the screen.
            </summary>
      <param name="text">The text.</param>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawText(System.Text.StringBuilder,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Color)">
      <summary>
            Draws a text on a 2D position in screen space.
            </summary>
      <param name="text">The text.</param>
      <param name="position">The position in screen space (measured in pixels).</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawText(System.Text.StringBuilder,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean)">
      <summary>
            Draws a text on a 3D position in world space.
            </summary>
      <param name="text">The text.</param>
      <param name="position">The position in world space.</param>
      <param name="color">The color.</param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawTexture(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle)">
      <summary>
            Draws a texture.
            </summary>
      <param name="texture">The texture.</param>
      <param name="rectangle">The destination rectangle in screen space.</param>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawViewVolume(DigitalRune.Geometry.Shapes.ViewVolume,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a view volume (viewing frustum).
            </summary>
      <param name="viewVolume">The view volume.</param>
      <param name="pose">The pose.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.DrawViewVolume(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a view volume (viewing frustum).
            </summary>
      <param name="left">The minimum x-value of the view volume at the near clip plane.</param>
      <param name="right">The maximum x-value of the view volume at the near clip plane.</param>
      <param name="bottom">The minimum y-value of the view volume at the near clip plane.</param>
      <param name="top">The maximum y-value of the view volume at the near clip plane.</param>
      <param name="near">The distance to the near clip plane.</param>
      <param name="far">The distance to the far clip plane.</param>
      <param name="pose">The pose.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.DebugRenderer.Effect">
      <summary>
            Gets or sets the effect used for rendering.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.DebugRenderer.Enabled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:DigitalRune.Graphics.DebugRenderer" /> is enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.DebugRenderer.GraphicsService">
      <summary>
            Gets or sets the graphics service.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.DebugRenderer.PointSize">
      <summary>
            Gets or sets the size of drawn points.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.Render(DigitalRune.Graphics.RenderContext)">
      <summary>
            Draws the debug information.
            </summary>
      <param name="context">The render context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.DebugRenderer.SpriteFont">
      <summary>
            Gets or sets the sprite font.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.DebugRenderer.Update(System.TimeSpan)">
      <summary>
            Updates the debug renderer.
            </summary>
      <param name="deltaTime">The elapsed time since the last update.</param>
    </member>
    <member name="T:DigitalRune.Graphics.DelegateGraphicsScreen">
      <summary>
            A <see cref="T:DigitalRune.Graphics.GraphicsScreen" /> that calls user-defined methods to update and render the 
            screen.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.DelegateGraphicsScreen.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.DelegateGraphicsScreen" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
    </member>
    <member name="M:DigitalRune.Graphics.DelegateGraphicsScreen.OnRender(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when <see cref="M:DigitalRune.Graphics.GraphicsScreen.Render(DigitalRune.Graphics.RenderContext)" /> is called.
            </summary>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.DelegateGraphicsScreen.OnUpdate(System.TimeSpan)">
      <summary>
            Called when <see cref="M:DigitalRune.Graphics.GraphicsScreen.Update(System.TimeSpan)" /> is called.
            </summary>
      <param name="deltaTime">The time that has elapsed since the last update.</param>
    </member>
    <member name="P:DigitalRune.Graphics.DelegateGraphicsScreen.RenderCallback">
      <summary>
            Gets or sets the render callback method.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.DelegateGraphicsScreen.UpdateCallback">
      <summary>
            Gets or sets the update callback method.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.DirectionalLight">
      <summary>
            Represents a directional light.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.DirectionalLight.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.DirectionalLight" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.DirectionalLight.CloneCore(DigitalRune.Graphics.Light)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Light" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.DirectionalLight.Color">
      <summary>
            Gets or sets the RGB color of the light.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.DirectionalLight.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Light" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.DirectionalLight.DiffuseIntensity">
      <summary>
            Gets or sets the diffuse intensity of the light.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.DirectionalLight.GetLightIntensityAt(System.Single)">
      <summary>
            Gets the (approximated) light intensity at the given distance.
            </summary>
      <param name="distance">The distance from the light.</param>
      <returns>
            A value representing the (red, green and blue) light intensity at 
            the specified distance. 
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.DirectionalLight.HdrScale">
      <summary>
            Gets or sets the HDR scale of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.DirectionalLight.Shape">
      <summary>
            Gets or sets the shape of the light volume.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.DirectionalLight.SpecularIntensity">
      <summary>
            Gets or sets the specular intensity of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.DirectionalLight.Texture">
      <summary>
            Gets or sets the texture which is projected by this directional light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.DirectionalLight.TextureOffset">
      <summary>
            Gets or sets the texture offset.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.DirectionalLight.TextureScale">
      <summary>
            Gets or sets the texture scale.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.FullScreenQuadRenderer">
      <summary>
            Renders a texture to the screen (using a full-screen screen-aligned quad).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.FullScreenQuadRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.FullScreenQuadRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
    </member>
    <member name="M:DigitalRune.Graphics.FullScreenQuadRenderer.Render(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.BlendState,DigitalRune.Graphics.RenderContext)">
      <summary>
            Renders the specified texture.
            </summary>
      <param name="texture">The 2D texture.</param>
      <param name="blendState">The <see cref="T:Microsoft.Xna.Framework.Graphics.BlendState" /> that shoud be used.</param>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.GraphicsException">
      <summary>
            The exception that is raised when an error occurs in DigitalRune Graphics.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsException" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsException" /> class with serialized 
            data.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the 
            exception being thrown.
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or 
            destination.
            </param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is <see langword="null" />.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsException" /> class with a specified 
            error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsException" /> class with a specified 
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">
            The exception that is the cause of the current exception, or <see langword="null" /> if no 
            inner exception is specified.
            </param>
    </member>
    <member name="T:DigitalRune.Graphics.GraphicsHelper">
      <summary>
            Provides helper methods for graphics-related tasks.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.BlendStateAdd">
      <summary>
            A default state object for additive blending (colors and alpha values are accumulated).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.BlendStateMultiply">
      <summary>
            A default state object for multiplicative blending (colors and alpha values are multiplied).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.BlendStateNoColorWrite">
      <summary>
            A default state object for disabled color writes.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.BlendStateWriteAlpha">
      <summary>
            A default state object for color writes in the alpha channel.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.BlendStateWriteBlue">
      <summary>
            A default state object for color writes in the blue channel.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.BlendStateWriteGreen">
      <summary>
            A default state object for color writes in the green channel.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.BlendStateWriteRed">
      <summary>
            A default state object for color writes in the red channel.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.DepthStencilStateAlways">
      <summary>
            A default state object for enabled depth buffer writes and a disabled depth buffer test.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.DepthStencilStateNoWriteEqual">
      <summary>
            A default state object for disabled depth buffer writes and a depth buffer function of 
            "Equal".
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.DepthStencilStateNoWriteGreater">
      <summary>
            A default state object for disabled depth buffer writes and a depth buffer function of 
            "Greater".
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.DepthStencilStateNoWriteGreaterEqual">
      <summary>
            A default state object for disabled depth buffer writes and a depth buffer function of 
            "GreaterEqual".
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.DepthStencilStateNoWriteLessEqual">
      <summary>
            A default state object for disabled depth buffer writes and a depth buffer function of 
            "LessEqual".
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.DrawFullScreenQuad(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>
            Draws a full-screen quad.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.DrawQuad(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.VertexPositionTexture,Microsoft.Xna.Framework.Graphics.VertexPositionTexture)">
      <summary>
            Draws a screen-aligned quad.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="topLeft">The top left vertex.</param>
      <param name="bottomRight">The bottom right vertex.</param>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.DrawQuad(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Rectangle)">
      <summary>
            Draws a screen-aligned quad.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="rectangle">
            The rectangle describing vertex positions of the quad. (This can be in pixels or in
            another unit depending on the current vertex shader.)
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.DrawQuad(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Rectangle,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Draws a screen-aligned quad.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="rectangle">
            The rectangle describing vertex positions of the quad. (This can be in pixels or in
            another unit depending on the current vertex shader.)
            </param>
      <param name="texCoordTopLeft">
            The texture coordinates of the top left vertex of the quad.
            </param>
      <param name="texCoordBottomRight">
            The texture coordinates of the bottom right vertex of the quad.</param>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.GetAngularAttenuation(System.Single,System.Single,System.Single)">
      <summary>
            Computes the angular attenuation (spotlight falloff) for a given angle.
            </summary>
      <param name="angle">The angle relative to the main light direction in radians.</param>
      <param name="falloffAngle">The falloff angle.</param>
      <param name="cutoffAngle">The cutoff angle.</param>
      <returns>
            The angular attenuation of the light intensity. (1 when <paramref name="angle" /> is less 
            than or equal to <paramref name="falloffAngle" />. 0 when <paramref name="angle" /> is 
            greater than or equal to <paramref name="cutoffAngle" />.)
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.GetDistanceAttenuation(System.Single,System.Single,System.Single)">
      <summary>
            Computes the light attenuation factor for a given distance.
            </summary>
      <param name="distance">The distance to the light's origin.</param>
      <param name="range">The range of the light.</param>
      <param name="exponent">The falloff exponent.</param>
      <returns>The light attenuation factor.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.GetFrustumFarCorners(DigitalRune.Graphics.Projection,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Vector3[])">
      <summary>
            Gets the view space positions of the 4 far corners of a quad at the far plane of the viewing
            frustum.
            </summary>
      <param name="projection">The projection.</param>
      <param name="topLeftTexCoord">The top left texture coordinate.</param>
      <param name="bottomRightTexCoord">The bottom right texture coordinate.</param>
      <param name="frustumFarCorners">
            A 4 element array that will be initialized with the frustum far corners.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.GetFrustumFarCorners(DigitalRune.Graphics.Projection,Microsoft.Xna.Framework.Vector3[])">
      <summary>
            Gets the view space positions of the 4 far corners of the viewing frustum.
            </summary>
      <param name="projection">The projection.</param>
      <param name="frustumFarCorners">
            A 4 element array that will be initialized with the frustum far corners.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.GetLightContribution(DigitalRune.Graphics.SceneGraph.LightInstance,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
      <summary>
            Gets a factor that is an approximation of the perceived light contribution of the given 
            light falling on an object at the given world space position.
            </summary>
      <param name="lightInstance">The light instance.</param>
      <param name="position">The position in world space.</param>
      <param name="chromacityWeight">
            The weight that determines how important chromacity is compared to the uncolored light 
            intensity, ranging from 0 (not important) to 1 very important. Chromacity is the color bias 
            of a light. For example, 0.7 is a good value for this parameter.
            </param>
      <returns>
            A value that is proportional to the perceived contribution of the light. If the value is
            high, then the light instance is important for the scene.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lightInstance" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.GetScissorRectangle(DigitalRune.Graphics.SceneGraph.CameraInstance,Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Geometry.IGeometricObject)">
      <summary>
            Gets a scissor rectangle that encloses the specified geometric object.
            </summary>
      <param name="cameraInstance">The camera instance.</param>
      <param name="viewport">The viewport.</param>
      <param name="geometricObject">The geometric object.</param>
      <returns>The scissor rectangle.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.GetScissorRectangle(DigitalRune.Graphics.SceneGraph.CameraInstance,Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
      <summary>
            Gets a scissor rectangle that encloses the specified sphere.
            </summary>
      <param name="cameraInstance">The camera instance.</param>
      <param name="viewport">The viewport.</param>
      <param name="positionWorld">The sphere center in world space.</param>
      <param name="radius">The sphere radius.</param>
      <returns>The scissor rectangle.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.GetUniqueColor(System.Object)">
      <summary>
            Gets a unique color for an object.
            </summary>
      <param name="obj">The object.</param>
      <returns>A unique color.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.Project(Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Projects a position from world space into screen space.
            </summary>
      <param name="viewport">The viewport.</param>
      <param name="position">The position in world space.</param>
      <param name="projection">The projection matrix.</param>
      <param name="view">The view matrix.</param>
      <returns>
            The position in screen space: The x- and y-components define the pixel position. The 
            z-component defines the depth in clip space. (The depth of the clipping volume ranges from 
            <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth" /> to <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth" /> - usually [0, 1].)
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.Project(Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Projects a position from object space into screen space.
            </summary>
      <param name="viewport">The viewport.</param>
      <param name="position">The position in object space.</param>
      <param name="projection">The projection matrix.</param>
      <param name="view">The view matrix.</param>
      <param name="world">The world matrix.</param>
      <returns>
            The position in screen space: The x- and y-components define the pixel position. The 
            z-component defines the depth in clip space. (The depth of the clipping volume ranges from 
            <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth" /> to <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth" /> - usually [0, 1].)
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.ResetTextures(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>
            Sets the textures of all samplers to <see langword="null" />.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.SetRenderTargetAndViewport(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.RenderTarget2D,Microsoft.Xna.Framework.Graphics.Viewport)">
      <summary>
            Sets the render target and the viewport.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="target">
            The render target, or <see langword="null" /> to render into the back buffer.
            </param>
      <param name="viewport">The viewport for rendering into the back buffer.</param>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.TakeScreenshot(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>
            Creates a texture containing the content of the current back buffer.
            (Only available in the HiDef profile.)
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <returns>A texture with content of the back buffer.</returns>
      <exception cref="T:System.NotSupportedException">
            The current graphics profile is "Reach".
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.Unproject(Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Projects a position from screen space into world space.
            </summary>
      <param name="viewport">The <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport" />.</param>
      <param name="position">
            The position in screen space: The x- and y-components define the pixel position. The 
            z-component defines the depth in clip space. (The depth of the clipping volume ranges from 
            <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth" /> to <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth" /> - usually [0, 1].)
            </param>
      <param name="projection">The projection matrix.</param>
      <param name="view">The view matrix.</param>
      <returns>The position in world space.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.Unproject(Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Projects a position from screen space into object space.
            </summary>
      <param name="viewport">The <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport" />.</param>
      <param name="position">
            The position in screen space: The x- and y-components define the pixel position. The 
            z-component defines the depth in clip space. (The depth of the clipping volume ranges from 
            <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth" /> to <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth" /> - usually [0, 1].)
            </param>
      <param name="projection">The projection matrix.</param>
      <param name="view">The view matrix.</param>
      <param name="world">The world matrix.</param>
      <returns>The position in object space.</returns>
    </member>
    <member name="T:DigitalRune.Graphics.GraphicsManager">
      <summary>
            Manages graphics-related objects, like graphics screens and presentation targets, and graphics
            resources.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsManager.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsManager" /> class.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="content">
            The content manager that can be used to load predefined DigitalRune Graphics content
            (e.g. post-processing effects, lookup textures, etc.).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsManager.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.GameWindow,Microsoft.Xna.Framework.Content.ContentManager)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsManager" /> class.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="gameWindow">
            The game window in Windows. <see langword="null" /> on non-Windows platforms (Xbox 360, 
            Windows Phone 7, etc.).
            </param>
      <param name="content">
            The content manager that can be used to load predefined DigitalRune Graphics content (e.g. 
            post-processing effects, lookup textures, etc.).
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsManager.Content">
      <summary>
            Gets the content manager that can be used to load predefined DigitalRune Graphics content
            (e.g. predefined shaders, post-processing effects, lookup textures, etc.).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsManager.CreateRenderContext">
      <summary>
            Creates a new render context.
            </summary>
      <returns>The render context.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsManager.Data">
      <summary>
            Gets custom data associated with this graphics service or the graphics device.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsManager.EffectBinders">
      <summary>
            Gets or sets the effect binders.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsManager.EffectInterpreters">
      <summary>
            Gets or sets the effect interpreters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsManager.GameForm">
      <summary>
            Gets the main <see cref="T:System.Windows.Forms.Form" /> (main window) of the <see cref="T:Microsoft.Xna.Framework.Game" />. (Only available in
            Windows. Not available on these platforms: Silverlight, Windows Phone 7, Xbox 360.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsManager.GraphicsDevice">
      <summary>
            Gets the graphics device.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsManager.Present(DigitalRune.Graphics.Interop.IPresentationTarget)">
      <summary>
            Presents the current back buffer target into the specified presentation target.
            </summary>
      <param name="presentationTarget">The presentation target.</param>
      <returns>
        <see langword="true" /> if the back buffer was presented successfully; 
            <see langword="false" /> if the operation was skipped because the presentation target is 
            currently not visible or invalid.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="presentationTarget" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsManager.PresentationTargets">
      <summary>
            A collection of all presentation targets. (Only available in Windows. Not available on these
            platforms: Silverlight, Windows Phone 7, Xbox 360.)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsManager.Render(DigitalRune.Graphics.Interop.IPresentationTarget)">
      <summary>
            Renders the graphics screens to the back buffer and presents the result into the given 
            presentation target.
            </summary>
      <param name="presentationTarget">The presentation target.</param>
      <returns>
        <see langword="true" /> if the graphics screens where rendered; <see langword="false" /> if 
            rendering was skipped because the presentation target is currently not visible or invalid.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="presentationTarget" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsManager.Render(System.Boolean)">
      <summary>
            Renders the graphics screens to the back buffer.
            </summary>
      <param name="forceRendering">
            If set to <see langword="true" /> the screens are rendered even if the game window is
            currently hidden. If set to <see langword="false" />, the rendering is skipped if the game 
            window is currently not visible.
            </param>
      <returns>
        <see langword="true" /> if the graphics screens were rendered; <see langword="false" /> if 
            rendering was skipped because the game window is currently not visible.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsManager.RenderTargetPool">
      <summary>
            Gets or sets the render target pool.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsManager.Screens">
      <summary>
            Gets or sets the graphics screens.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsManager.Update(System.TimeSpan)">
      <summary>
            Updates the graphics screens.
            </summary>
      <param name="deltaTime">The elapsed time since the last update.</param>
    </member>
    <member name="T:DigitalRune.Graphics.GraphicsScreen">
      <summary>
            Provides the base class for graphics screens, which implement the rendering pipeline and draw 
            game content.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsScreen.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsScreen" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsScreen.Coverage">
      <summary>
            Gets or sets a value indicating whether the screen covers the entire view or only a part of 
            it.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsScreen.GraphicsService">
      <summary>
            Gets the graphics service.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsScreen.IsVisible">
      <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsScreen.Name">
      <summary>
            Gets or sets the name of this graphics screen.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsScreen.OnRender(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when <see cref="M:DigitalRune.Graphics.GraphicsScreen.Render(DigitalRune.Graphics.RenderContext)" /> is called.
            </summary>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsScreen.OnUpdate(System.TimeSpan)">
      <summary>
            Called when <see cref="M:DigitalRune.Graphics.GraphicsScreen.Update(System.TimeSpan)" /> is called.
            </summary>
      <param name="deltaTime">The time that has elapsed since the last update.</param>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsScreen.Render(DigitalRune.Graphics.RenderContext)">
      <summary>
            Renders the graphics screen.
            </summary>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsScreen.RenderPreviousScreensToTexture">
      <summary>
            Gets or sets a value indicating whether the previous graphics screens should render into an
            offscreen render target.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsScreen.SourceTextureFormat">
      <summary>
            Gets or sets the source texture format.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsScreen.Update(System.TimeSpan)">
      <summary>
            Updates the state of the graphics screen.
            </summary>
      <param name="deltaTime">The time that has elapsed since the last update.</param>
    </member>
    <member name="T:DigitalRune.Graphics.GraphicsScreenCollection">
      <summary>
            Manages a collection of <see cref="T:DigitalRune.Graphics.GraphicsScreen" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsScreenCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsScreenCollection" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsScreenCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:DigitalRune.Graphics.GraphicsScreen" /> with the specified name.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.GraphicsScreenCoverage">
      <summary>
            Defines whether a <see cref="T:DigitalRune.Graphics.GraphicsScreen" /> covers the screens behind it.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsScreenCoverage.Partial">
      <summary>
            The <see cref="T:DigitalRune.Graphics.GraphicsScreen" /> does not cover the entire view. (The screen draws only to 
            a certain regions or some pixels are transparent). Screens in the background are partially 
            visible.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsScreenCoverage.Full">
      <summary>
            The <see cref="T:DigitalRune.Graphics.GraphicsScreen" /> is fully opaque and covers the entire view. Screens in the 
            background are completely hidden.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.IGraphicsService">
      <summary>
            Manages graphics-related objects, like graphics screens and presentation targets, and 
            graphics resources.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.IGraphicsService.Content">
      <summary>
            Gets the content manager that can be used to load predefined DigitalRune Graphics content
            (e.g. predefined shaders, post-processing effects, lookup textures, etc.).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.IGraphicsService.Data">
      <summary>
            Gets custom data associated with this graphics service or the graphics device.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.IGraphicsService.EffectBinders">
      <summary>
            Gets or sets the effect binders.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.IGraphicsService.EffectInterpreters">
      <summary>
            Gets or sets the effect interpreters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.IGraphicsService.GameForm">
      <summary>
            Gets the main <see cref="T:System.Windows.Forms.Form" /> (main window) of the <see cref="T:Microsoft.Xna.Framework.Game" />. (Only available in
            Windows. Not available on these platforms: Silverlight, Windows Phone 7, Xbox 360.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.IGraphicsService.GraphicsDevice">
      <summary>
            Gets the graphics device.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.IGraphicsService.PresentationTargets">
      <summary>
            A collection of all presentation targets. (Only available in Windows. Not available on these
            platforms: Silverlight, Windows Phone 7, Xbox 360.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.IGraphicsService.RenderTargetPool">
      <summary>
            Gets or sets the render target pool.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.IGraphicsService.Screens">
      <summary>
            Gets or sets the graphics screens.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.IRenderable">
      <summary>
            Represents an object that can be drawn.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.IRenderable.Render(DigitalRune.Graphics.RenderContext)">
      <summary>
            Draws the object.
            </summary>
      <param name="context">The render context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Light">
      <summary>
            Defines the properties of a light source.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Light.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Light" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Light.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Light" /> that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Light" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Light.CloneCore(DigitalRune.Graphics.Light)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Light" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Light.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Light" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Light.GetLightIntensityAt(System.Single)">
      <summary>
            Gets the (approximated) light intensity at the given distance.
            </summary>
      <param name="distance">The distance from the light.</param>
      <returns>
            A value representing the (red, green and blue) light intensity at 
            the specified distance. 
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.Light.Name">
      <summary>
            Gets or sets the name of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Light.Shape">
      <summary>
            Gets (or sets) the shape of the light volume.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Light.System#ICloneable#Clone">
      <summary>
            Creates a new object that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new object that is a clone (deep copy) of this instance.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.Material">
      <summary>
            Defines the material (visual properties) of a mesh.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Material.#ctor">
      <summary>
            Initializes a new binding of the <see cref="T:DigitalRune.Graphics.Material" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Material.Add(System.String,DigitalRune.Graphics.Effects.EffectBinding)">
      <summary>
            Adds an effect binding for the specified render pass to the material.
            </summary>
      <param name="pass">The render pass.</param>
      <param name="effectBinding">The effect binding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effectBinding" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            There is already an effect binding registered for the same render pass.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Material.Clear">
      <summary>
            Removes all render passes and effect bindings from the material.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Material.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Material" /> that is a clone of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Material" /> that is a clone of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Material.CloneCore(DigitalRune.Graphics.Material)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Material" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Material.Contains(System.String)">
      <summary>
            Determines whether the material contains an effect binding for the specified render pass.
            </summary>
      <param name="pass">The render pass.</param>
      <returns>
        <see langword="true" /> if the material contains an effect binding for the specified render
            pass; otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pass" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Material.Count">
      <summary>
            Gets the number of render passes supported by this material.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Material.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Graphics.Material" /> 
            derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Material.EffectBindings">
      <summary>
            Gets a collection of effect bindings used by this material.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Material.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.Material.Item(System.String)">
      <summary>
            Gets or sets the effect binding for the specified render pass.
            </summary>
      <param name="pass">The render pass.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pass" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="pass" /> is not found in the material.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Material.Name">
      <summary>
            Gets the name of the material.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Material.Passes">
      <summary>
            Gets a collection of all the render passes supported by this material.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Material.Remove(System.String)">
      <summary>
            Removes the effect binding for the specified render pass from the material.
            </summary>
      <param name="pass">The render pass.</param>
      <returns>
        <see langword="true" /> if effect binding was successfully removed from the material; 
            otherwise, <see langword="false" />. This method also returns <see langword="false" /> if 
            <paramref name="pass" /> is not found in the original material.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pass" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Material.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#Add(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding})">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Material.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#Contains(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding})">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is found in the 
            <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Material.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding}[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at 
            a particular array index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from 
            <see cref="T:System.Collections.Generic.ICollection`1" />. The array must have zero-based indexing.
            </param>
      <param name="arrayIndex">
            The zero-based index in <paramref name="array" /> at which copying begins.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the 
            available space from <paramref name="arrayIndex" /> to the end of the destination 
            <paramref name="array" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Material.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Material.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#Remove(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding})">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> was successfully removed from the 
            <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />. This method also returns 
            <see langword="false" /> if <paramref name="item" /> is not found in the original 
            <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Material.System#Collections#Generic#IDictionary{System#String@DigitalRune#Graphics#Effects#EffectBinding}#ContainsKey(System.String)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the 
            specified key.
            </summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element 
            with the specified key; otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Material.System#Collections#Generic#IDictionary{System#String@DigitalRune#Graphics#Effects#EffectBinding}#Keys">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the 
            <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Material.System#Collections#Generic#IDictionary{System#String@DigitalRune#Graphics#Effects#EffectBinding}#TryGetValue(System.String,DigitalRune.Graphics.Effects.EffectBinding@)">
      <summary>
            Gets the value associated with the specified key.
            </summary>
      <param name="key">The key whose value to get.</param>
      <param name="value">
            When this method returns, the value associated with the specified key, if the key is found; 
            otherwise, the default value for the type of the <paramref name="value" /> parameter. This 
            parameter is passed uninitialized.
            </param>
      <returns>
        <see langword="true" /> if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> 
            contains an element with the specified key; otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Material.System#Collections#Generic#IDictionary{System#String@DigitalRune#Graphics#Effects#EffectBinding}#Values">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values of the 
            <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Material.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Material.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Material.System#ICloneable#Clone">
      <summary>
            Creates a new object that is a clone of the current instance.
            </summary>
      <returns>A new object that is a clone of this instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Material.TryGet(System.String,DigitalRune.Graphics.Effects.EffectBinding@)">
      <summary>
            Gets the effect binding for the specified render pass
            </summary>
      <param name="pass">The render pass.</param>
      <param name="effectBinding">
            When this method returns, the effect binding for the specified render pass; otherwise, the 
            <see langword="null" /> if the render pass is not supported by the matrial. This parameter is 
            passed uninitialized.
            </param>
      <returns>
        <see langword="true" /> if the material supports the specified render pass; otherwise, 
            <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pass" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.MaterialCollection">
      <summary>
            Manages a collection of materials.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.MaterialCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Graphics.MaterialCollection" /> class</summary>
    </member>
    <member name="M:DigitalRune.Graphics.MaterialCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Graphics.MaterialCollection" />. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> for <see cref="T:DigitalRune.Graphics.MaterialCollection" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MaterialCollection.InsertItem(System.Int32,DigitalRune.Graphics.Material)">
      <summary>
            Inserts a material into the collection at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="material" /> should be inserted.
            </param>
      <param name="material">The material to insert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="material" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MaterialCollection.SetItem(System.Int32,DigitalRune.Graphics.Material)">
      <summary>
            Replaces the material at the specified index.
            </summary>
      <param name="index">The zero-based index of the material to replace.</param>
      <param name="material">The new value for the material at the specified index.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="material" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Mesh">
      <summary>
            Represents a mesh of a 3D model.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Mesh.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Mesh" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Mesh.Animations">
      <summary>
            Gets or sets the animations.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Mesh.BoundingShape">
      <summary>
            Gets or sets the bounding shape of this mesh.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Mesh.Materials">
      <summary>
            Gets a collection of materials associated with this mesh.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Mesh.Name">
      <summary>
            Gets or sets the name of this mesh.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Mesh.Skeleton">
      <summary>
            Gets or sets the skeleton for mesh skinning.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Mesh.Submeshes">
      <summary>
            Gets the collection of <see cref="T:DigitalRune.Graphics.Submesh" />es that make up this mesh. Each submesh is 
            composed of a set of primitives that share the same material. 
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Mesh.UserData">
      <summary>
            Gets or sets a user-defined object.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.MeshHelper">
      <summary>
            Provides helper methods for <see cref="T:DigitalRune.Graphics.Mesh" />es, <see cref="T:DigitalRune.Graphics.Submesh" />es and 
            <see cref="T:DigitalRune.Graphics.Material" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateBox(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>
            Creates a new submesh that represents a box using triangles.
            (The box is centered at the origin. The side length is 1.)
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <returns>A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a box.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateBoxLines(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>
            Creates a new submesh that represents a box using lines.
            (The box is centered at the origin. The side length is 1.)
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a box line list.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateCircleLines(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
      <summary>
            Creates a new submesh that represents a circle using lines.
            (The circle lies in the xy plane and is centered at the origin. Radius = 1.)
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a circle line list.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateCone(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
      <summary>
            Creates a new submesh that represents a cone using triangles.
            (The cone is standing on the xz plane pointing along the y axis. Radius = 1. Height = 1.) 
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a cone.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateConeLines(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
      <summary>
            Creates a new submesh that represents a cone using lines.
            (The cone is standing on the xz plane pointing along the y axis. Radius = 1. Height = 1.) 
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a cone line list.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateCylinder(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
      <summary>
            Creates a new submesh that represents a a cylinder using triangles.
            (The cylinder is centered at the origin. Radius = 1. Height = 2 (along the y axis).) 
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.
            </param>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a cylinder.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateCylinderLines(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
      <summary>
            Creates a new submesh that represents a cylinder using lines.
            (The cylinder is centered at the origin. Radius = 1. Height = 2 (along the y axis).) 
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a cylinder line list.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateHemisphere(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
      <summary>
            Creates a new submesh that represents a spherical cap using triangles.
            (The sphere is centered at the origin. Radius = 1. The submesh contains only the 
            top half (+y) of the sphere.) 
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a hemisphere.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateHemisphereLines(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
      <summary>
            Creates a new submesh that represents a spherical cap using lines.
            (The sphere is centered at the origin. Radius = 1. The submesh contains only the 
            top half (+y) of the sphere.) 
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a hemisphere line list.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateIcosphere(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
      <summary>
            Creates a new submesh that represents a sphere using triangles.
            (The sphere is centered at the origin. Radius = 1. The sphere is generated by subdividing 
            an icosahedron.)
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="numberOfSubdivisions">
            The number of subdivisions [0, 5]. (See remarks of 
            <see cref="M:DigitalRune.Geometry.GeometryHelper.CreateIcosphere(System.Int32,System.Boolean)" />.) 
            This parameter controls the detail of the mesh.</param>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents an icosphere.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateSubmesh(Microsoft.Xna.Framework.Graphics.GraphicsDevice,DigitalRune.Geometry.Meshes.TriangleMesh,System.Single)">
      <summary>
            Creates a submesh to draw a triangle mesh.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="mesh">The mesh.</param>
      <param name="angleLimit">
            The angle limit for normal vectors in radians. Normals are only merged if the angle between
            the triangle normals is equal to or less than the angle limit. Set this value to -1 to
            disable the angle limit (all normals of one vertex are merged). 
            </param>
      <returns>The submesh, or <see langword="null" /> if the mesh is empty.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> or <paramref name="mesh" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateTeapot(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single,System.Int32)">
      <summary>
            Creates a new submesh that represents a teapot using triangles.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="size">The size of the teapot.</param>
      <param name="tessellation">The tessellation of the teapot in the range [1, 18].</param>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a teapot.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateTorus(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single,System.Single,System.Int32)">
      <summary>
            Creates a new submesh that represents a torus using triangles.
            (The torus is centered at the origin.)
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="radius">The radius of the torus.</param>
      <param name="thickness">The thickness of the torus.</param>
      <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.
            </param>
      <returns>A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a torus.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateUncappedCylinder(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
      <summary>
            Creates a new submesh that represents an uncapped (open) cylinder using triangles. 
            (The cylinder centered at the origin. Radius = 1. Height = 2 (along the y axis).)
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents an uncapped cylinder (a cylinder without
            flat circle caps).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateUVSphere(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
      <summary>
            Creates a new submesh that represents a sphere using triangles.
            (The sphere is centered at the origin. Radius = 1.) 
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a sphere.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.Draw(DigitalRune.Graphics.Submesh)">
      <summary>
            Draws the <see cref="T:DigitalRune.Graphics.Submesh" /> using the currently active shader.
            </summary>
      <param name="submesh">The submesh.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="submesh" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The <see cref="T:DigitalRune.Graphics.Submesh" /> is not yet part of a <see cref="T:DigitalRune.Graphics.Mesh" />. The <see cref="T:DigitalRune.Graphics.Submesh" />
            must be added to the <see cref="P:DigitalRune.Graphics.Mesh.Submeshes" /> collection of a <see cref="T:DigitalRune.Graphics.Mesh" /> before
            it can be drawn.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The mesh has no vertex buffer and for this submesh.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetBox(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a box using triangles.
            (The box is centered at the origin. The side length is 1.)
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of a box. 
            This submesh is shared and must not be modified!
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetBoxLines(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a box using lines.
            (The box is centered at the origin. The side length is 1.)
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of box line list. 
            This submesh is shared and must not be modified!
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetCircleLines(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a circle using lines.
            (The circle lies in the xy plane and is centered at the origin. Radius = 1.)
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of circle line list. 
            This submesh is shared and must not be modified!
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetCone(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a cone using triangles.
            (The cone is standing on the xz plane pointing along the y axis. Radius = 1. Height = 1.) 
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of cone. 
            This submesh is shared and must not be modified!
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetConeLines(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a cone using lines.
            (The cone is standing on the xz plane pointing along the y axis. Radius = 1. Height = 1.) 
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of cone line list. 
            This submesh is shared and must not be modified!
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetCylinder(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a cylinder using triangles.
            (The cylinder is centered at the origin. Radius = 1. Height = 2 (along the y axis).) 
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of cylinder. 
            This submesh is shared and must not be modified!
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetCylinderLines(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a cylinder using lines.
            (The cylinder is centered at the origin. Radius = 1. Height = 2 (along the y axis).) 
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of cylinder line list. 
            This submesh is shared and must not be modified!
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetHemisphere(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a spherical cap using triangles.
            (The sphere is centered at the origin. Radius = 1. The submesh contains only the 
            top half (+y) of the sphere.) 
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of a hemisphere. 
            This submesh is shared and must not be modified!
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetHemisphereLines(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a spherical cap using lines.
            (The sphere is centered at the origin. Radius = 1. The submesh contains only the 
            top half (+y) of the sphere.) 
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of a hemisphere line list. 
            This submesh is shared and must not be modified!
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetIcosphere(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a sphere using triangles.
            (The sphere is centered at the origin. Radius = 1. The sphere is generated by subdividing 
            an icosahedron.)
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of an icosphere. 
            This submesh is shared and must not be modified!
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetMaterial(DigitalRune.Graphics.Submesh)">
      <summary>
            Gets the material of a submesh.
            </summary>
      <param name="submesh">The submesh.</param>
      <returns>
            The material of this submesh, or <see langword="null" /> if the submesh is not assigned to a 
            mesh or if the <see cref="P:DigitalRune.Graphics.Submesh.MaterialIndex" /> is invalid.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="submesh" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetTeapot(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a teapot using triangles.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of a teapot. This submesh is shared and must not be modified!
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetUncappedCylinder(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents an uncapped (open) cylinder using triangles. 
            (The cylinder centered at the origin. Radius = 1. Height = 2 (along the y axis).)
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of an uncapped cylinder. 
            This submesh is shared and must not be modified!
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetUVSphere(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a sphere using triangles.
            (The sphere is centered at the origin. Radius = 1.) 
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of sphere. 
            This submesh is shared and must not be modified!
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.SetMaterial(DigitalRune.Graphics.Submesh,DigitalRune.Graphics.Material)">
      <summary>
            Sets the material for a submesh.
            </summary>
      <param name="submesh">The submesh.</param>
      <param name="material">The new material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="submesh" /> or <paramref name="material" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The <see cref="T:DigitalRune.Graphics.Submesh" /> is not yet part of a <see cref="T:DigitalRune.Graphics.Mesh" />. Add the 
            <see cref="T:DigitalRune.Graphics.Submesh" /> to the <see cref="P:DigitalRune.Graphics.Mesh.Submeshes" /> collection of a 
            <see cref="T:DigitalRune.Graphics.Mesh" /> before setting the material.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.MeshInstanceRenderer">
      <summary>
            Renders a list of <see cref="T:DigitalRune.Graphics.SceneGraph.MeshInstance" /> nodes using state-sorting and hardware 
            instancing.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.MeshInstanceRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.MeshInstanceRenderer" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.MeshInstanceRenderer.EnableInstancing">
      <summary>
            Gets or sets a value indicating whether hardware instancing is enabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.MeshInstanceRenderer.Render(DigitalRune.Graphics.SceneGraph.MeshInstance,DigitalRune.Graphics.RenderContext)">
      <summary>
            Renders the specified mesh instance.
            </summary>
      <param name="meshInstance">The mesh instance.</param>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.MeshInstanceRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.MeshInstance},DigitalRune.Graphics.RenderContext)">
      <summary>
            Renders the specified mesh instances.
            </summary>
      <param name="meshInstances">The mesh instances.</param>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.MeshInstanceRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.MeshInstance},DigitalRune.Graphics.RenderContext,System.Func{DigitalRune.Graphics.SceneGraph.MeshInstance,System.Boolean})">
      <summary>
            Renders the specified mesh instances.
            </summary>
      <param name="meshInstances">The mesh instances.</param>
      <param name="context">The render context.</param>
      <param name="filter">
            A predicate method which decides which mesh instances in <paramref name="meshInstances" />
            are actually rendered. Mesh instances where this method returns <see langword="false" /> 
            are not rendered. If this parameter is <see langword="null" /> all mesh instances are 
            rendered.
            </param>
    </member>
    <member name="T:DigitalRune.Graphics.NoiseHelper">
      <summary>
            Contains helper method for the Noise shaders.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.NoiseHelper.GetGradient3DTexture(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the optimized gradient lookup texture for 3D Perlin noise.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>The gradient lookup texture.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.NoiseHelper.GetGradient4DTexture(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the gradient lookup texture for 4D Perlin noise.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>The gradient lookup texture.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.NoiseHelper.GetGrainTexture(DigitalRune.Graphics.IGraphicsService,System.Int32)">
      <summary>
            Gets a grain texture.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="size">The width of the texture in pixels.</param>
      <returns>A grain texture.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.NoiseHelper.GetPermutation3DTexture(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the optimized permutation lookup texture for 3D Perlin noise.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>The permutation lookup texture.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.NoiseHelper.GetPermutationTexture(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the permutation lookup texture (used in 4D noise, but not in the optimized 3D noise).
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>The permutation lookup texture.</returns>
    </member>
    <member name="T:DigitalRune.Graphics.OrthographicProjection">
      <summary>
            Defines an orthographic projection.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.OrthographicProjection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.OrthographicProjection" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.OrthographicProjection.CloneCore(DigitalRune.Graphics.Projection)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Projection" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.OrthographicProjection.ComputeProjection">
      <summary>
            Computes the projection matrix.
            </summary>
      <returns>The projection matrix.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.OrthographicProjection.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Projection" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.OrthographicProjection.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix44F)~DigitalRune.Graphics.OrthographicProjection">
      <summary>
            Converts a 4x4 transformation matrix to an orthographic projection.
            </summary>
      <param name="matrix">The projection.</param>
      <returns>
            A 4x4-matrix that represents the same transformation as the projection.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.OrthographicProjection.Set(DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Sets the orthographic projection from the given projection matrix.
            </summary>
      <param name="projection">The orthographic projection matrix.</param>
    </member>
    <member name="M:DigitalRune.Graphics.OrthographicProjection.Set(System.Single,System.Single)">
      <summary>
            Sets a right-handed, orthographic projection with the specified size.
            </summary>
      <param name="width">The width of the view volume.</param>
      <param name="height">The height of the view volume.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="width" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="height" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.OrthographicProjection.Set(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Sets a right-handed, orthographic projection with the specified size and depth.
            </summary>
      <param name="width">The width of the view volume.</param>
      <param name="height">The height of the view volume.</param>
      <param name="near">The distance to the near clip plane.</param>
      <param name="far">The distance to the far clip plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="width" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="height" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="near" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="near" /> is greater than or equal to <paramref name="far" /></exception>
    </member>
    <member name="M:DigitalRune.Graphics.OrthographicProjection.SetOffCenter(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Sets a customized (off-center), right-handed, orthographic projection.
            </summary>
      <param name="left">The minimum x-value of the view volume.</param>
      <param name="right">The maximum x-value of the view volume.</param>
      <param name="bottom">The minimum y-value of the view volume.</param>
      <param name="top">The maximum y-value of the view volume.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="left" /> is greater than or equal to <paramref name="right" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bottom" /> is greater than or equal to <paramref name="top" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.OrthographicProjection.SetOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Sets a customized (off-center), right-handed, orthographic projection (including depth).
            </summary>
      <param name="left">The minimum x-value of the view volume.</param>
      <param name="right">The maximum x-value of the view volume.</param>
      <param name="bottom">The minimum y-value of the view volume.</param>
      <param name="top">The maximum y-value of the view volume.</param>
      <param name="near">The distance to the near clip plane.</param>
      <param name="far">The distance to the far clip plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="left" /> is greater than or equal to <paramref name="right" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bottom" /> is greater than or equal to <paramref name="top" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="near" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="near" /> is greater than or equal to <paramref name="far" /></exception>
    </member>
    <member name="T:DigitalRune.Graphics.PerspectiveProjection">
      <summary>
            Defines a perspective projection.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PerspectiveProjection" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.CloneCore(DigitalRune.Graphics.Projection)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Projection" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.ComputeProjection">
      <summary>
            Computes the projection matrix.
            </summary>
      <returns>The projection matrix.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Projection" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix44F)~DigitalRune.Graphics.PerspectiveProjection">
      <summary>
            Converts a 4x4 transformation matrix to a perspective projection.
            </summary>
      <param name="matrix">The projection.</param>
      <returns>
            A 4x4-matrix that represents the same transformation as the projection.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.Set(DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Sets the perspective projection from the given projection matrix.
            </summary>
      <param name="projection">The perspective projection.</param>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.Set(System.Single,System.Single)">
      <summary>
            Sets a symmetric, perspective projection based on size.
            </summary>
      <param name="width">The width of the frustum at the near clip plane.</param>
      <param name="height">The height of the frustum at the near clip plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="width" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="height" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.Set(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Sets a symmetric, perspective projection based on size and depth.
            </summary>
      <param name="width">The width of the frustum at the near clip plane.</param>
      <param name="height">The height of the frustum at the near clip plane.</param>
      <param name="near">The distance to the near clip plane.</param>
      <param name="far">The distance to the far clip plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="width" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="height" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="near" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="near" /> is greater than or equal to <paramref name="far" /></exception>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.SetFieldOfView(System.Single,System.Single)">
      <summary>
            Sets a symmetric, perspective projection based on field of view.
            </summary>
      <param name="fieldOfViewY">The vertical field of view.</param>
      <param name="aspectRatio">The aspect ratio (width / height).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldOfViewY" /> is not between 0 and <c>π</c> radians (0° and 180°).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="aspectRatio" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.SetFieldOfView(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Sets a symmetric, perspective projection based on field of view and depth.
            </summary>
      <param name="fieldOfViewY">The vertical field of view.</param>
      <param name="aspectRatio">The aspect ratio (width / height).</param>
      <param name="near">The distance to the near clip plane.</param>
      <param name="far">The distance to the far clip plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldOfViewY" /> is not between 0 and <c>π</c> radians (0° and 180°).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="aspectRatio" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="near" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="near" /> is greater than or equal to <paramref name="far" /></exception>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.SetOffCenter(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Sets an asymmetric (off-center), perspective projection based on the given values.
            </summary>
      <param name="left">The minimum x-value of the frustum at the near clip plane.</param>
      <param name="right">The maximum x-value of the frustum at the near clip plane.</param>
      <param name="bottom">The minimum y-value of the frustum at the near clip plane.</param>
      <param name="top">The maximum y-value of the frustum at the near clip plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="left" /> is greater than or equal to <paramref name="right" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bottom" /> is greater than or equal to <paramref name="top" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.SetOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Sets an asymmetric (off-center), perspective projection based on the given values (including depth).
            </summary>
      <param name="left">The minimum x-value of the frustum at the near clip plane.</param>
      <param name="right">The maximum x-value of the frustum at the near clip plane.</param>
      <param name="bottom">The minimum y-value of the frustum at the near clip plane.</param>
      <param name="top">The maximum y-value of the frustum at the near clip plane.</param>
      <param name="near">The distance to the near clip plane.</param>
      <param name="far">The distance to the far clip plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="left" /> is greater than or equal to <paramref name="right" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bottom" /> is greater than or equal to <paramref name="top" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="near" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="near" /> is greater than or equal to <paramref name="far" /></exception>
    </member>
    <member name="T:DigitalRune.Graphics.PointLight">
      <summary>
            Represents a point light.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PointLight.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PointLight" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PointLight.Attenuation">
      <summary>
            Gets or sets the exponent for the distance attenuation.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PointLight.CloneCore(DigitalRune.Graphics.Light)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Light" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PointLight.Color">
      <summary>
            Gets or sets the RGB color of the light.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PointLight.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Light" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.PointLight.DiffuseIntensity">
      <summary>
            Gets or sets the diffuse intensity of the light.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PointLight.GetLightIntensityAt(System.Single)">
      <summary>
            Gets the (approximated) light intensity at the given distance.
            </summary>
      <param name="distance">The distance from the light.</param>
      <returns>
            A value representing the (red, green and blue) light intensity at 
            the specified distance. 
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.PointLight.HdrScale">
      <summary>
            Gets or sets the HDR scale of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PointLight.Range">
      <summary>
            Gets or sets the range of the light.
            </summary>
      <exception cref="T:System.ArgumentException">
            The range of point light cannot be negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PointLight.SpecularIntensity">
      <summary>
            Gets or sets the specular intensity of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PointLight.Texture">
      <summary>
            Gets or sets the cube map texture which is projected by this point light.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Projection">
      <summary>
            Defines a projection transformation (including its bounding shape).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Projection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Projection" /> class</summary>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.AspectRatio">
      <summary>
            Gets the aspect ratio (width / height) of the view.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.Bottom">
      <summary>
            Gets or sets the minimum y-value of the view volume at the near view-plane.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Projection.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Projection" /> that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Projection" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Projection.CloneCore(DigitalRune.Graphics.Projection)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Projection" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Projection.ComputeProjection">
      <summary>
            Computes the projection matrix.
            </summary>
      <returns>The projection matrix.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Projection.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Projection" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.Depth">
      <summary>
            Gets the depth of the view volume (<see cref="P:DigitalRune.Graphics.Projection.Far" /> - <see cref="P:DigitalRune.Graphics.Projection.Near" />).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.Far">
      <summary>
            Gets or sets the distance to the far view plane. 
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.FieldOfViewX">
      <summary>
            Gets the horizontal field of view in radians.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.FieldOfViewY">
      <summary>
            Gets the vertical field of view in radians.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.Height">
      <summary>
            Gets the height of the view volume at the near view plane.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Projection.Invalidate">
      <summary>
            Invalidates the projection matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.Inverse">
      <summary>
            Gets the inverse of the projection matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.Left">
      <summary>
            Gets or sets the minimum x-value of the view volume at the near view-plane.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.Near">
      <summary>
            Gets or sets the distance to the near view plane. 
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Projection.op_Implicit(DigitalRune.Graphics.Projection)~DigitalRune.Mathematics.Algebra.Matrix44F">
      <summary>
            Converts the projection to a 4x4 transformation matrix.
            </summary>
      <param name="projection">The projection.</param>
      <returns>
            A 4x4-matrix that represents the same transformation as the projection.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Projection.op_Implicit(DigitalRune.Graphics.Projection)~Microsoft.Xna.Framework.Matrix">
      <summary>
            Converts the projection to a 4x4 transformation matrix (XNA Framework). (Only available in 
            the XNA-compatible build.)
            </summary>
      <param name="projection">The projection.</param>
      <returns>
            A 4x4-matrix that represents the same transformation as the projection.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.Right">
      <summary>
            Gets or sets the maximum x-value of the view volume at the near view-plane.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Projection.Set(DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Sets the projection from the given projection matrix.
            </summary>
      <param name="projection">The projection matrix.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Projection.System#ICloneable#Clone">
      <summary>
            Creates a new object that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new object that is a clone (deep copy) of this instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Projection.ToMatrix44F">
      <summary>
            Converts a projection to a 4x4 transformation matrix.
            </summary>
      <returns>
            A 4x4-matrix that represents the same transformation as the projection.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.Top">
      <summary>
            Gets or sets the maximum y-value of the view volume at the near view-plane.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Projection.ToXna">
      <summary>
            Converts a projection to a 4x4 transformation matrix (XNA Framework). (Only available in the 
            XNA-compatible build.)
            </summary>
      <returns>
            A 4x4-matrix that represents the same transformation as the projection.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.ViewVolume">
      <summary>
            Gets (or sets) the shape of the view volume (viewing frustum).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.Width">
      <summary>
            Gets the width of the view volume at the near view plane.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.ProjectorLight">
      <summary>
            Represents a light that projects a texture.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.ProjectorLight.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.ProjectorLight" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.ProjectorLight.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,DigitalRune.Graphics.PerspectiveProjection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.ProjectorLight" /> class.
            </summary>
      <param name="texture">The texture that is projected.</param>
      <param name="projection">The projection.</param>
    </member>
    <member name="P:DigitalRune.Graphics.ProjectorLight.Attenuation">
      <summary>
            Gets or sets the attenuation exponent for the distance attenuation.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.ProjectorLight.CloneCore(DigitalRune.Graphics.Light)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Light" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.ProjectorLight.Color">
      <summary>
            Gets or sets the RGB color of the light.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.ProjectorLight.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Light" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.ProjectorLight.DiffuseIntensity">
      <summary>
            Gets or sets the diffuse intensity of the light.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.ProjectorLight.GetLightIntensityAt(System.Single)">
      <summary>
            Gets the (approximated) light intensity at the given distance.
            </summary>
      <param name="distance">The distance from the light.</param>
      <returns>
            A value representing the (red, green and blue) light intensity at 
            the specified distance. 
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.ProjectorLight.HdrScale">
      <summary>
            Gets or sets the HDR scale of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.ProjectorLight.Projection">
      <summary>
            Gets or sets the projection.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.ProjectorLight.SpecularIntensity">
      <summary>
            Gets or sets the specular intensity of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.ProjectorLight.Texture">
      <summary>
            Gets or sets the texture.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.RenderContext">
      <summary>
            Provides information for an object that should be rendered.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.RenderContext.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RenderContext" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.CameraInstance">
      <summary>
            Gets or sets the active camera.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.Data">
      <summary>
            Gets a generic collection of name/value pairs which can be used to store custom data.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.DeltaTime">
      <summary>
            Gets the elapsed time since the last frame.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.FrameIndex">
      <summary>
            Gets or sets the index of the frame.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.GBuffer0">
      <summary>
            Gets or sets the first texture containing G-buffer data.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.GBuffer1">
      <summary>
            Gets or sets the second texture containing G-buffer data.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.GBuffer2">
      <summary>
            Gets or sets the third texture containing G-buffer data.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.GBuffer3">
      <summary>
            Gets or sets the fourth texture containing G-buffer data.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.GraphicsService">
      <summary>
            Gets or sets the graphics service.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.HdrEnabled">
      <summary>
            Determines whether high-dynamic range (HDR) rendering should be used.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.LightBuffer0">
      <summary>
            Gets or sets the first texture containing light buffer data.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.LightBuffer1">
      <summary>
            Gets or sets the first texture containing light buffer data.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.MaterialBinding">
      <summary>
            Gets or sets the effect binding of the current material.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.MaterialInstanceBinding">
      <summary>
            Gets or sets the effect binding of the current material instance.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.PassIndex">
      <summary>
            Gets or sets the index of the current <see cref="T:Microsoft.Xna.Framework.Graphics.EffectPass" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.PresentationTarget">
      <summary>
            Gets or sets the <see cref="P:DigitalRune.Graphics.RenderContext.PresentationTarget" /> that is currently being rendered. (Only 
            available in Windows. Not available on these platforms: Silverlight, Windows Phone 7, Xbox 
            360.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.RenderPass">
      <summary>
            Gets or sets a string that identifies the current render pass.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.RenderTarget">
      <summary>
            Gets or sets the target of the current rendering operations.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.RenderContext.Reset">
      <summary>
            Resets this instance.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.Scene">
      <summary>
            Gets or sets the scene.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.SceneNode">
      <summary>
            Gets or sets the currently rendered scene node.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.Screen">
      <summary>
            Gets or sets the <see cref="T:DigitalRune.Graphics.GraphicsScreen" /> that is currently being rendered.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.RenderContext.Set(DigitalRune.Graphics.RenderContext)">
      <summary>
            Copies the properties of the specified render context.
            <see cref="T:DigitalRune.Graphics.RenderContext" />.
            </summary>
      <param name="source">The render context from properties are copied.</param>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.SourceTexture">
      <summary>
            Gets or sets the source texture that contains the content of the last render operation
            (usually the result of the previous graphics screen).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.Technique">
      <summary>
            Gets or sets a string that identifies the current technique.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.UserData">
      <summary>
            Gets or sets a user-defined object.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.Viewport">
      <summary>
            Gets the viewport (= the portion of the back buffer that should be used for rendering).
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.RenderContextKeys">
      <summary>
            Provides common names for render context data (see property <see cref="P:DigitalRune.Graphics.RenderContext.Data" />
            of <see cref="T:DigitalRune.Graphics.RenderContext" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.RenderContextKeys.DepthBufferHalf">
      <summary>
            A 2D texture (or render target) containing a downsampled depth buffer (half width and half 
            height).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.RenderContextKeys.LastVelocityBuffer">
      <summary>
            A 2D texture (or render target) containing screen space velocities of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.RenderContextKeys.VelocityBuffer">
      <summary>
            A 2D texture (or render target) containing screen space velocities.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.RenderTargetFormat">
      <summary>
            Describes the size and format of a texture or a render target.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetFormat.#ctor(System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RenderTargetFormat" /> class.
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="mipmap">
        <see langword="true" /> to enable a full mipmap chain to be generated, 
            <see langword="false" /> otherwise.
            </param>
      <param name="surfaceFormat">The surface format.</param>
      <param name="depthFormat">The depth stencil format.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="width" /> or <paramref name="height" /> is negative or 0.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.RenderTargetFormat.DepthFormat">
      <summary>
            Gets or sets the depth/stencil buffer format.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderTargetFormat.Height">
      <summary>
            Gets or sets the height (in pixels).
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.RenderTargetFormat.Mipmap">
      <summary>
            Gets or sets a value indicating whether the texture uses mipmapping.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderTargetFormat.SurfaceFormat">
      <summary>
            Gets or sets the surface format.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderTargetFormat.Width">
      <summary>
            Gets or sets the width (in pixels).
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.RenderTargetPool">
      <summary>
            Manages a pool of reusable render targets.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RenderTargetPool" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.Clear">
      <summary>
            Disposes all cached render targets.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderTargetPool.FrameLimit">
      <summary>
            Gets or sets the number of frames a recycled render target will be cached before it is 
            released.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderTargetPool.GraphicsService">
      <summary>
            Gets the graphics service.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.Obtain2D">
      <summary>
            Obtains a render target that matches the size and format of the back buffer.
            </summary>
      <returns>A render target with the same size and format as the back buffer.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.Obtain2D(DigitalRune.Graphics.RenderTargetFormat)">
      <summary>
            Obtains a render target that matches the size and format of the given texture.
            </summary>
      <param name="format">
            The render target format, or <see langword="null" /> to get a render target with the same 
            format as the device back buffer.
            </param>
      <returns>A render target with the given format.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.Obtain2D(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
      <summary>
            Obtains a render target that matches the size and format of the given render target.
            </summary>
      <param name="reference">
            The reference render target. (If <paramref name="reference" /> is <see langword="null" /> a 
            render target with the same size and format as the back-buffer is created.)
            </param>
      <returns>A render target with the given size and format.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.Obtain2D(Microsoft.Xna.Framework.Graphics.RenderTarget2D,System.Boolean,Microsoft.Xna.Framework.Graphics.DepthFormat)">
      <summary>
            Obtains a render target that matches the size and format of the given render target.
            </summary>
      <param name="reference">
            The reference render target. (If <paramref name="reference" /> is <see langword="null" /> a 
            render target with the same size and format as the back-buffer is created.)
            </param>
      <param name="mipmap">
        <see langword="true" /> to enable a full mipmap chain to be generated; otherwise 
            <see langword="false" />.
            </param>
      <param name="depthStencilFormat">The depth stencil format.</param>
      <returns>A render target with the given size and format.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.Obtain2D(Microsoft.Xna.Framework.Graphics.Texture2D)">
      <summary>
            Obtains a render target that matches the size, mipmap levels and format of the given 
            texture (no depth/stencil buffer).
            </summary>
      <param name="reference">
            The reference texture. (If <paramref name="reference" /> is <see langword="null" /> a render 
            target with the same size and format as the back-buffer is created, but without mip-mapping
            or depth buffer.)
            </param>
      <returns>
            A render target with the given size, mip-map levels and format (no depth buffer).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.Obtain2D(Microsoft.Xna.Framework.Graphics.Texture2D,System.Boolean,Microsoft.Xna.Framework.Graphics.DepthFormat)">
      <summary>
            Obtains a render target that matches the size and format of the given texture.
            </summary>
      <param name="reference">
            The reference texture. (If <paramref name="reference" /> is <see langword="null" /> a render 
            target with the same size and format as the back-buffer is created.)
            </param>
      <param name="mipmap">
        <see langword="true" /> to enable a full mipmap chain to be generated; otherwise 
            <see langword="false" />.
            </param>
      <param name="depthStencilFormat">The depth stencil format.</param>
      <returns>A render target with the given size and format.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.Obtain2D(System.Boolean,Microsoft.Xna.Framework.Graphics.DepthFormat)">
      <summary>
            Obtains a render target that matches the size and format of the back buffer.
            </summary>
      <param name="mipmap">
        <see langword="true" /> to enable a full mipmap chain to be generated; otherwise 
            <see langword="false" />.
            </param>
      <param name="depthStencilFormat">The depth stencil format.</param>
      <returns>A render target with the same size and format as the back buffer.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.Obtain2D(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>
            Obtains a render target that matches the given specification (no mip-mapping, no 
            depth/stencil buffer).
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="surfaceFormat">The surface format.</param>
      <returns>
            A render target with the given size and format (no mip-mapping and no depth buffer).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.Obtain2D(System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat)">
      <summary>
            Obtains a render target that matches the given specification.
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="mipmap">
        <see langword="true" /> to enable a full mipmap chain to be generated; otherwise 
            <see langword="false" />.
            </param>
      <param name="surfaceFormat">The surface format.</param>
      <param name="depthStencilFormat">The depth stencil format.</param>
      <returns>A render target with the given size and format.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.ObtainCube(DigitalRune.Graphics.RenderTargetFormat)">
      <summary>
            Obtains a render target that matches the size and format of the given texture.
            </summary>
      <param name="format">
            The render target format. Must not be <see langword="null" />. The 
            <see cref="P:DigitalRune.Graphics.RenderTargetFormat.Width" /> determines the size of the cube map render target.
            <see cref="P:DigitalRune.Graphics.RenderTargetFormat.Height" /> is ignored.
            </param>
      <returns>A render target with the given format.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.ObtainCube(Microsoft.Xna.Framework.Graphics.RenderTargetCube)">
      <summary>
            Obtains a render target that matches the size and format of the given render target.
            </summary>
      <param name="reference">
            The reference render target. (If <paramref name="reference" /> is <see langword="null" /> a 
            render target with the same size and format as the back-buffer is created.)
            </param>
      <returns>A render target with the given size and format.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.ObtainCube(Microsoft.Xna.Framework.Graphics.RenderTargetCube,System.Boolean,Microsoft.Xna.Framework.Graphics.DepthFormat)">
      <summary>
            Obtains a render target that matches the size and format of the given render target.
            </summary>
      <param name="reference">
            The reference render target. Must not be <see langword="null" />.
            </param>
      <param name="mipmap">
        <see langword="true" /> to enable a full mipmap chain to be generated; otherwise 
            <see langword="false" />.
            </param>
      <param name="depthStencilFormat">The depth stencil format.</param>
      <returns>A render target with the given size and format.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.ObtainCube(Microsoft.Xna.Framework.Graphics.TextureCube)">
      <summary>
            Obtains a render target that matches the size, mipmap levels and format of the given 
            texture (no depth/stencil buffer).
            </summary>
      <param name="reference">
            The reference texture. Must not be <see langword="null" />.
            </param>
      <returns>
            A render target with the given size, mip-map levels and format (no depth buffer).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.ObtainCube(Microsoft.Xna.Framework.Graphics.TextureCube,System.Boolean,Microsoft.Xna.Framework.Graphics.DepthFormat)">
      <summary>
            Obtains a render target that matches the size and format of the given texture.
            </summary>
      <param name="reference">
            The reference texture. Must not be <see langword="null" />.
            </param>
      <param name="mipmap">
        <see langword="true" /> to enable a full mipmap chain to be generated; otherwise 
            <see langword="false" />.
            </param>
      <param name="depthStencilFormat">The depth stencil format.</param>
      <returns>A render target with the given size and format.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.ObtainCube(System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>
            Obtains a render target that matches the given specification (no mip-mapping, no 
            depth/stencil buffer).
            </summary>
      <param name="size">The size.</param>
      <param name="surfaceFormat">The surface format.</param>
      <returns>
            A render target with the given size and format (no mip-mapping and no depth buffer).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.ObtainCube(System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat)">
      <summary>
            Obtains a render target that matches the given specification.
            </summary>
      <param name="size">The size in pixels.</param>
      <param name="mipmap">
        <see langword="true" /> to enable a full mipmap chain to be generated; otherwise 
            <see langword="false" />.
            </param>
      <param name="surfaceFormat">The surface format.</param>
      <param name="depthStencilFormat">The depth stencil format.</param>
      <returns>A cube map render target with the given size and format.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.Recycle(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
      <summary>
            Releases a render target and puts it back into the pool for future reuse.
            </summary>
      <param name="renderTarget">The render target.</param>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.Recycle(Microsoft.Xna.Framework.Graphics.RenderTargetCube)">
      <summary>
            Releases a render target and puts it back into the pool for future reuse.
            </summary>
      <param name="renderTarget">The render target.</param>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.Update">
      <summary>
            Manages the cached render targets.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SkyboxRenderer">
      <summary>
            Draws a skybox.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SkyboxRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SkyboxRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SkyboxRenderer.Render(Microsoft.Xna.Framework.Graphics.TextureCube,DigitalRune.Mathematics.Algebra.Matrix33F,System.Single,System.Boolean,DigitalRune.Graphics.RenderContext)">
      <summary>
            Renders a skybox.
            </summary>
      <param name="texture">The cube map with the sky texture.</param>
      <param name="orientation">The orientation of the skybox.</param>
      <param name="exposure">The exposure factor that is multiplied to the cube map values to change the brightness.
            (Usually 1 or higher).</param>
      <param name="outputLinear">
            If set to <see langword="true" /> the renderer writes linear color values; if set to
            <see langword="false" /> the renderer writes gamma-corrected color values.
            </param>
      <param name="context">The render context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="texture" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Spotlight">
      <summary>
            Represents a spotlight.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Spotlight.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Spotlight" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Spotlight.Attenuation">
      <summary>
            Gets or sets the attenuation exponent for the distance attenuation.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Spotlight.CloneCore(DigitalRune.Graphics.Light)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Light" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Spotlight.Color">
      <summary>
            Gets or sets the RGB color of the light.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Spotlight.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Light" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Spotlight.CutoffAngle">
      <summary>
            Gets or sets the cutoff (penumbra) angle.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Spotlight.DiffuseIntensity">
      <summary>
            Gets or sets the diffuse intensity of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Spotlight.FalloffAngle">
      <summary>
            Gets or sets the falloff (umbra) angle.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Spotlight.GetLightIntensityAt(System.Single)">
      <summary>
            Gets the (approximated) light intensity at the given distance.
            </summary>
      <param name="distance">The distance from the light.</param>
      <returns>
            A value representing the (red, green and blue) light intensity at 
            the specified distance. 
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.Spotlight.HdrScale">
      <summary>
            Gets or sets the HDR scale of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Spotlight.Range">
      <summary>
            Gets or sets the range of the light.
            </summary>
      <exception cref="T:System.ArgumentException">
            The range of point light cannot be negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Spotlight.SpecularIntensity">
      <summary>
            Gets or sets the specular intensity of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Spotlight.Texture">
      <summary>
            Gets or sets the texture which is projected by this spotlight.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Submesh">
      <summary>
            Represents a batch of geometry information to submit to the graphics device during rendering. 
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Submesh.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Submesh" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Submesh.IndexBuffer">
      <summary>
            Gets or sets the index buffer.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Submesh.MaterialIndex">
      <summary>
            Gets or sets or sets the index of the material.
            </summary>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="value" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Submesh.Mesh">
      <summary>
            Gets or sets the mesh that own this submesh.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Submesh.PrimitiveCount">
      <summary>
            Gets or sets the number of primitives (usually the number of triangles).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Submesh.PrimitiveType">
      <summary>
            Gets the type of the primitive.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Submesh.StartIndex">
      <summary>
            Gets or sets the location in the index array at which to start reading vertices.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Submesh.StartVertex">
      <summary>
            Gets or sets the index of the first vertex in the vertex buffer that belongs to this submesh 
            (a.k.a base vertex or vertex offset).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Submesh.UserData">
      <summary>
            Gets or sets user-defined data.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Submesh.VertexBuffer">
      <summary>
            Gets or sets the vertex buffer.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Submesh.VertexCount">
      <summary>
            Gets or sets the number of vertices.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SubmeshCollection">
      <summary>
            Represents a collection of <see cref="T:DigitalRune.Graphics.Submesh" />es. 
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SubmeshCollection.#ctor(DigitalRune.Graphics.Mesh)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SubmeshCollection" /> class.
            </summary>
      <param name="owner">The <see cref="T:DigitalRune.Graphics.Mesh" /> that owns this collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SubmeshCollection.GetParent(DigitalRune.Graphics.Submesh)">
      <summary>
            Gets the parent of an object.
            </summary>
      <param name="child">The child object.</param>
      <returns>The parent of <paramref name="child" />.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SubmeshCollection.SetParent(DigitalRune.Graphics.Submesh,DigitalRune.Graphics.Mesh)">
      <summary>
            Sets the parent of the given object.
            </summary>
      <param name="child">The child object.</param>
      <param name="parent">The parent to set.</param>
    </member>
    <member name="T:DigitalRune.Graphics.TextureHelper">
      <summary>
            Provides helper methods for textures.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TextureHelper.GetDefaultNormalTexture(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets a 1x1 normal map. The normal vector is (0, 0, 1).
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>A 1x1 normal map. The normal stored in the map is (0, 0, 1).</returns>
    </member>
    <member name="M:DigitalRune.Graphics.TextureHelper.GetDefaultTexture2DBlack(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets a black 2D texture with 1x1 pixels.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>A black 2D texture with 1x1 pixels.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.TextureHelper.GetDefaultTexture2DWhite(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets a white 2D texture with 1x1 pixels.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>A white 2D texture with 1x1 pixels.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.TextureHelper.GetDefaultTexture3DBlack(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets a black 3D texture with 1x1 pixels.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>A black 3D texture with 1x1 pixels.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.TextureHelper.GetDefaultTexture3DWhite(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets a white 3D texture with 1x1 pixels.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>A white 3D texture with 1x1 pixels.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.TextureHelper.GetDefaultTextureCubeBlack(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets a cubemap texture where each face consists of 1 black pixel.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            A cubemap texture where each face consists of 1 black pixel.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.TextureHelper.GetDefaultTextureCubeWhite(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets a cubemap texture where each face consists of 1 white pixel.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            A cubemap texture where each face consists of 1 white pixel.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.TextureHelper.GetNormalsFittingTexture(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the normals fitting texture for calculating "best fit" normals.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>The normals fitting texture.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.TextureHelper.IsFloatingPointFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>
            Determines whether specified surface format is a floating-point format.
            </summary>
      <param name="format">The surface format.</param>
      <returns>
        <see langword="true" /> if specified format is a floating-point format; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.VertexPosition">
      <summary>
            Describes a custom vertex format structure that contains only the vertex position (no normals,
            texture coordinates or other vertex info).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPosition.#ctor(Microsoft.Xna.Framework.Vector3)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.VertexPosition" /> struct.
            </summary>
      <param name="position">The position of the vertex.</param>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPosition.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPosition.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPosition.op_Equality(DigitalRune.Graphics.VertexPosition,DigitalRune.Graphics.VertexPosition)">
      <summary>
            Compares two objects to determine whether they are the same. 
            </summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>
        <see langword="true" /> if the objects are the same; <see langword="false" /> otherwise. 
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPosition.op_Inequality(DigitalRune.Graphics.VertexPosition,DigitalRune.Graphics.VertexPosition)">
      <summary>
            Compares two objects to determine whether they are different. 
            </summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>
        <see langword="true" /> if the objects are different; <see langword="false" /> otherwise. 
            </returns>
    </member>
    <member name="F:DigitalRune.Graphics.VertexPosition.Position">
      <summary>
            The vertex position.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.VertexPosition.SizeInBytes">
      <summary>
            Gets the size of the <see cref="T:DigitalRune.Graphics.VertexPositionNormalColor" /> structure in bytes.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPosition.ToString">
      <summary>
            Retrieves a string representation of this object.
            </summary>
      <returns>
            String representation of this object.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.VertexPosition.VertexDeclaration">
      <summary>
            Gets the vertex declaration.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.VertexPositionNormal">
      <summary>
            Describes a custom vertex format structure that contains position and normal vector.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormal.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.VertexPositionNormal" /> struct.
            </summary>
      <param name="position">The position of the vertex.</param>
      <param name="normal">The normal of the vertex.</param>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormal.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormal.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="F:DigitalRune.Graphics.VertexPositionNormal.Normal">
      <summary>
            The vertex normal vector.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormal.op_Equality(DigitalRune.Graphics.VertexPositionNormal,DigitalRune.Graphics.VertexPositionNormal)">
      <summary>
            Compares two objects to determine whether they are the same. 
            </summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>
        <see langword="true" /> if the objects are the same; <see langword="false" /> otherwise. 
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormal.op_Inequality(DigitalRune.Graphics.VertexPositionNormal,DigitalRune.Graphics.VertexPositionNormal)">
      <summary>
            Compares two objects to determine whether they are different. 
            </summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>
        <see langword="true" /> if the objects are different; <see langword="false" /> otherwise. 
            </returns>
    </member>
    <member name="F:DigitalRune.Graphics.VertexPositionNormal.Position">
      <summary>
            The vertex position.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.VertexPositionNormal.SizeInBytes">
      <summary>
            Gets the size of the <see cref="T:DigitalRune.Graphics.VertexPositionNormal" /> structure in bytes.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormal.ToString">
      <summary>
            Retrieves a string representation of this object.
            </summary>
      <returns>
            String representation of this object.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.VertexPositionNormal.VertexDeclaration">
      <summary>
            Gets the vertex declaration.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.VertexPositionNormalColor">
      <summary>
            Describes a custom vertex format structure that contains position, normal vector and color.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormalColor.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.VertexPositionNormalColor" /> struct.
            </summary>
      <param name="position">The position of the vertex.</param>
      <param name="normal">The normal of the vertex.</param>
      <param name="color">The color of the vertex.</param>
    </member>
    <member name="F:DigitalRune.Graphics.VertexPositionNormalColor.Color">
      <summary>
            The vertex color.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormalColor.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormalColor.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="F:DigitalRune.Graphics.VertexPositionNormalColor.Normal">
      <summary>
            The vertex normal vector.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormalColor.op_Equality(DigitalRune.Graphics.VertexPositionNormalColor,DigitalRune.Graphics.VertexPositionNormalColor)">
      <summary>
            Compares two objects to determine whether they are the same. 
            </summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>
        <see langword="true" /> if the objects are the same; <see langword="false" /> otherwise. 
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormalColor.op_Inequality(DigitalRune.Graphics.VertexPositionNormalColor,DigitalRune.Graphics.VertexPositionNormalColor)">
      <summary>
            Compares two objects to determine whether they are different. 
            </summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>
        <see langword="true" /> if the objects are different; <see langword="false" /> otherwise. 
            </returns>
    </member>
    <member name="F:DigitalRune.Graphics.VertexPositionNormalColor.Position">
      <summary>
            The vertex position.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.VertexPositionNormalColor.SizeInBytes">
      <summary>
            Gets the size of the <see cref="T:DigitalRune.Graphics.VertexPositionNormalColor" /> structure in bytes.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormalColor.ToString">
      <summary>
            Retrieves a string representation of this object.
            </summary>
      <returns>
            String representation of this object.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.VertexPositionNormalColor.VertexDeclaration">
      <summary>
            Gets the vertex declaration.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Deferred.AmbientLightRenderer">
      <summary>
            Renders ambient lights to the current render target (which must be the light buffer).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Deferred.AmbientLightRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Deferred.AmbientLightRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Deferred.AmbientLightRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.LightInstance},DigitalRune.Graphics.RenderContext)">
      <summary>
            Renders ambient lights to the current render target (which must be the light buffer).
            </summary>
      <param name="lightInstances">
            The light instances. All light instances of <see cref="T:DigitalRune.Graphics.AmbientLight" />s are rendered.
            Other light types are ignored.
            </param>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Deferred.CascadedShadowMaskRenderer">
      <summary>
            Creates the shadow mask from the shadow map of a light instance with a
            <see cref="T:DigitalRune.Graphics.Shadows.CascadedShadow" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Deferred.CascadedShadowMaskRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Deferred.CascadedShadowMaskRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Deferred.CascadedShadowMaskRenderer.Render(DigitalRune.Graphics.SceneGraph.LightInstance,DigitalRune.Graphics.RenderContext)">
      <summary>
            Renders the shadow mask for the specified light.
            </summary>
      <param name="lightInstance">
            The light instance. If this light instance has a <see cref="T:DigitalRune.Graphics.Shadows.CascadedShadow" /> with
            a shadow map, the shadow mask is rendered. Otherwise this method does nothing.
            </param>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Deferred.ClearGBufferRenderer">
      <summary>
            Clears the current render target (which must be the G-buffer).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Deferred.ClearGBufferRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Deferred.ClearGBufferRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Deferred.ClearGBufferRenderer.Render(DigitalRune.Graphics.RenderContext)">
      <summary>
            Clears the current render target (which must be the G-buffer).
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Deferred.CubeMapShadowMaskRenderer">
      <summary>
            Creates the shadow mask from the shadow map of a light instance with a
            <see cref="T:DigitalRune.Graphics.Shadows.CubeMapShadow" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Deferred.CubeMapShadowMaskRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Deferred.CubeMapShadowMaskRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Deferred.CubeMapShadowMaskRenderer.Render(DigitalRune.Graphics.SceneGraph.LightInstance,DigitalRune.Graphics.RenderContext)">
      <summary>
            Renders the shadow mask for the specified light.
            </summary>
      <param name="lightInstance">
            The light instance. If this light instance has a <see cref="T:DigitalRune.Graphics.Shadows.CubeMapShadow" /> with
            a shadow map, the shadow mask is rendered. Otherwise this method does nothing.
            </param>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Deferred.DirectionalLightRenderer">
      <summary>
            Renders directional lights to the current render target (which must be the light buffer).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Deferred.DirectionalLightRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Deferred.DirectionalLightRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Deferred.DirectionalLightRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.LightInstance},DigitalRune.Graphics.RenderContext)">
      <summary>
            Renders directional lights to the current render target (which must be the light buffer).
            </summary>
      <param name="lightInstances">
            The light instances. All light instances of <see cref="T:DigitalRune.Graphics.DirectionalLight" />s are rendered.
            Other light types are ignored.
            </param>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Deferred.PointLightRenderer">
      <summary>
            Renders point lights to the current render target (which must be the light buffer).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Deferred.PointLightRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Deferred.PointLightRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Deferred.PointLightRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.LightInstance},DigitalRune.Graphics.RenderContext)">
      <summary>
            Renders point lights to the current render target (which must be the light buffer).
            </summary>
      <param name="lightInstances">
            The light instances. All light instances of <see cref="T:DigitalRune.Graphics.PointLight" />s are rendered.
            Other light types are ignored.
            </param>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Deferred.ProjectorLightRenderer">
      <summary>
            Renders projector lights to the current render target (which must be the light buffer).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Deferred.ProjectorLightRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Deferred.ProjectorLightRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Deferred.ProjectorLightRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.LightInstance},DigitalRune.Graphics.RenderContext)">
      <summary>
            Renders projector lights to the current render target (which must be the light buffer).
            </summary>
      <param name="lightInstances">
            The light instances. All light instances of <see cref="T:DigitalRune.Graphics.ProjectorLight" />s are rendered.
            Other light types are ignored.
            </param>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Deferred.RebuildZBufferRenderer">
      <summary>
            Reconstructs the hardware Z-buffer from the G-buffer.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Deferred.RebuildZBufferRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Deferred.RebuildZBufferRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Deferred.RebuildZBufferRenderer.FarBiasScale">
      <summary>
            Gets or sets the far bias factor used to bias the camera far plane distance to avoid 
            z-fighting.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Deferred.RebuildZBufferRenderer.NearBiasScale">
      <summary>
            Gets or sets the near bias factor used to bias the camera near plane distance to avoid 
            z-fighting.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Deferred.RebuildZBufferRenderer.Render(DigitalRune.Graphics.RenderContext,System.Boolean)">
      <summary>
            Rebuilds the current hardware Z-buffer from the G-Buffer.
            </summary>
      <param name="context">The context.</param>
      <param name="preserveColor">
            If set to <see langword="true" /> color writes are disabled to preserve the current content;
            otherwise, <see langword="false" /> to clear the color target.
            </param>
    </member>
    <member name="T:DigitalRune.Graphics.Deferred.SpotlightRenderer">
      <summary>
            Renders spotlights to the current render target (which must be the light buffer).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Deferred.SpotlightRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Deferred.SpotlightRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Deferred.SpotlightRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.LightInstance},DigitalRune.Graphics.RenderContext)">
      <summary>
            Renders spotlights to the current render target (which must be the light buffer).
            </summary>
      <param name="lightInstances">
            The light instances. All light instances of <see cref="T:DigitalRune.Graphics.Spotlight" />s are rendered.
            Other light types are ignored.
            </param>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Deferred.StandardShadowMaskRenderer">
      <summary>
            Creates the shadow mask from the shadow map of a light instance with a
            <see cref="T:DigitalRune.Graphics.Shadows.StandardShadow" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Deferred.StandardShadowMaskRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Deferred.StandardShadowMaskRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Deferred.StandardShadowMaskRenderer.Render(DigitalRune.Graphics.SceneGraph.LightInstance,DigitalRune.Graphics.RenderContext)">
      <summary>
            Renders the shadow mask for the specified light.
            </summary>
      <param name="lightInstance">
            The light instance. If this light instance has a <see cref="T:DigitalRune.Graphics.Shadows.StandardShadow" /> with
            a shadow map, the shadow mask is rendered. Otherwise this method does nothing.
            </param>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.AlphaTestEffectBinding">
      <summary>
            Provides the logic for the <see cref="T:Microsoft.Xna.Framework.Graphics.AlphaTestEffect" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.AlphaTestEffectBinding.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.AlphaTestEffectBinding" /> class.
            (This constructor creates an uninitialized instance. Use this constructor only for cloning 
            or other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.AlphaTestEffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.AlphaTestEffectBinding" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.AlphaTestEffectBinding.AlphaFunction">
      <summary>
            Gets or sets the alpha compare function.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.AlphaTestEffectBinding.OnInitializeBindings(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Called when the effect technique and parameter bindings should be initialized.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.AlphaTestEffectBinding.ReferenceAlpha">
      <summary>
            Gets or sets the reference alpha value.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.AlphaTestEffectBinding.VertexColorEnabled">
      <summary>
            Gets or sets a value indicating whether vertex color is enabled.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.BasicEffectBinding">
      <summary>
            Provides the logic for the <see cref="T:Microsoft.Xna.Framework.Graphics.BasicEffect" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.BasicEffectBinding.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.BasicEffectBinding" /> class.
            (This constructor creates an uninitialized instance. Use this constructor only for cloning 
            or other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.BasicEffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.BasicEffectBinding" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.BasicEffectBinding.CloneCore(DigitalRune.Graphics.Effects.EffectBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.BasicEffectBinding.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.BasicEffectBinding.LightingEnabled">
      <summary>
            Gets or sets a value indicating whether lighting is enabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.BasicEffectBinding.OnInitializeBindings(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Called when the effect technique and parameter bindings should be initialized.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.BasicEffectBinding.PreferPerPixelLighting">
      <summary>
            Gets or sets a value indicating whether per-pixel lighting should be used.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.BasicEffectBinding.TextureEnabled">
      <summary>
            Gets or sets a value indicating whether texturing is enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.BasicEffectBinding.VertexColorEnabled">
      <summary>
            Gets or sets a value indicating whether vertex color is enabled.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.ByNameTechniqueBinding">
      <summary>
            Selects the technique where the technique name matches the current technique string of 
            the render context (see property <see cref="P:DigitalRune.Graphics.RenderContext.Technique" />e).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.ByNameTechniqueBinding.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.ByNameTechniqueBinding" /> class.
            </summary>
      <param name="effect">The effect.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.ByNameTechniqueBinding.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.ByNameTechniqueBinding.OnApply(Microsoft.Xna.Framework.Graphics.Effect,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect technique that should be used for renderering should be returned.
            </summary>
      <param name="effect">The effect.</param>
      <param name="context">The render context.</param>
      <returns>The effect technique that should be used for rendering.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.ByNameTechniqueBinding.OnUpdate(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect technique needs to be selected and <see cref="P:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Id" /> needs to be set.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1">
      <summary>
            Binds an effect parameter to an array of values.
            </summary>
      <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1" />.
            </typeparam>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1" /> class.
            (This constructor creates an uninitialized instance. Use this constructor only for cloning 
            or other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,`0[])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="values">The array of values.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" />, <paramref name="parameter" />, or <paramref name="values" /> is 
            <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of elements in <paramref name="values" /> does not match the number of elements of
            <paramref name="parameter" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="parameter" /> does not represent an array of values.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1.Values">
      <summary>
            Gets or sets the values of the effect parameter.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1">
      <summary>
            Binds an effect parameter to a value.
            </summary>
      <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1" />.
            </typeparam>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.ConstParameterBinding`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1" /> class.
            (This constructor creates an uninitialized instance. Use this constructor only for cloning 
            or other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.ConstParameterBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,`0)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="value">The value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.ConstParameterBinding`1.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.ConstParameterBinding`1.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.ConstParameterBinding`1.Value">
      <summary>
            Gets or sets the value of the effect parameter.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.DefaultEffectBinder">
      <summary>
            Provides the bindings for default effect parameters. 
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DefaultEffectBinder.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DefaultEffectBinder" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DefaultEffectBinder.GetBinding(Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Gets the binding that selects the technique for rendering the specified effect.
            </summary>
      <param name="effect">The effect.</param>
      <returns>
            The <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding" /> that selects the technique when
            <paramref name="effect" /> needs to be rendered. The method returns <see langword="null" /> if
            the effect binder is unable to provide a binding.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.DefaultEffectInterpreter">
      <summary>
            Provides the descriptions of the default effect parameters.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DefaultEffectInterpreter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DefaultEffectInterpreter" /> class.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics">
      <summary>
            Defines the standard semantics for default effect parameters.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.DiffuseColor">
      <summary>
            The diffuse material color as RGB (<see cref="T:Microsoft.Xna.Framework.Vector3" />) or RGBA (<see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.DiffuseTexture">
      <summary>
            The albedo texture (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.ElapsedTime">
      <summary>
            The time since the previous frame in seconds (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.EmissiveColor">
      <summary>
            The emissive material color as RGB (<see cref="T:Microsoft.Xna.Framework.Vector3" />) or RGBA (<see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.EmissiveTexture">
      <summary>
            The emissive texture (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.FresnelPower">
      <summary>
            The power of the fresnel term (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.GBuffer">
      <summary>
            A G-buffer texture (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture" /> or <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.LightBuffer">
      <summary>
            A light buffer texture (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture" /> or <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.NormalsFittingTexture">
      <summary>
            The normals fitting texture (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture" /> or <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />) for encoding
            "best fit" normals.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.NormalTexture">
      <summary>
            The surface normal texture (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.Opacity">
      <summary>
            The opacity as a single value (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.PassIndex">
      <summary>
            The zero-based index of the current effect pass (<see cref="T:System.Int32" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.ReferenceAlpha">
      <summary>
            The reference value (<see cref="T:System.Single" />) used for alpha testing.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.RenderTargetSize">
      <summary>
            The render target width and height in pixels (<see cref="T:Microsoft.Xna.Framework.Vector2" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.SourceTexture">
      <summary>
            The source texture which is usually the last backbuffer or the result of a previous
            post-processor (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.SpecularColor">
      <summary>
            The specular material color as RGB (<see cref="T:Microsoft.Xna.Framework.Vector3" />) or RGBA (<see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.SpecularPower">
      <summary>
            The material specular color exponent as a single value (<see cref="T:System.Single" />) or a
            per-component value (<see cref="T:Microsoft.Xna.Framework.Vector3" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.SpecularTexture">
      <summary>
            The gloss texture (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />) containing the specular intensity (not specular
            power).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.ViewportSize">
      <summary>
            The viewport width and height in pixels (<see cref="T:Microsoft.Xna.Framework.Vector2" />).
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1">
      <summary>
            Binds an effect parameter to an array of values computed by a callback method.
            </summary>
      <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1" />.
            </typeparam>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1" /> class.
            (This constructor creates an uninitialized instance. Use this constructor only for cloning 
            or other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Action{DigitalRune.Graphics.Effects.DelegateParameterArrayBinding{`0},DigitalRune.Graphics.RenderContext,`0[]})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="computeParameter">The callback method that computes the values.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" />, <paramref name="parameter" />, or 
            <paramref name="computeParameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="parameter" /> does not represent an array of values.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1.ComputeParameter">
      <summary>
            Gets or sets a method that computes the new values for the effect parameter.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1.OnUpdate(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter value needs to be updated.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1">
      <summary>
            Binds an effect parameter to a value computed by a callback method.
            </summary>
      <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1" />.
            </typeparam>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DelegateParameterBinding`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1" /> class.
            (This constructor creates an uninitialized instance. Use this constructor only for cloning 
            or other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DelegateParameterBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Func{DigitalRune.Graphics.Effects.DelegateParameterBinding{`0},DigitalRune.Graphics.RenderContext,`0})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="computeParameter">The callback method that computes the value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" />, <paramref name="parameter" />, or 
            <paramref name="computeParameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DelegateParameterBinding`1.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DelegateParameterBinding`1.ComputeParameter">
      <summary>
            Get or sets a method that computes the new value for the effect parameter.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DelegateParameterBinding`1.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DelegateParameterBinding`1.OnUpdate(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter value needs to be updated.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.DictionaryEffectBinder">
      <summary>
            Creates bindings for effect parameters using dictionaries with factory methods.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DictionaryEffectBinder" /> class</summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.BoolArrayBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:System.Boolean" />[] parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.BoolBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:System.Boolean" /> parameters.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectBinder.CreateConstParameterBinding``1(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
      <summary>
            Creates the <see cref="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1" /> for an effect parameter with a
            default value defined in opaque data.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The parameter.</param>
      <param name="opaqueData">The opaque data.</param>
      <param name="key">The key of an item in the opaque data.</param>
      <typeparam name="T">The type of the effect parameter.</typeparam>
      <returns>
            The <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectBinder.CreateConstParameterBindingVector3(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
      <summary>
            Creates the <see cref="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1" /> for an <strong>Vector3</strong> 
            effect parameter with a default value defined in opaque data. 
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The parameter.</param>
      <param name="opaqueData">The opaque data.</param>
      <param name="key">The key of an item in the opaque data.</param>
      <returns>
            The <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectBinder.CreateConstParameterBindingVector4(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Single)">
      <summary>
            Creates the <see cref="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1" /> for an <strong>Vector4</strong>
            effect parameter with a default value defined in opaque data.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The parameter.</param>
      <param name="opaqueData">The opaque data.</param>
      <param name="key">The key of an item in the opaque data.</param>
      <param name="defaultW">
            The default value for the fourth vector component. (If the default value in the opaque data
            is of type <strong>Vector3</strong> then the W component of the <strong>Vector4</strong>
            is set to this default value.)
            </param>
      <returns>
            The <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectBinder.CreateDelegateParameterArrayBinding``1(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Action{DigitalRune.Graphics.Effects.DelegateParameterArrayBinding{``0},DigitalRune.Graphics.RenderContext,``0[]})">
      <summary>
            Creates the <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1" /> for an effect parameter that 
            represents an array of values.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="computeParameter">The callback method that computes the values.</param>
      <typeparam name="T">The type of the effect parameter.</typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1" />.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectBinder.CreateDelegateParameterBinding``1(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Func{DigitalRune.Graphics.Effects.DelegateParameterBinding{``0},DigitalRune.Graphics.RenderContext,``0})">
      <summary>
            Creates the <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1" /> for an effect parameter.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="computeParameter">The callback method that computes the value.</param>
      <typeparam name="T">The type of the effect parameter.</typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1" />.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectBinder.GetBinding(Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Gets the binding that selects the technique for rendering the specified effect.
            </summary>
      <param name="effect">The effect.</param>
      <returns>
            The <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding" /> that selects the technique when
            <paramref name="effect" /> needs to be rendered. The method returns <see langword="null" /> if
            the effect binder is unable to provide a binding.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectBinder.GetBinding(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Gets the binding that provides the value for the specified effect parameter.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
      <returns>
            The <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> that should be applied to 
            <paramref name="parameter" />, or <see langword="null" /> if the effect binder is unable to 
            provide a binding.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Int32ArrayBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:System.Int32" />[] parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Int32Bindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:System.Int32" /> parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.MatrixArrayBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <strong>Matrix</strong>[] parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.MatrixBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <strong>Matrix</strong> parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.SingleArrayBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:System.Single" />[] parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.SingleBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:System.Single" /> parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Texture2DBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <strong>Texture2D</strong> parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Texture3DBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <strong>Texture3D</strong> parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.TextureBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <strong>Texture</strong> parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.TextureCubeBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <strong>TextureCube</strong> parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Vector2ArrayBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <strong>Vector2</strong>[] parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Vector2Bindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <strong>Vector2</strong> parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Vector3ArrayBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <strong>Vector3</strong>[] parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Vector3Bindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <strong>Vector3</strong> parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Vector4ArrayBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <strong>Vector4</strong>[] parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Vector4Bindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <strong>Vector4</strong> parameters.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.DictionaryEffectBinder.CreateEffectParameterBinding">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> for the given effect parameter.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
      <returns>
            The new <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> for <paramref name="parameter" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter">
      <summary>
            Provides description of effect techniques and parameters by comparing their names, semantics, 
            and annotations against a dictionary.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Interprets the specified effect parameter.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The description of the effect parameter, or <see langword="null" /> if the method was not 
            able to interpret the effect parameter.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectTechnique)">
      <summary>
            Interprets the specified effect technique.
            </summary>
      <param name="effect">The effect.</param>
      <param name="technique">The effect technique.</param>
      <returns>
            The description of the effect technique, or <see langword="null" /> if the method was 
            not able to interpret the effect technique.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter.ParameterDescriptions">
      <summary>
            Gets or sets factory methods for effect parameter descriptions.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter.TechniqueDescriptions">
      <summary>
            Gets or sets factory methods for effect technique descriptions.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter.CreateEffectParameterDescription">
      <summary>
            Creates the description for the specified effect parameter.
            </summary>
      <param name="parameter">The effect parameter.</param>
      <param name="index">The index.</param>
      <returns>The description of <paramref name="parameter" />.</returns>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter.CreateEffectTechniqueDescription">
      <summary>
            Creates the description for the specified effect technique.
            </summary>
      <param name="technique">The effect technique.</param>
      <returns>The description of <paramref name="technique" />.</returns>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.DualTextureEffectBinding">
      <summary>
            Provides the logic for the <see cref="T:Microsoft.Xna.Framework.Graphics.DualTextureEffect" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DualTextureEffectBinding.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DualTextureEffectBinding" /> class.
            (This constructor creates an uninitialized instance. Use this constructor only for cloning 
            or other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DualTextureEffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DualTextureEffectBinding" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DualTextureEffectBinding.CloneCore(DigitalRune.Graphics.Effects.EffectBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DualTextureEffectBinding.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DualTextureEffectBinding.OnInitializeBindings(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Called when the effect technique and parameter bindings should be initialized.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DualTextureEffectBinding.VertexColorEnabled">
      <summary>
            Gets or sets a value indicating whether vertex color is enabled.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.Dxsas08EffectInterpreter">
      <summary>
            Provides the descriptions effects using the <i>DirectX Standard Annotations and Semantics 
            (DXSAS)</i> version 0.8.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.Dxsas08EffectInterpreter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.Dxsas08EffectInterpreter" /> class</summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.Dxsas08EffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Interprets the specified effect parameter.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The description of the effect parameter, or <see langword="null" /> if the method was not 
            able to interpret the effect parameter.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.Dxsas08EffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectTechnique)">
      <summary>
            Interprets the specified effect technique.
            </summary>
      <param name="effect">The effect.</param>
      <param name="technique">The effect technique.</param>
      <returns>
            The description of the effect technique, or <see langword="null" /> if the method was 
            not able to interpret the effect technique.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectBinderCollection">
      <summary>
            Manages a collection of <see cref="T:DigitalRune.Graphics.Effects.IEffectBinder" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinderCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBinderCollection" /> class</summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinderCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Graphics.Effects.EffectBinderCollection" />. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> for <see cref="T:DigitalRune.Graphics.Effects.EffectBinderCollection" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinderCollection.InsertItem(System.Int32,DigitalRune.Graphics.Effects.IEffectBinder)">
      <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
      <param name="item">The object to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. 
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. 
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinderCollection.SetItem(System.Int32,DigitalRune.Graphics.Effects.IEffectBinder)">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. 
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. 
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectBinding">
      <summary>
            Provides the logic for rendering a specific 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> class.
            (This constructor creates an uninitialized instance. Use this constructor only for cloning 
            or other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> class which can store
            all kinds of effect parameters.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="effect">The effect.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> or <paramref name="effect" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.Effect,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> class which can be used in a 
            <see cref="T:DigitalRune.Graphics.Material" /> (only storing bindins for 
            <see cref="F:DigitalRune.Graphics.Effects.EffectParameterHint.Material" /> parameters).
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="effect">The effect.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> or <paramref name="effect" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.Effect,System.Collections.Generic.IDictionary{System.String,System.Object},DigitalRune.Graphics.Effects.EffectParameterHint)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> class with the given settings.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="effect">The effect.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
      <param name="hints">
            A bitwise combination of <see cref="T:DigitalRune.Graphics.Effects.EffectParameterHint" /> values. The value defines which
            parameter bindings can be added to the effect binding.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> or <paramref name="effect" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> that is a clone of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> that is a clone of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.CloneCore(DigitalRune.Graphics.Effects.EffectBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectBinding.Effect">
      <summary>
            Gets the effect.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectBinding.Hints">
      <summary>
            Gets a value indicating which effect parameters are handled by this effect binding.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectBinding.KeepOpaqueData">
      <summary>
            Gets or sets a value indicating whether <see cref="P:DigitalRune.Graphics.Effects.EffectBinding.OpaqueData" /> should be kept for 
            debugging.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.OnInitializeBindings(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Called when the effect technique and parameter bindings should be initialized.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectBinding.OpaqueData">
      <summary>
            Gets the opaque data (only used for debugging, only set if <see cref="P:DigitalRune.Graphics.Effects.EffectBinding.KeepOpaqueData" />
            is <see langword="true" />).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectBinding.ParameterBindings">
      <summary>
            Gets the bindings that resolve effect parameters.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(Microsoft.Xna.Framework.Graphics.EffectParameter,System.Action{DigitalRune.Graphics.Effects.DelegateParameterArrayBinding{``0},DigitalRune.Graphics.RenderContext,``0[]})">
      <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1" /> for the specified effect parameter.
            </summary>
      <param name="parameter">The effect parameter to which the binding is applied.</param>
      <param name="computeParameter">
            The callback function that computes the parameter values.
            </param>
      <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1" />.
            </typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1" /> that has been set.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(Microsoft.Xna.Framework.Graphics.EffectParameter,System.Func{DigitalRune.Graphics.Effects.DelegateParameterBinding{``0},DigitalRune.Graphics.RenderContext,``0})">
      <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1" /> for the specified effect parameter.
            </summary>
      <param name="parameter">
            The effect parameter to which the binding is applied.
            </param>
      <param name="computeParameter">The callback function that computes the value.</param>
      <typeparam name="T">The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1" />.</typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1" /> that has been set.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(Microsoft.Xna.Framework.Graphics.EffectParameter,``0)">
      <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1" /> for the specified effect parameter.
            </summary>
      <param name="parameter">
            The effect parameter to which the binding is applied.
            </param>
      <param name="value">The value.</param>
      <typeparam name="T">The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1" />.</typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1" /> that has been set.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(Microsoft.Xna.Framework.Graphics.EffectParameter,``0[])">
      <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1" /> for the specified effect parameter.
            </summary>
      <param name="parameter">
            The effect parameter to which the binding is applied.
            </param>
      <param name="values">The array of values.</param>
      <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1" />.
            </typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1" /> that has been set.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(System.String,System.Action{DigitalRune.Graphics.Effects.DelegateParameterArrayBinding{``0},DigitalRune.Graphics.RenderContext,``0[]})">
      <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1" /> for the effect parameter with the 
            specified name.
            </summary>
      <param name="name">
            The name of the effect parameter to which the binding is applied.
            </param>
      <param name="computeParameter">
            The callback function that computes the parameter values.
            </param>
      <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1" />.
            </typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1" /> that has been set.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty.
            </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /> does not contain an <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> with the given name.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(System.String,System.Func{DigitalRune.Graphics.Effects.DelegateParameterBinding{``0},DigitalRune.Graphics.RenderContext,``0})">
      <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1" /> for the effect parameter with the specified
            name.
            </summary>
      <param name="name">
            The name of the effect parameter to which the binding is applied.
            </param>
      <param name="computeParameter">The callback function that computes the value.</param>
      <typeparam name="T">The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1" />.</typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1" /> that has been set.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty.
            </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /> does not contain an <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> with the given name.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(System.String,``0)">
      <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1" /> for the effect parameter with the given name.
            </summary>
      <param name="name">
            The name of the effect parameter to which the binding is applied.
            </param>
      <param name="value">The value.</param>
      <typeparam name="T">The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1" />.</typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1" /> that has been set.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty.
            </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /> does not contain an <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> with the given name.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(System.String,``0[])">
      <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1" /> for the effect parameter with the 
            specified name.
            </summary>
      <param name="name">
            The name of the effect parameter to which the binding is applied.
            </param>
      <param name="values">The array of values.</param>
      <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1" />.
            </typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1" /> that has been set.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty.
            </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /> does not contain an <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> with the given name.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.System#ICloneable#Clone">
      <summary>
            Creates a new object that is a clone of the current instance.
            </summary>
      <returns>A new object that is a clone of this instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectBinding.TechniqueBinding">
      <summary>
            Gets or sets the binding that resolves the effect technique.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectBinding.UserData">
      <summary>
            Gets or sets user-defined data.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectBindingException">
      <summary>
            Occurs if an effect binding fails.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBindingException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBindingException" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBindingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBindingException" /> class with 
            serialized data.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the 
            exception being thrown.
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or 
            destination.
            </param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBindingException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBindingException" /> class with a 
            specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBindingException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBindingException" /> class with a 
            specified error message and a reference to the inner exception that is the cause of this 
            exception.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">
            The exception that is the cause of the current exception, or <see langword="null" /> if no 
            inner exception is specified.
            </param>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectHelper">
      <summary>
            Provides extension methods for the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /> class and related types.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetColor(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as <see cref="T:Microsoft.Xna.Framework.Color" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as <see cref="T:Microsoft.Xna.Framework.Color" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Color" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetColorVector3(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as a RGB color represented as
            <see cref="T:Microsoft.Xna.Framework.Vector3" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as a RGB color represented as
            <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetColorVector3F(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as a RGB color represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as a RGB color represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetColorVector4(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as a RGBA color represented as
            <see cref="T:Microsoft.Xna.Framework.Vector4" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as a RGBA color represented as
            <see cref="T:Microsoft.Xna.Framework.Vector4" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector4" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetColorVector4F(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as a RGBA color represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as a RGBA color represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetDirectionVector3(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as direction vector represented as 
            <see cref="T:Microsoft.Xna.Framework.Vector3" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as direction vector represented as 
            <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetDirectionVector3F(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as a direction vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as a direction vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetDirectionVector4(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as a direction vector represented as
            <see cref="T:Microsoft.Xna.Framework.Vector4" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as a direction vector represented as
            <see cref="T:Microsoft.Xna.Framework.Vector4" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector4" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetDirectionVector4F(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as a direction vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as a direction vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetParameterBindings(Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Gets the default effect parameter bindings of the specified effect.
            </summary>
      <param name="effect">The effect.</param>
      <returns>The default effect parameter bindings.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetParameterDescriptions(Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Gets the effect parameter descriptions of the specified effect.
            </summary>
      <param name="effect">The effect.</param>
      <returns>The effect parameter descriptions.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetPositionVector3(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as position vector represented as 
            <see cref="T:Microsoft.Xna.Framework.Vector3" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as position vector represented as 
            <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetPositionVector3F(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as a position vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as a position vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetPositionVector4(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as a position vector represented as
            <see cref="T:Microsoft.Xna.Framework.Vector4" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as a position vector represented as
            <see cref="T:Microsoft.Xna.Framework.Vector4" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector4" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetPositionVector4F(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as a position vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as a position vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetTechniqueBinding(Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Gets the default effect technique binding of the specified effect.
            </summary>
      <param name="effect">The effect.</param>
      <returns>The default effect technique binding.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetTechniqueDescriptions(Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Gets the technique descriptions of the specified effect.
            </summary>
      <param name="effect">The effect.</param>
      <returns>The effect technique descriptions.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetColor(Microsoft.Xna.Framework.Graphics.EffectParameter,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Sets the value of the effect parameter to a RGB color.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="color">The color given as <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetColor(Microsoft.Xna.Framework.Graphics.EffectParameter,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Sets the value of the effect parameter to a RGBA color.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="color">The color given as <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetColor(Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Color)">
      <summary>
            Sets the value of the effect parameter.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="color">The color given as <see cref="T:Microsoft.Xna.Framework.Color" />.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Color" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetColor(Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Sets the value of the effect parameter to a RGB color.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="color">The color given as <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetColor(Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Vector4)">
      <summary>
            Sets the value of the effect parameter to a RGBA color.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="color">The color given as <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector4" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetDirection(Microsoft.Xna.Framework.Graphics.EffectParameter,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Sets the value of the effect parameter to a direction vector.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="direction">The direction given as <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetDirection(Microsoft.Xna.Framework.Graphics.EffectParameter,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Sets the value of the effect parameter to a direction vector.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="direction">The direction given as <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetDirection(Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Sets the value of the effect parameter as a direction vector.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="direction">The direction.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Color" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetDirection(Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Vector4)">
      <summary>
            Sets the value of the effect parameter to a direction vector.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="direction">The direction given as <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector4" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetPosition(Microsoft.Xna.Framework.Graphics.EffectParameter,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Sets the value of the effect parameter to a position vector.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="position">The position given as <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetPosition(Microsoft.Xna.Framework.Graphics.EffectParameter,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Sets the value of the effect parameter to a position vector.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="position">The position given as <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetPosition(Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Sets the value of the effect parameter as a position vector.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="position">The position.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Color" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetPosition(Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Vector4)">
      <summary>
            Sets the value of the effect parameter to a position vector.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="position">The position given as <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector4" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectInterpreterCollection">
      <summary>
            Manages a collection of <see cref="T:DigitalRune.Graphics.Effects.IEffectInterpreter" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectInterpreterCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectInterpreterCollection" /> class</summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectInterpreterCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectInterpreterCollection" />. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> for <see cref="T:DigitalRune.Graphics.Effects.EffectInterpreterCollection" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectInterpreterCollection.InsertItem(System.Int32,DigitalRune.Graphics.Effects.IEffectInterpreter)">
      <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
      <param name="item">The object to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. 
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. 
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectInterpreterCollection.SetItem(System.Int32,DigitalRune.Graphics.Effects.IEffectInterpreter)">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. 
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. 
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1">
      <summary>
            Binds an effect parameter to an array of values of a given type.
            </summary>
      <typeparam name="T">
            The value type. Must be one of the following types: 
            <see cref="T:System.Boolean" />, 
            <see cref="T:System.Int32" />, 
            <see cref="T:Microsoft.Xna.Framework.Matrix" />, 
            <see cref="T:Microsoft.Xna.Framework.Quaternion" />, 
            <see cref="T:System.Single" />, 
            <see cref="T:Microsoft.Xna.Framework.Vector2" />, 
            <see cref="T:Microsoft.Xna.Framework.Vector3" />, 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />, 
            </typeparam>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1" /> class.
            (This constructor creates an uninitialized instance. Use this constructor only for cloning 
            or other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,`0)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1" /> class with 
            the given value.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="value">The initial value for all elements of the value array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="parameter" /> does not represent an array of values.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,`0[])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1" /> class with 
            the given array of values.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="values">The initial values.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" />, <paramref name="parameter" />, or <paramref name="values" /> is 
            <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="parameter" /> does not represent an array of values.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.GetValueHashCode">
      <summary>
            Gets the hash code of the value.
            </summary>
      <returns>The hash code of the value.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.OnApply(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter needs to be applied.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.OnUpdate(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter value needs to be updated.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.ValueEquals(DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Compares the value of this effect parameter binding with the value of another binding.
            </summary>
      <param name="other">The other effect parameter binding.</param>
      <returns>
        <see langword="true" /> if the values of the two bindings are of the same type and have the
            same values; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.Values">
      <summary>
            Gets (or sets) the values of the effect parameter.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectParameterBinding">
      <summary>
            Binds a parameter of an effect to a certain value.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> class.
            (This constructor creates an uninitialized instance. Use this constructor only for cloning 
            or other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="parameter" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Apply(DigitalRune.Graphics.RenderContext)">
      <summary>
            Applies the value to the effect parameter.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> that is a clone of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> that is a clone of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectParameterBinding.Description">
      <summary>
            Gets the description of the effect parameter.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.GetValueHashCode">
      <summary>
            Gets the hash code of the value.
            </summary>
      <returns>The hash code of the value.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.OnApply(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter value needs to be applied.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.OnUpdate(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter value needs to be updated.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectParameterBinding.Parameter">
      <summary>
            Gets the effect parameter.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.System#ICloneable#Clone">
      <summary>
            Creates a new object that is a clone of the current instance.
            </summary>
      <returns>A new object that is a clone of this instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Update(DigitalRune.Graphics.RenderContext)">
      <summary>
            Updates the value of the binding.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.ValueEquals(DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Compares the value of this effect parameter binding with the value of another binding.
            </summary>
      <param name="other">The other effect parameter binding.</param>
      <returns>
        <see langword="true" /> if the values of the two bindings are of the same type and have the
            same values; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1">
      <summary>
            Binds an effect parameter to a value of a given type.
            </summary>
      <typeparam name="T">
            The value type. Must be one of the following types: 
            <see cref="T:System.Boolean" />, 
            <see cref="T:System.Int32" />, 
            <see cref="T:Microsoft.Xna.Framework.Matrix" />, 
            <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" />, 
            <see cref="T:Microsoft.Xna.Framework.Quaternion" />, 
            <see cref="T:System.Single" />, 
            <see cref="T:System.String" />, 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Texture" />, 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />, 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Texture3D" />, 
            <see cref="T:Microsoft.Xna.Framework.Graphics.TextureCube" />, 
            <see cref="T:Microsoft.Xna.Framework.Vector2" />, 
            <see cref="T:Microsoft.Xna.Framework.Vector3" />, 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />, 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />, 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />, 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </typeparam>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1" /> class.
            (This constructor creates an uninitialized instance. Use this constructor only for cloning 
            or other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,`0)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> class with the given 
            value.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="value">The initial value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.GetValueHashCode">
      <summary>
            Gets the hash code of the value.
            </summary>
      <returns>The hash code of the value.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.OnApply(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter value needs to be applied.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.OnUpdate(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter value needs to be updated.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectParameterBinding`1.Value">
      <summary>
            Gets (or sets) the value of the effect parameter.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.ValueEquals(DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Compares the value of this effect parameter binding with the value of another binding.
            </summary>
      <param name="other">The other effect parameter binding.</param>
      <returns>
        <see langword="true" /> if the values of the two bindings are of the same type and have the
            same values; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectParameterBindingCollection">
      <summary>
            Manages a collection of <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.Contains(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Determines whether the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBindingCollection" /> contains an 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> for the specified effect parameter.
            </summary>
      <param name="parameter">
            The <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </param>
      <returns>
        <see langword="true" /> if the collection contains a binding for the specified effect 
            parameter; otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameter" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.Contains(System.String)">
      <summary>
            Determines whether the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBindingCollection" /> contains an 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> for the effect parameter with the specified name.
            </summary>
      <param name="name">
            The name of the <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> in the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </param>
      <returns>
        <see langword="true" /> if the collection contains a binding for the effect parameter with 
            the given name; otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBindingCollection" />. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBindingCollection" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.Hints">
      <summary>
            Gets a value indicating which effect parameters can be added to this collection.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.IndexOf(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Searches for the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> with the specified effect parameter 
            and returns the zero-based index. 
            </summary>
      <param name="parameter">
            The <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </param>
      <returns>
            The zero-based index of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> within the entire
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBindingCollection" />, if found; otherwise, -1. 
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameter" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.IndexOf(System.String)">
      <summary>
            Searches for the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> for the effect parameter with the 
            specified name and returns the zero-based index. 
            </summary>
      <param name="name">
            The name of the <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> in the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </param>
      <returns>
            The zero-based index of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> within the entire
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBindingCollection" />, if found; otherwise, -1. 
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.InsertItem(System.Int32,DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Inserts the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> at the specified index.
            </summary>
      <param name="index">The index.</param>
      <param name="binding">The new effect parameter binding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="binding" /> does not belong to the same <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            An <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> for the same <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> already
            exists.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.Item(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> for the specified effect parameter.
            </summary>
      <param name="parameter"> The effect parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameter" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> for the effect parameter with the specified 
            name.
            </summary>
      <param name="name">The name of the effect parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.Remove(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Removes the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> with the specified effect parameter.
            </summary>
      <param name="parameter">
            The <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> to remove.
            </param>
      <returns>
        <see langword="true" /> if the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> was removed successfully; 
            otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameter" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.Remove(System.String)">
      <summary>
            Removes the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> for the effect parameter with the specified 
            name.
            </summary>
      <param name="name">
            The name of the <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> in the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> to
            remove.
            </param>
      <returns>
        <see langword="true" /> if the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> was removed successfully; 
            otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.SetItem(System.Int32,DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Sets the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> at the specified index.
            </summary>
      <param name="index">The index of the effect parameter binding.</param>
      <param name="binding">The new effect parameter binding.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binding" /> does not belong to the same <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            An <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> for the same <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> already
            exists.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectParameterDescription">
      <summary>
            Describes a parameter of an effect.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterDescription.#ctor(Microsoft.Xna.Framework.Graphics.EffectParameter,System.String,System.Int32,DigitalRune.Graphics.Effects.EffectParameterHint)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescription" /> class.
            </summary>
      <param name="parameter">The effect parameter.</param>
      <param name="semantic">The semantic.</param>
      <param name="index">The index.</param>
      <param name="hint">
            A value indicating how the effect parameter should be treated during state sorting.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Invalid <paramref name="index" />. Allowed values are -1, 0, and positive numbers.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hint" /> is invalid.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectParameterDescription.Hint">
      <summary>
            Gets a value indicating how the effect parameter should be treated during state sorting.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectParameterDescription.Index">
      <summary>
            Gets the zero-based index.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectParameterDescription.Parameter">
      <summary>
            Gets the effect parameter.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectParameterDescription.Semantic">
      <summary>
            Gets the standard semantic (case-sensitive).
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection">
      <summary>
            Stores an <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescription" /> for all parameters of an effect.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection.ClearItems">
      <summary>
            Removes all elements from the collection.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection.GetKeyForItem(DigitalRune.Graphics.Effects.EffectParameterDescription)">
      <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
      <param name="item">The element from which to extract the key.</param>
      <returns>The key for the specified element.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection.InsertItem(System.Int32,DigitalRune.Graphics.Effects.EffectParameterDescription)">
      <summary>
            Inserts an element into the collection at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
      <param name="item">The object to insert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection.RemoveItem(System.Int32)">
      <summary>
            Removes the element at the specified index of the collection.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or <paramref name="index" /> is equal to or 
            greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection.SetItem(System.Int32,DigitalRune.Graphics.Effects.EffectParameterDescription)">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection.TryGet(Microsoft.Xna.Framework.Graphics.EffectParameter,DigitalRune.Graphics.Effects.EffectParameterDescription@)">
      <summary>
            Gets the description for the specified effect parameter.
            </summary>
      <param name="parameter">The effect parameter.</param>
      <param name="description">
            The description for the specified effect parameter, if the parameter is found; otherwise, 
            <see langword="null" />.
            </param>
      <returns>
        <see langword="true" /> if the collection contains a description for the effect parameter; 
            otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameter" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectParameterHint">
      <summary>
            Indicates how an effect parameter should be treated during state sorting.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.EffectParameterHint.PerPass">
      <summary>
            The effect parameter needs to be updated and applied once per effect pass.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.EffectParameterHint.PerInstance">
      <summary>
            The effect parameter is unique for each mesh.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.EffectParameterHint.Local">
      <summary>
            The effect parameter depends on the location of the mesh in the scene.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.EffectParameterHint.Material">
      <summary>
            The effect parameter defines the material of a mesh.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.EffectParameterHint.Global">
      <summary>
            The effect parameter is identical for all meshes that use the same effect/technique.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.EffectParameterHint.Any">
      <summary>
            Any of the other values.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding">
      <summary>
            Selects a technique when rendering a certain effect.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding" /> class</summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Apply(Microsoft.Xna.Framework.Graphics.Effect,DigitalRune.Graphics.RenderContext)">
      <summary>
            Gets the effect technique that should be used for rendering.
            </summary>
      <param name="effect">The effect.</param>
      <param name="context">The render context.</param>
      <returns>The effect technique that should be used for rendering.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding" /> that is a clone of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding" /> that is a clone of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.CloneCore(DigitalRune.Graphics.Effects.EffectTechniqueBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Default">
      <summary>
            The default effect technique binding.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Id">
      <summary>
            Gets (or sets) an ID, which can be used for state-sorting.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.OnApply(Microsoft.Xna.Framework.Graphics.Effect,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect technique that should be used for renderering should be returned.
            </summary>
      <param name="effect">The effect.</param>
      <param name="context">The render context.</param>
      <returns>The effect technique that should be used for rendering.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.OnUpdate(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect technique needs to be selected and <see cref="P:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Id" /> needs to be set.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.System#ICloneable#Clone">
      <summary>
            Creates a new object that is a clone of the current instance.
            </summary>
      <returns>A new object that is a clone of this instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Update(DigitalRune.Graphics.RenderContext)">
      <summary>
            Selects a technique for rendering the specified effect and sets the ID.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectTechniqueDescription">
      <summary>
            Describes a technique of an effect.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueDescription.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectTechnique)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueDescription" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <param name="technique">The effect technique.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="technique" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectTechniqueDescription.Index">
      <summary>
            Gets the index of the effect technique.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectTechniqueDescription.InstancingTechnique">
      <summary>
            Gets the associated effect technique that supports hardware instancing.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectTechniqueDescription.Technique">
      <summary>
            Gets the effect technique.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection">
      <summary>
            Stores an <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueDescription" /> for all techniques of an effect.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection.ClearItems">
      <summary>
            Removes all elements from the collection.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection.InsertItem(System.Int32,DigitalRune.Graphics.Effects.EffectTechniqueDescription)">
      <summary>
            Inserts an element into the collection at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
      <param name="item">The object to insert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection.Item(Microsoft.Xna.Framework.Graphics.EffectTechnique)">
      <summary>
            Gets the <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueDescription" /> for the specified technique.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection.RemoveItem(System.Int32)">
      <summary>
            Removes the element at the specified index of the collection.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or <paramref name="index" /> is equal to or 
            greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection.SetItem(System.Int32,DigitalRune.Graphics.Effects.EffectTechniqueDescription)">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EnvironmentMapEffectBinding">
      <summary>
            Provides the logic for the <see cref="T:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EnvironmentMapEffectBinding.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EnvironmentMapEffectBinding" /> class.
            (This constructor creates an uninitialized instance. Use this constructor only for cloning 
            or other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EnvironmentMapEffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EnvironmentMapEffectBinding" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EnvironmentMapEffectBinding.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EnvironmentMapEffectBinding.OnInitializeBindings(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Called when the effect technique and parameter bindings should be initialized.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.IEffectBinder">
      <summary>
            Creates bindings for effect techniques and parameters.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.IEffectBinder.GetBinding(Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Gets the binding that selects the technique for rendering the specified effect.
            </summary>
      <param name="effect">The effect.</param>
      <returns>
            The <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding" /> that selects the technique when
            <paramref name="effect" /> needs to be rendered. The method returns <see langword="null" /> if
            the effect binder is unable to provide a binding.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.IEffectBinder.GetBinding(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Gets the binding that provides the value for the specified effect parameter.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
      <returns>
            The <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> that should be applied to 
            <paramref name="parameter" />, or <see langword="null" /> if the effect binder is unable to 
            provide a binding.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.IEffectInterpreter">
      <summary>
            Interprets effects and provides descriptions for effect techniques and parameters.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.IEffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Interprets the specified effect parameter.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The description of the effect parameter, or <see langword="null" /> if the method was not 
            able to interpret the effect parameter.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.IEffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectTechnique)">
      <summary>
            Interprets the specified effect technique.
            </summary>
      <param name="effect">The effect.</param>
      <param name="technique">The effect technique.</param>
      <returns>
            The description of the effect technique, or <see langword="null" /> if the method was 
            not able to interpret the effect technique.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.NullParameterArrayBinding`1">
      <summary>
            Empty binding for effect parameter array. Does nothing.
            </summary>
      <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1" />.
            </typeparam>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.NullParameterArrayBinding`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.NullParameterArrayBinding`1" /> class.
            (This constructor creates an uninitialized instance. Use this constructor only for cloning 
            or other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.NullParameterArrayBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.NullParameterArrayBinding`1" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.NullParameterArrayBinding`1.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.NullParameterArrayBinding`1.OnApply(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter needs to be applied.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.NullParameterBinding`1">
      <summary>
            Empty binding for effect parameter. Does nothing.
            </summary>
      <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1" />.
            </typeparam>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.NullParameterBinding`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.NullParameterBinding`1" /> class.
            (This constructor creates an uninitialized instance. Use this constructor only for cloning 
            or other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.NullParameterBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.NullParameterBinding`1" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.NullParameterBinding`1.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.NullParameterBinding`1.OnApply(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter value needs to be applied.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.SceneEffectBinder">
      <summary>
            Provides effect bindings for rendering a <see cref="T:DigitalRune.Graphics.SceneGraph.IScene" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SceneEffectBinder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.SceneEffectBinder" /> class.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.SceneEffectInterpreter">
      <summary>
            Provides the descriptions for effects used in a <see cref="T:DigitalRune.Graphics.SceneGraph.IScene" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SceneEffectInterpreter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.SceneEffectInterpreter" /> class.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics">
      <summary>
            Defines the standard semantics for effect parameters used in a <see cref="T:DigitalRune.Graphics.SceneGraph.IScene" />.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.AmbientLight">
      <summary>
            The intensity of an ambient light (RGB as <see cref="T:Microsoft.Xna.Framework.Vector3" /> or RGBA as 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.AmbientLightAttenuation">
      <summary>
            The hemispheric attenuation facotr of the ambient light (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.Bones">
      <summary>
            The skinning matrices for mesh skinning (array of <strong>Matrix</strong>).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.CameraDirection">
      <summary>
            The camera direction in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.CameraFar">
      <summary>
            The distance of the camera far plane (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.CameraNear">
      <summary>
            The distance of the camera near plane (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.CameraPosition">
      <summary>
            The camera position in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightDiffuse">
      <summary>
            The diffuse intensity of a directional light (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightDirection">
      <summary>
            The light direction in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightSpecular">
      <summary>
            The specular intensity of a directional light (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightTexture">
      <summary>
            The texture of a directional light (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightTextureOffset">
      <summary>
            The texture offset of a directional light (<see cref="T:Microsoft.Xna.Framework.Vector2" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightTextureScale">
      <summary>
            The texture scale of a directional light (<see cref="T:Microsoft.Xna.Framework.Vector2" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.FogColor">
      <summary>
            The fog color (RGBA as <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastCameraDirection">
      <summary>
            The camera direction of the last framee in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastCameraPosition">
      <summary>
            The camera position of the last frame in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastPosition">
      <summary>
            The position of the object in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />)
            of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastProjection">
      <summary>
            The projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastProjectionInverse">
      <summary>
            The inverse projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastProjectionInverseTranspose">
      <summary>
            The transposed, inverse projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastProjectionTranspose">
      <summary>
            The transposed projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastView">
      <summary>
            The view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastViewInverse">
      <summary>
            The inverse view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastViewInverseTranspose">
      <summary>
            The transposed, inverse view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastViewProjection">
      <summary>
            The view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastViewProjectionInverse">
      <summary>
            The inverse view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastViewProjectionInverseTranspose">
      <summary>
            The transposed, inverse view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastViewProjectionTranspose">
      <summary>
            The transposed view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastViewTranspose">
      <summary>
            The transposed view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorld">
      <summary>
            The world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldInverse">
      <summary>
            The inverse world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldInverseTranspose">
      <summary>
            The transposed, inverse world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldTranspose">
      <summary>
            The transposed world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldView">
      <summary>
            The world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldViewInverse">
      <summary>
            The inverse world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldViewInverseTranspose">
      <summary>
            The transposed, inverse world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldViewProjection">
      <summary>
            The world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldViewProjectionInverse">
      <summary>
            The inverse world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldViewProjectionInverseTranspose">
      <summary>
            The transposed, inverse world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldViewProjectionTranspose">
      <summary>
            The transposed world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldViewTranspose">
      <summary>
            The transposed world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.PointLightAttenuation">
      <summary>
            The attenuation exponent of a point light (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.PointLightDiffuse">
      <summary>
            The diffuse intensity of a point light (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.PointLightPosition">
      <summary>
            The position of a point light in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.PointLightRange">
      <summary>
            The range of a point light (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.PointLightSpecular">
      <summary>
            The specular intensity of a point light (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.PointLightTexture">
      <summary>
            The texture of a point light (<see cref="T:Microsoft.Xna.Framework.Graphics.TextureCube" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.Position">
      <summary>
            The position of the object in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.Projection">
      <summary>
            The projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectionInverse">
      <summary>
            The inverse projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectionInverseTranspose">
      <summary>
            The transposed, inverse projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectionTranspose">
      <summary>
            The transposed projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightAttenuation">
      <summary>
            The attenutation exponent of a projector light (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightDiffuse">
      <summary>
            The diffuse intensity of a projector light (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightDirection">
      <summary>
            The direction of a projector light in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightPosition">
      <summary>
            The position of a projector light in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightRange">
      <summary>
            The range of a projector light (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightSpecular">
      <summary>
            The specular intensity of a projector light (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightTexture">
      <summary>
            The texture that is projected by the projector light.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightViewProjection">
      <summary>
            The view-projection matrix of the projector light.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightAttenuation">
      <summary>
            The attenuation exponent of a spotlight (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightCutoffAngle">
      <summary>
            The cutoff (penumbra) angle of the spotlight in radians (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightDiffuse">
      <summary>
            The diffuse intensity of a spotlight (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightDirection">
      <summary>
            The direction of a spotlight in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightFalloffAngle">
      <summary>
            The falloff (umbra) angle of the spotlight in radians (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightPosition">
      <summary>
            The position of a spotlight in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightRange">
      <summary>
            The range of a spotlight (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightSpecular">
      <summary>
            The specular intensity of a spotlight (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightTexture">
      <summary>
            The texture of a spotlight (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.View">
      <summary>
            The view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ViewInverse">
      <summary>
            The inverse view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ViewInverseTranspose">
      <summary>
            The transposed, inverse view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ViewProjection">
      <summary>
            The view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ViewProjectionInverse">
      <summary>
            The inverse view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ViewProjectionInverseTranspose">
      <summary>
            The transposed, inverse view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ViewProjectionTranspose">
      <summary>
            The transposed view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ViewTranspose">
      <summary>
            The transposed view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.World">
      <summary>
            The world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldInverse">
      <summary>
            The inverse world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldInverseTranspose">
      <summary>
            The transposed, inverse world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldTranspose">
      <summary>
            The transposed world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldView">
      <summary>
            The world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldViewInverse">
      <summary>
            The inverse world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldViewInverseTranspose">
      <summary>
            The transposed, inverse world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldViewProjection">
      <summary>
            The world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldViewProjectionInverse">
      <summary>
            The inverse world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldViewProjectionInverseTranspose">
      <summary>
            The transposed, inverse world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldViewProjectionTranspose">
      <summary>
            The transposed world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldViewTranspose">
      <summary>
            The transposed world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding">
      <summary>
            Binds an <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> to the skinning matrices of <see cref="T:DigitalRune.Animation.Character.SkeletonPose" />
            of the current <see cref="T:DigitalRune.Graphics.SceneGraph.MeshInstance" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding" /> class.
            (This constructor creates an uninitialized instance. Use this constructor only for cloning 
            or other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="parameter" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding.GetValueHashCode">
      <summary>
            Gets the hash code of the value.
            </summary>
      <returns>The hash code of the value.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding.OnApply(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter value needs to be applied.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding.OnUpdate(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter value needs to be updated.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding.Value">
      <summary>
            Gets or sets the skeleton pose.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding.ValueEquals(DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Compares the value of this effect parameter binding with the value of another binding.
            </summary>
      <param name="other">The other effect parameter binding.</param>
      <returns>
        <see langword="true" /> if the values of the two bindings are of the same type and have the
            same values; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.SkinnedEffectBinding">
      <summary>
            Provides the logic for the <see cref="T:Microsoft.Xna.Framework.Graphics.SkinnedEffect" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkinnedEffectBinding.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.SkinnedEffectBinding" /> class.
            (This constructor creates an uninitialized instance. Use this constructor only for cloning 
            or other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkinnedEffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.SkinnedEffectBinding" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkinnedEffectBinding.CloneCore(DigitalRune.Graphics.Effects.EffectBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkinnedEffectBinding.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkinnedEffectBinding.OnInitializeBindings(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Called when the effect technique and parameter bindings should be initialized.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.SkinnedEffectBinding.PreferPerPixelLighting">
      <summary>
            Gets or sets a value indicating whether per-pixel lighting should be used.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.SkinnedEffectBinding.WeightsPerVertex">
      <summary>
            Gets or sets the max number of bone weights per vertex.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.StockEffectBinder">
      <summary>
            Provides bindings for the XNA stock effects.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.StockEffectBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.StockEffectBinder" /> class</summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.StockEffectBinder.GetBinding(Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Gets the binding that selects the technique for rendering the specified effect.
            </summary>
      <param name="effect">The effect.</param>
      <returns>
            The <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding" /> that selects the technique when
            <paramref name="effect" /> needs to be rendered. The method returns <see langword="null" /> if
            the effect binder is unable to provide a binding.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.StockEffectBinder.GetBinding(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Gets the binding that provides the value for the specified effect parameter.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
      <returns>
            The <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> that should be applied to 
            <paramref name="parameter" />, or <see langword="null" /> if the effect binder is unable to 
            provide a binding.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.StockEffectInterpreter">
      <summary>
            Provides the descriptions for XNA stock effects.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.StockEffectInterpreter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.StockEffectInterpreter" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.StockEffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Interprets the specified effect parameter.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The description of the effect parameter, or <see langword="null" /> if the method was not 
            able to interpret the effect parameter.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.StockEffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectTechnique)">
      <summary>
            Interprets the specified effect technique.
            </summary>
      <param name="effect">The effect.</param>
      <param name="technique">The effect technique.</param>
      <returns>
            The description of the effect technique, or <see langword="null" /> if the method was 
            not able to interpret the effect technique.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.Interop.ElementPresentationTarget">
      <summary>
            A WPF control that implements <see cref="T:DigitalRune.Graphics.Interop.IPresentationTarget" /> to host a 3D view.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.ElementPresentationTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Interop.ElementPresentationTarget" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.ElementPresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#Handle">
      <summary>
            Gets the window handle (HWND).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.ElementPresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#Height">
      <summary>
            Gets the height of the presentation target in pixels.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.ElementPresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#Width">
      <summary>
            Gets the width of the presentation target in pixels.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.ElementPresentationTarget.GraphicsService">
      <summary>
            Gets or sets the graphics service.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Interop.FormsPresentationTarget">
      <summary>
            A Windows Forms control that implements <see cref="T:DigitalRune.Graphics.Interop.IPresentationTarget" /> to host a 3D view.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.FormsPresentationTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Interop.FormsPresentationTarget" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.FormsPresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#IsVisible">
      <summary>
            Gets or sets a value indicating whether the presentation target is displayed.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.FormsPresentationTarget.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.FormsPresentationTarget.GraphicsService">
      <summary>
            Gets or sets the graphics service.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.FormsPresentationTarget.OnClick(System.EventArgs)">
      <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Click" /> event.
            </summary>
      <param name="eventArgs">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.FormsPresentationTarget.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.
            </summary>
      <param name="eventArgs">
            The <see cref="T:System.Windows.Forms.PaintEventArgs" /> instance containing the event data.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.FormsPresentationTarget.WndProc(System.Windows.Forms.Message@)">
      <summary>
            Processes Windows messages.
            </summary>
      <param name="message">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Interop.IPresentationTarget">
      <summary>
            Provides a window handle (HWND) which can be used to present a 3D scene.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.IPresentationTarget.GraphicsService">
      <summary>
            Gets or sets the graphics service.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.IPresentationTarget.Handle">
      <summary>
            Gets the window handle (HWND).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.IPresentationTarget.Height">
      <summary>
            Gets the height of the presentation target in pixels.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.IPresentationTarget.IsVisible">
      <summary>
            Gets or sets a value indicating whether the presentation target is displayed.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.IPresentationTarget.Width">
      <summary>
            Gets the width of the presentation target in pixels.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Interop.PresentationTargetCollection">
      <summary>
            Manages a collection of <see cref="T:DigitalRune.Graphics.Interop.IPresentationTarget" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.PresentationTargetCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Interop.PresentationTargetCollection" /> class.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Interop.WpfEnvironment">
      <summary>
            Provides an execution environment for a WPF application in a Windows Forms application.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.WpfEnvironment.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Interop.WpfEnvironment" /> class</summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.WpfEnvironment.Application">
      <summary>
            Gets or sets the WPF application.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.WpfEnvironment.Dispatcher">
      <summary>
            Gets the dispatcher of the WPF thread.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.WpfEnvironment.Form">
      <summary>
            Gets or sets the Windows Forms main window (for example, the XNA game window).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.WpfEnvironment.Shutdown">
      <summary>
            Shuts down the WPF environment.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.WpfEnvironment.Startup(System.IntPtr)">
      <summary>
            Initializes the WPF environment.
            </summary>
      <param name="winFormHandle">The handle of the Windows Forms main window.</param>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.BloomFilter">
      <summary>
            Adds a bloom effect to an LDR (low dynamic range) image.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.BloomFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.BloomFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.BloomFilter.DownsampleFactor">
      <summary>
            Gets or sets the downsample factor.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is 0 or negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.BloomFilter.Intensity">
      <summary>
            Gets or sets the bloom intensity factor.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.BloomFilter.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.BloomFilter.Saturation">
      <summary>
            Gets or sets the bloom saturation.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.BloomFilter.Threshold">
      <summary>
            Gets or sets the brightness threshold.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.Blur">
      <summary>
            Blurs the image using a convolution filter.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.Blur.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.Blur" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.Blur.FilterInLogSpace">
      <summary>
            Gets or sets a value indicating whether log-space filtering is used.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.Blur.InitializeBoxBlur(System.Int32,System.Boolean)">
      <summary>
            Computes sample offsets and weights for box blur filter kernel.
            </summary>
      <param name="numberOfSamples">
            The number of samples. This value must be an odd number (e.g. 3, 5, 7, ...).
            </param>
      <param name="useHardwareFiltering">
            If set to <see langword="true" /> hardware filtering is used to increase the blur effect; 
            otherwise, hardware filtering is not used. Use <see langword="false" /> if you are filtering
            floating-point textures.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numberOfSamples" /> is zero or negative.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="numberOfSamples" /> is an even number. A box blur requires an odd number of
            samples.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.Blur.InitializeGaussianBlur(System.Int32,System.Single,System.Boolean)">
      <summary>
            Computes sample offsets and weights for Gaussian blur filter kernel.
            </summary>
      <param name="numberOfSamples">
            The number of samples. This value must be an odd number (e.g. 3, 5, 7, ...).
            </param>
      <param name="standardDeviation">The standard deviation.</param>
      <param name="useHardwareFiltering">
            If set to <see langword="true" /> hardware filtering is used to increase the blur effect;
            otherwise, hardware filtering is not used. Use <see langword="false" /> if you are filtering
            floating-point textures.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numberOfSamples" /> is zero or negative.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="numberOfSamples" /> is an even number. A Gaussian blur requires an odd number of
            samples.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.Blur.InitializePoissonBlur">
      <summary>
            Computes sample offsets and weights for a 13-tap Poisson disk filter kernel.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.Blur.IsSeparable">
      <summary>
            Gets or sets a value indicating whether the configured blur filter is separable.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.Blur.MaxNumberOfSamples">
      <summary>
            Gets the maximum number of samples that are supported.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.Blur.NumberOfPasses">
      <summary>
            Gets or sets the number of blur passes.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.Blur.NumberOfSamples">
      <summary>
            Gets or sets the number of samples.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.Blur.Offsets">
      <summary>
            Gets the sample offsets.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.Blur.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.Blur.Scale">
      <summary>
            Gets or sets the scale that is applied to the offsets.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.Blur.Weights">
      <summary>
            Gets or sets the weights of the samples.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.CameraMotionBlur">
      <summary>
            Creates a motion blur that depends on the camera movement.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.CameraMotionBlur.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.CameraMotionBlur" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.CameraMotionBlur.NumberOfSamples">
      <summary>
            Gets or sets the number of samples used to compute a blurred pixel.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.CameraMotionBlur.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.CameraMotionBlur.Strength">
      <summary>
            Gets or sets the strength.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter">
      <summary>
            Modifies an image using a color lookup texture (a.k.a. "color grading").
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.CreateLookupTexture2D(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>
            Creates the default 2D lookup texture (no color transformations) with 16 entries per color
            channel.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <returns>The default 2D lookup texture which contains no color transformations.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.CreateLookupTexture2D(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
      <summary>
            Creates the default 2D lookup texture (no color transformations) with the specified lookup
            table size.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="size">
            The size of the lookup table (= the number of entries per color channel). The recommended
            size is 16.
            </param>
      <returns>The default 2D lookup texture which contains no color transformations.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="size" /> is 0 or negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTexture">
      <summary>
            Gets or sets the color lookup texture (a 3D texture).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.SetLookupTexture(Microsoft.Xna.Framework.Graphics.Texture2D)">
      <summary>
            Sets the 3D lookup texture.
            </summary>
      <param name="lookupTexture2D">The lookup texture as a 2D texture.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lookupTexture2D" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="lookupTexture2D" /> is not a color texture or does not have the expected 
            format.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.Strength">
      <summary>
            Gets or sets the strength of the effect.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.CopyFilter">
      <summary>
            Copies a texture into a render target.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.CopyFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.CopyFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.CopyFilter.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter">
      <summary>
            Creates a depth-of-field effect.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.BlurStrength">
      <summary>
            Gets or sets the blur strength.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.DownsampleFactor">
      <summary>
            Gets or sets the downsample factor.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.FarBlurDistance">
      <summary>
            Gets or sets the far distance after which objects are maximal blurred.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.FarFocusDistance">
      <summary>
            Gets or sets the far distance where objects start to get blurry.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.NearBlurDistance">
      <summary>
            Gets or sets the near distance where the blur starts to decrease.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.NearFocusDistance">
      <summary>
            Gets or sets the near distance where the objects start to be in focus.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.DownsampleFilter">
      <summary>
            Reduces the resolution of an input texture.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.DownsampleFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.DownsampleFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.DownsampleFilter.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.EffectPostProcessor">
      <summary>
            Performs post-processing using a custom <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /> and automatically bound effect 
            parameters.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.EffectPostProcessor.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.EffectPostProcessor" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="effect">The effect.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> or <paramref name="effect" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.EffectPostProcessor.EffectBinding">
      <summary>
            Gets the effect binding.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.EffectPostProcessor.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.FxaaFilter">
      <summary>
            Applies <i>Fast Approximate Anti-Aliasing</i> (FXAA).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.FxaaFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.FxaaFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.FxaaFilter.ComputeLuminance">
      <summary>
            Gets or sets a value indicating whether the luminance should be computed
            in a separate pass.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.FxaaFilter.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.GodRayFilter">
      <summary>
            Adds crepuscular rays ("god rays") to a scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.GodRayFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.GodRayFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.Decay">
      <summary>
            Gets or sets the decay factor.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.Exposure">
      <summary>
            Gets or sets the exposure.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.LightDirection">
      <summary>
            Gets or sets the light direction.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.NumberOfSamples">
      <summary>
            Gets or sets the number of samples.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.GodRayFilter.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.Scale">
      <summary>
            Gets or sets the scale of the light shafts.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.Weight">
      <summary>
            Gets or sets the weight of samples along the light ray.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.GrainFilter">
      <summary>
            Adds a film grain effect.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.GrainFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.GrainFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GrainFilter.GrainScale">
      <summary>
            Gets or sets the grain scale.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GrainFilter.GrainTexture">
      <summary>
            Gets or sets the grain texture.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GrainFilter.LuminanceThreshold">
      <summary>
            Gets or sets the luminance threshold. (Noise is only added to pixels with a luminance below 
            this threshold. This value is ignored if <see cref="P:DigitalRune.Graphics.PostProcessing.GrainFilter.ScaleWithLuminance" /> is 
            <see langword="false" />.)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.GrainFilter.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GrainFilter.ScaleWithLuminance">
      <summary>
            Gets or sets a value indicating whether noise is blended equally to all pixels or whether 
            more noise is blended to dark pixels.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GrainFilter.Strength">
      <summary>
            Gets or sets the strength of the grain effect.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.HdrFilter">
      <summary>
            Performs HDR tone mapping and adds a bloom effect.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.HdrFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.HdrFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.AdaptionSpeed">
      <summary>
            Gets or sets the adaption speed of the eye.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BloomIntensity">
      <summary>
            Gets or sets the bloom intensity factor.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BloomThreshold">
      <summary>
            Gets or sets the brightness threshold.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.DownsampleFactor">
      <summary>
            Gets or sets the downsample factor.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Value is 0 or negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.MaxExposure">
      <summary>
            Gets or sets the max exposure factor.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.MiddleGray">
      <summary>
            Gets or sets the average gray level.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.MinExposure">
      <summary>
            Gets or sets the min exposure factor.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.HdrFilter.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.HdrFilter.Reset">
      <summary>
            Resets the dynamic internal states, especially dynamic luminance adaption.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.UseAdaption">
      <summary>
            Gets or sets a value indicating whether dynamic eye adaption should be used.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.UseGeometricMean">
      <summary>
            Gets or sets a value indicating whether the average luminance is computed using the 
            geometric mean.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.HorizontalBlur">
      <summary>
            Blurs the input texture using a horizontal blur filter. (Experimental)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.HorizontalBlur.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.HorizontalBlur" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HorizontalBlur.NumberOfPasses">
      <summary>
            Gets or sets the number of passes.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HorizontalBlur.NumberOfSamples">
      <summary>
            Gets or sets the number of samples.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.HorizontalBlur.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.KawaseBlur">
      <summary>
            Blurs the input texture using the Kawase bloom filter.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.KawaseBlur.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.KawaseBlur" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.KawaseBlur.NumberOfPasses">
      <summary>
            Gets or sets the number of passes.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is 0 or negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.KawaseBlur.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.LuminanceFilter">
      <summary>
            Computes the minimum, average and maximum luminance of a texture.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.LuminanceFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.LuminanceFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.LuminanceFilter.AdaptionSpeed">
      <summary>
            Gets or sets the adaption speed of the eye.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.LuminanceFilter.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.LuminanceFilter.Reset">
      <summary>
            Resets this luminance adaption.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.LuminanceFilter.UseAdaption">
      <summary>
            Gets or sets a value indicating whether dynamic eye adaption should be used.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.LuminanceFilter.UseGeometricMean">
      <summary>
            Gets or sets a value indicating whether the average luminance is computed using the 
            geometric mean.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.MadFilter">
      <summary>
            Scales the color of an image and adds an offset. (MAD = Multiply/Add).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.MadFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.MadFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.MadFilter.Offset">
      <summary>
            Gets or sets the offset.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.MadFilter.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.MadFilter.Scale">
      <summary>
            Gets or sets the scale factor.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur">
      <summary>
            Creates a motion blur using velocity buffers.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur.MaxBlurRadius">
      <summary>
            Gets or sets the max blur radius in pixels.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur.NumberOfSamples">
      <summary>
            Gets or sets the number of samples.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur.SoftenEdges">
      <summary>
            Gets or sets a value indicating whether the edges of motion blurred objects should be 
            softened.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur.UseLastVelocityBuffer">
      <summary>
            Gets or sets a value indicating whether last velocity buffer should be used in addition to
            the current velocity buffer to expand the blurred region.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.PostProcessHelper">
      <summary>
            Provides default instances of post-processors that are used frequently.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessHelper.GetCopyFilter(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets a default <see cref="T:DigitalRune.Graphics.PostProcessing.CopyFilter" /> that can be used to copy a texture into a render
            target.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>The default <see cref="T:DigitalRune.Graphics.PostProcessing.CopyFilter" />.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessHelper.GetDownsampleFilter(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets a default <see cref="T:DigitalRune.Graphics.PostProcessing.DownsampleFilter" /> that can be used to downsample a texture into
            a smaller render target.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>The default <see cref="T:DigitalRune.Graphics.PostProcessing.DownsampleFilter" />.</returns>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.PostProcessor">
      <summary>
            Performs scene post-processing, like filtering, color manipulation, etc.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessor.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessor" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessor.Enabled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessor" /> is enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessor.GraphicsService">
      <summary>
            Gets the graphics service.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessor.Name">
      <summary>
            Gets or sets the name of the post-processor.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessor.OnDisable">
      <summary>
            Called when this post-processor is disabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessor.OnEnable">
      <summary>
            Called when this post-processor is enabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessor.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessor.Process(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Performs the post-processing.
            </summary>
      <param name="source">
            The source texture. If this parameter is <see langword="null" />, the texture stored in the 
            property <see cref="P:DigitalRune.Graphics.PostProcessing.PostProcessor.Source" /> will be used.
            </param>
      <param name="target">
            The render target where the post-processing result should be stored. If this parameter is 
            <see langword="null" />, the render target stored in the property <see cref="P:DigitalRune.Graphics.PostProcessing.PostProcessor.Target" /> is 
            used. If both values are null, the result should be rendered into the back buffer of the 
            graphics device.
            </param>
      <param name="renderContext">The render context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="renderContext" /> is <see langword="null" />. Or both, the parameter
            <paramref name="source" /> and the property <see cref="P:DigitalRune.Graphics.PostProcessing.PostProcessor.Source" /> are <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessor.Source">
      <summary>
            Gets or sets the input texture.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessor.Target">
      <summary>
            Gets or sets the output render target.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.PostProcessorChain">
      <summary>
            Chains together a group of post-processors.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessorChain" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Add(DigitalRune.Graphics.PostProcessing.PostProcessor)">
      <summary>
            Appends a post-processor to the post-processor chain.
            </summary>
      <param name="postProcessor">
            The post-processor to add to the post-processor chain.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="postProcessor" /> is <see langword="null" />. The post-processor chain does 
            not allow <see langword="null" /> values.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Clear">
      <summary>
            Removes all post-processors from the post-processor chain.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Contains(DigitalRune.Graphics.PostProcessing.PostProcessor)">
      <summary>
            Determines whether the post-processor chain contains a specific post-processor.
            </summary>
      <param name="postProcessor">The post-processor to locate in the post-processor chain.</param>
      <returns>
        <see langword="true" /> if <paramref name="postProcessor" /> is found in the 
            post-processor chain; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Contains(System.String)">
      <summary>
            Determines whether the post-processor chain contains a post-processor with the specified
            name.
            </summary>
      <param name="name">
            The name of the post-processor to locate in the post-processor chain.
            </param>
      <returns>
        <see langword="true" /> if a post-processor with the given name is found in the 
            post-processor chain; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Count">
      <summary>
            Gets the number of post-processors contained in the post-processor chain.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the post-processor chain. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for post-processor chain.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.IndexOf(DigitalRune.Graphics.PostProcessing.PostProcessor)">
      <summary>
            Determines the index of a specific post-processor in the post-processor chain.
            </summary>
      <param name="postProcessor">The post-processor to locate in the post-processor chain.</param>
      <returns>
            The index of <paramref name="postProcessor" /> if found in the post-processor chain; 
            otherwise, -1.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.IndexOf(System.String)">
      <summary>
            Determines the index of the post-processor with the specified name in the post-processor 
            chain.
            </summary>
      <param name="name">
            The name of the post-processor to locate in the post-processor chain.
            </param>
      <returns>
            The index of the post-processor if found in the post-processor chain; otherwise, -1.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Insert(System.Int32,DigitalRune.Graphics.PostProcessing.PostProcessor)">
      <summary>
            Inserts a post-processor into the post-processor chain at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="postProcessor" /> should be inserted.
            </param>
      <param name="postProcessor">
            The post-processor to insert into the post-processor chain.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the post-processor chain.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="postProcessor" /> is <see langword="null" />. The post-processor chain does 
            not allow <see langword="null" /> values.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Item(System.Int32)">
      <summary>
            Gets or sets the post-processor at the specified index.
            </summary>
      <param name="index">The zero-based index of the post-processor to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or equal to or greater than <see cref="P:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />. The <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessorChain" /> 
            does not allow <see langword="null" /> values.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Item(System.String)">
      <summary>
            Gets the <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessor" /> with the specified name.
            </summary>
      <param name="name">The name of the post-processor.</param>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Remove(DigitalRune.Graphics.PostProcessing.PostProcessor)">
      <summary>
            Removes the first occurrence of a specific post-processor from the post-processor chain.
            </summary>
      <param name="postProcessor">
            The post-processor to remove from the post-processor chain.
            </param>
      <returns>
        <see langword="true" /> if <paramref name="postProcessor" /> was successfully removed from the 
            post-processor chain; otherwise, <see langword="false" />. This method also returns 
            <see langword="false" /> if <paramref name="postProcessor" /> is not found in the original 
            post-processor chain.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.RemoveAt(System.Int32)">
      <summary>
            Removes the post-processor at the specified index from the post-processor chain.
            </summary>
      <param name="index">The zero-based index of the post-processor to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the post-processor chain.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.System#Collections#Generic#ICollection{DigitalRune#Graphics#PostProcessing#PostProcessor}#CopyTo(DigitalRune.Graphics.PostProcessing.PostProcessor[],System.Int32)">
      <summary>
            Copies the elements of the post-processor chain to an <see cref="T:System.Array" />, starting 
            at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from 
            post-processor chain. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
      <param name="arrayIndex">
            The zero-based index in <paramref name="array" /> at which copying begins.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional. Or <paramref name="arrayIndex" /> is equal to 
            or greater than the length of <paramref name="array" />. Or the number of elements in the 
            source post-processor chain is greater than the available space from 
            <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessorChain.System#Collections#Generic#ICollection{DigitalRune#Graphics#PostProcessing#PostProcessor}#IsReadOnly">
      <summary>
            Gets a value indicating whether this collection is read-only.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.System#Collections#Generic#IEnumerable{DigitalRune#Graphics#PostProcessing#PostProcessor}#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.RadialBlur">
      <summary>
            Creates a radial blur effect.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.RadialBlur.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.RadialBlur" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.RadialBlur.MaxBlurAmount">
      <summary>
            Gets or sets the range of texels that are blurred at <see cref="P:DigitalRune.Graphics.PostProcessing.RadialBlur.MaxBlurRadius" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.RadialBlur.MaxBlurRadius">
      <summary>
            Gets or sets the radius in the range [0, 1] where the maximum blur is reached.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.RadialBlur.NumberOfSamples">
      <summary>
            Gets or sets the number of samples that are used in the blur.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.RadialBlur.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.SaturationFilter">
      <summary>
            Changes the saturation of the input texture.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SaturationFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.SaturationFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SaturationFilter.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SaturationFilter.Saturation">
      <summary>
            Gets or sets the saturation.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.SepiaFilter">
      <summary>
            Converts a colored image to sepia colors.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SepiaFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.SepiaFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SepiaFilter.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SepiaFilter.Strength">
      <summary>
            Gets or sets the strength of the effect.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.SharpeningFilter">
      <summary>
            Applies a sharpening effect using edge detection with the Laplacian operator.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SharpeningFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.SharpeningFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SharpeningFilter.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SharpeningFilter.Sharpness">
      <summary>
            Gets or sets the sharpness factor in the range [0, ∞[.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.SimpleMotionBlur">
      <summary>
            Creates a very simple motion blur effect by mixing the old blurred scene with the new scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SimpleMotionBlur.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.SimpleMotionBlur" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SimpleMotionBlur.OnDisable">
      <summary>
            Called when this post-processor is disabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SimpleMotionBlur.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SimpleMotionBlur.Reset">
      <summary>
            Resets the motion blur effect. (The next frame will not be blurred.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SimpleMotionBlur.Strength">
      <summary>
            Gets or sets the strength of the blur effect in the range [0, 1[.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.SmaaFilter">
      <summary>
            Applies <i>Enhanced Subpixel Morphological Anti-Aliasing</i> (SMAA).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SmaaFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.SmaaFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SmaaFilter.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.SsaoFilter">
      <summary>
            Creates a <i>Screen-Space Ambient Occlusion</i> (SSAO) effect to approximate ambient 
            occlusion in real-time.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SsaoFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.SsaoFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.CombineWithSource">
      <summary>
            Gets or sets a value indicating whether the ambient occlusion should be applied to the
            source image - or if a black-white AO image is produced, ignoring the source image.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.DownsampleFactor">
      <summary>
            Gets or sets the downsample factor.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.MaxDistances">
      <summary>
            Gets or sets the max distances for ambient occlusion.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.NumberOfBlurPasses">
      <summary>
            Gets or sets the number of blur passes.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SsaoFilter.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.Quality">
      <summary>
            Gets or sets the quality level.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.Radii">
      <summary>
            Gets or sets the inner and outer ambient occlusion radius.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.Scale">
      <summary>
            Gets or sets the scale factors.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.Strength">
      <summary>
            Gets or sets the strength of the ambient occlusion.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.UseEdgeAwareBlur">
      <summary>
            Gets or sets a value indicating whether the ambient occlusion should be blurred using
            an edge-aware blur.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.UnsharpMaskingFilter">
      <summary>
            Applies an unsharp masking filter.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.UnsharpMaskingFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.UnsharpMaskingFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.UnsharpMaskingFilter.Blur">
      <summary>
            Gets the blur processor.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.UnsharpMaskingFilter.OnProcess(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="source">The source texture. (Must not be <see langword="null" />.)</param>
      <param name="target">
            The render target where the post-processing result should be stored. If this value is 
            <see langword="null" /> the result should be rendered into the back buffer of the graphics 
            device.
            </param>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.UnsharpMaskingFilter.Sharpness">
      <summary>
            Gets or sets the sharpness factor in the range [0, ∞[.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.AscendingSceneNodeComparer">
      <summary>
            Sorts <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> ascending by comparing their <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.SortTag" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.AscendingSceneNodeComparer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.AscendingSceneNodeComparer" /> class</summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.AscendingSceneNodeComparer.Compare(DigitalRune.Graphics.SceneGraph.LightInstance,DigitalRune.Graphics.SceneGraph.LightInstance)">
      <summary>
            Compares two <see cref="T:DigitalRune.Graphics.SceneGraph.LightInstance" />s by comparing their 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.SortTag" />.
            </summary>
      <param name="x">The first <see cref="T:DigitalRune.Graphics.SceneGraph.LightInstance" /> to compare.</param>
      <param name="y">The second <see cref="T:DigitalRune.Graphics.SceneGraph.LightInstance" /> to compare.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term>Less than zero</term>
            <description>
              <paramref name="x" /> is less than <paramref name="y" />.</description>
          </item>
          <item>
            <term>Zero</term>
            <description>
              <paramref name="x" /> equals <paramref name="y" />.</description>
          </item>
          <item>
            <term>Greater than zero</term>
            <description>
              <paramref name="x" /> is greater than <paramref name="y" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.AscendingSceneNodeComparer.Compare(DigitalRune.Graphics.SceneGraph.MeshInstance,DigitalRune.Graphics.SceneGraph.MeshInstance)">
      <summary>
            Compares two <see cref="T:DigitalRune.Graphics.SceneGraph.MeshInstance" />s by comparing their 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.SortTag" />.
            </summary>
      <param name="x">The first <see cref="T:DigitalRune.Graphics.SceneGraph.MeshInstance" /> to compare.</param>
      <param name="y">The second <see cref="T:DigitalRune.Graphics.SceneGraph.MeshInstance" /> to compare.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term>Less than zero</term>
            <description>
              <paramref name="x" /> is less than <paramref name="y" />.</description>
          </item>
          <item>
            <term>Zero</term>
            <description>
              <paramref name="x" /> equals <paramref name="y" />.</description>
          </item>
          <item>
            <term>Greater than zero</term>
            <description>
              <paramref name="x" /> is greater than <paramref name="y" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.AscendingSceneNodeComparer.Compare(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Compares two <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />s by comparing their <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.SortTag" />.
            </summary>
      <param name="x">The first <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> to compare.</param>
      <param name="y">The second <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> to compare.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term>Less than zero</term>
            <description>
              <paramref name="x" /> is less than <paramref name="y" />.</description>
          </item>
          <item>
            <term>Zero</term>
            <description>
              <paramref name="x" /> equals <paramref name="y" />.</description>
          </item>
          <item>
            <term>Greater than zero</term>
            <description>
              <paramref name="x" /> is greater than <paramref name="y" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery">
      <summary>
            Returns the scene nodes that touch a specific reference scene node (usually the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.CameraInstance" />).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.AmbientLights">
      <summary>
            Gets the ambient lights.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.DirectionalLights">
      <summary>
            Gets the directional lights.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.MeshInstances">
      <summary>
            Gets the mesh instances.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.OtherNodes">
      <summary>
            Gets other scene nodes that did not fit into any of the predefined categories
            (<see cref="P:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.MeshInstances" />, <see cref="P:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.AmbientLights" />, etc.).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.PointLights">
      <summary>
            Gets the point lights.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.ProjectorLights">
      <summary>
            Gets the projector lights.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.ReferenceNode">
      <summary>
            Gets the reference node.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.Reset">
      <summary>
            Resets this query.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.Set(DigitalRune.Graphics.SceneGraph.SceneNode,System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode})">
      <summary>
            Sets the query result. 
            </summary>
      <param name="referenceNode">The reference node; can be <see langword="null" />.</param>
      <param name="nodes">The scene nodes that touch the reference node.</param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.Spotlights">
      <summary>
            Gets the spotlights.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.CameraInstance">
      <summary>
            Represents a camera in a scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.CameraInstance.#ctor(DigitalRune.Graphics.Camera)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.CameraInstance" /> class.
            </summary>
      <param name="camera">The camera.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="camera" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CameraInstance.Camera">
      <summary>
            Gets or sets the camera.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.CameraInstance.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.CameraInstance.OnPoseChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Geometry.IGeometricObject.PoseChanged" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:System.EventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CameraInstance.View">
      <summary>
            Gets or sets the view matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CameraInstance.ViewInverse">
      <summary>
            Gets or sets the inverse of the view matrix.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.DescendingSceneNodeComparer">
      <summary>
            Sorts <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> descending by comparing their <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.SortTag" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.DescendingSceneNodeComparer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.DescendingSceneNodeComparer" /> class</summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.DescendingSceneNodeComparer.Compare(DigitalRune.Graphics.SceneGraph.LightInstance,DigitalRune.Graphics.SceneGraph.LightInstance)">
      <summary>
            Compares two <see cref="T:DigitalRune.Graphics.SceneGraph.LightInstance" />s by comparing their 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.SortTag" />.
            </summary>
      <param name="x">The first <see cref="T:DigitalRune.Graphics.SceneGraph.LightInstance" /> to compare.</param>
      <param name="y">The second <see cref="T:DigitalRune.Graphics.SceneGraph.LightInstance" /> to compare.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term>Less than zero</term>
            <description>
              <paramref name="x" /> is less than <paramref name="y" />.</description>
          </item>
          <item>
            <term>Zero</term>
            <description>
              <paramref name="x" /> equals <paramref name="y" />.</description>
          </item>
          <item>
            <term>Greater than zero</term>
            <description>
              <paramref name="x" /> is greater than <paramref name="y" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.DescendingSceneNodeComparer.Compare(DigitalRune.Graphics.SceneGraph.MeshInstance,DigitalRune.Graphics.SceneGraph.MeshInstance)">
      <summary>
            Compares two <see cref="T:DigitalRune.Graphics.SceneGraph.MeshInstance" />s by comparing their 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.SortTag" />.
            </summary>
      <param name="x">The first <see cref="T:DigitalRune.Graphics.SceneGraph.MeshInstance" /> to compare.</param>
      <param name="y">The second <see cref="T:DigitalRune.Graphics.SceneGraph.MeshInstance" /> to compare.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term>Less than zero</term>
            <description>
              <paramref name="x" /> is less than <paramref name="y" />.</description>
          </item>
          <item>
            <term>Zero</term>
            <description>
              <paramref name="x" /> equals <paramref name="y" />.</description>
          </item>
          <item>
            <term>Greater than zero</term>
            <description>
              <paramref name="x" /> is greater than <paramref name="y" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.DescendingSceneNodeComparer.Compare(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Compares two <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />s by comparing their <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.SortTag" />.
            </summary>
      <param name="x">The first <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> to compare.</param>
      <param name="y">The second <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> to compare.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term>Less than zero</term>
            <description>
              <paramref name="x" /> is less than <paramref name="y" />.</description>
          </item>
          <item>
            <term>Zero</term>
            <description>
              <paramref name="x" /> equals <paramref name="y" />.</description>
          </item>
          <item>
            <term>Greater than zero</term>
            <description>
              <paramref name="x" /> is greater than <paramref name="y" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.IScene">
      <summary>
            Manages a collection of 3D objects represented by scene nodes (a.k.a the "scene graph"). 
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.IScene.Children">
      <summary>
            Gets the scene nodes.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.IScene.HaveContact(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Determines whether bounding shapes of two scene nodes overlap.
            </summary>
      <param name="nodeA">The first scene node.</param>
      <param name="nodeB">The second scene node.</param>
      <returns>
        <see langword="true" /> if the bounding shape of the scene nodes overlap; 
            <see langword="false" /> if the two nodes do not touch.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.IScene.Query``1(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Gets the scene nodes that touch the specified reference node.
            </summary>
      <param name="referenceNode">
            The reference node. Must not be <see langword="null" />.
            </param>
      <typeparam name="T">
            The type of query (see <see cref="T:DigitalRune.Graphics.SceneGraph.ISceneQuery" />) that should be executed.
            </typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.SceneGraph.ISceneQuery" /> object containing the result of the query.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="referenceNode" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.ISceneQuery">
      <summary>
            Represents a query that can be executed against a scene.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.ISceneQuery.ReferenceNode">
      <summary>
            Gets the reference node.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ISceneQuery.Reset">
      <summary>
            Resets this query.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ISceneQuery.Set(DigitalRune.Graphics.SceneGraph.SceneNode,System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode})">
      <summary>
            Sets the query result. 
            </summary>
      <param name="referenceNode">The reference node; can be <see langword="null" />.</param>
      <param name="nodes">The scene nodes that touch the reference node.</param>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.LightInstance">
      <summary>
            Represents a light in a scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LightInstance.#ctor(DigitalRune.Graphics.Light)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.LightInstance" /> class.
            </summary>
      <param name="light">The light.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="light" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightInstance.Clip">
      <summary>
            Gets or sets the clip geometry.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LightInstance.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LightInstance.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightInstance.Light">
      <summary>
            Gets or sets the light.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightInstance.Priority">
      <summary>
            Gets or sets the priority.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightInstance.Shadow">
      <summary>
            Gets or sets the shadow data of this light instance.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.LightInstanceQuery">
      <summary>
            Returns the light instances that affect a specific scene node.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LightInstanceQuery.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.LightInstanceQuery" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightInstanceQuery.AmbientLights">
      <summary>
            Gets the ambient lights.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightInstanceQuery.DirectionalLights">
      <summary>
            Gets the directional lights.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightInstanceQuery.OtherLights">
      <summary>
            Gets other light instances that did not fit into any of the predefined categories
            (<see cref="P:DigitalRune.Graphics.SceneGraph.LightInstanceQuery.AmbientLights" />, <see cref="P:DigitalRune.Graphics.SceneGraph.LightInstanceQuery.DirectionalLights" />, etc.).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightInstanceQuery.PointLights">
      <summary>
            Gets the point lights.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightInstanceQuery.ProjectorLights">
      <summary>
            Gets the projector lights.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightInstanceQuery.ReferenceNode">
      <summary>
            Gets the reference node.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LightInstanceQuery.Reset">
      <summary>
            Resets this query.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LightInstanceQuery.Set(DigitalRune.Graphics.SceneGraph.SceneNode,System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode})">
      <summary>
            Sets the query result. 
            </summary>
      <param name="referenceNode">The reference node; can be <see langword="null" />.</param>
      <param name="nodes">The scene nodes that touch the reference node.</param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightInstanceQuery.Spotlights">
      <summary>
            Gets the spotlights.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.MaterialInstance">
      <summary>
            Represents an instance of a specific material.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance" /> class.
            (This constructor creates an uninitialized instance. Use this constructor only for 
            cloning or other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.#ctor(DigitalRune.Graphics.Material)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance" /> class.
            </summary>
      <param name="material">The material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="material" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance" /> that is a clone of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance" /> that is a clone of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.CloneCore(DigitalRune.Graphics.SceneGraph.MaterialInstance)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.Contains(System.String)">
      <summary>
            Determines whether the material instance contains effect parameter bindings for the 
            specified render pass.
            </summary>
      <param name="pass">The render pass.</param>
      <returns>
        <see langword="true" /> if the material instance contains effect parameter bindings for the 
            specified render pass; otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pass" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.Count">
      <summary>
            Gets the number of render passes supported by this material instance.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.EffectBindings">
      <summary>
            Gets a read-only collection of effect bindings used by this material instance.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.Item(System.String)">
      <summary>
            Gets or sets the effect parameter bindings for the specified render pass.
            </summary>
      <param name="pass">The render pass.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pass" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="pass" /> is not found in the material.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.Material">
      <summary>
            Gets the material.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.Passes">
      <summary>
            Gets a read-only collection of all the render passes supported by this material instance.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#Add(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding})">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />. This implementation always throws 
            <see cref="T:System.NotSupportedException" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">
            Always thrown.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />. This implementation always throws 
            <see cref="T:System.NotSupportedException" />.
            </summary>
      <exception cref="T:System.NotSupportedException">
            Always thrown.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#Contains(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding})">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is found in the 
            <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding}[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at 
            a particular array index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from 
            <see cref="T:System.Collections.Generic.ICollection`1" />. The array must have zero-based indexing.
            </param>
      <param name="arrayIndex">
            The zero-based index in <paramref name="array" /> at which copying begins.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the 
            available space from <paramref name="arrayIndex" /> to the end of the destination 
            <paramref name="array" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#Remove(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding})">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />. 
            This implementation always throws <see cref="T:System.NotSupportedException" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> was successfully removed from the 
            <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />. This method also returns 
            <see langword="false" /> if <paramref name="item" /> is not found in the original 
            <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
            Always thrown.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#IDictionary{System#String@DigitalRune#Graphics#Effects#EffectBinding}#Add(System.String,DigitalRune.Graphics.Effects.EffectBinding)">
      <summary>
            Adds an element with the provided key and value to the 
            <see cref="T:System.Collections.Generic.IDictionary`2" />.This implementation always throws 
            <see cref="T:System.NotSupportedException" />.
            </summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
      <exception cref="T:System.NotSupportedException">
            Always thrown.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#IDictionary{System#String@DigitalRune#Graphics#Effects#EffectBinding}#ContainsKey(System.String)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the 
            specified key.
            </summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element 
            with the specified key; otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#IDictionary{System#String@DigitalRune#Graphics#Effects#EffectBinding}#Keys">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the 
            <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#IDictionary{System#String@DigitalRune#Graphics#Effects#EffectBinding}#Remove(System.String)">
      <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
      <param name="key">The key of the element to remove.</param>
      <returns>
        <see langword="true" /> if the element is successfully removed; otherwise, 
            <see langword="false" />. This method also returns <see langword="false" /> if key was not 
            found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
            Always thrown.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#IDictionary{System#String@DigitalRune#Graphics#Effects#EffectBinding}#TryGetValue(System.String,DigitalRune.Graphics.Effects.EffectBinding@)">
      <summary>
            Gets the value associated with the specified key.
            </summary>
      <param name="key">The key whose value to get.</param>
      <param name="value">
            When this method returns, the value associated with the specified key, if the key is found; 
            otherwise, the default value for the type of the <paramref name="value" /> parameter. This 
            parameter is passed uninitialized.
            </param>
      <returns>
        <see langword="true" /> if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> 
            contains an element with the specified key; otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#IDictionary{System#String@DigitalRune#Graphics#Effects#EffectBinding}#Values">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values of the 
            <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#ICloneable#Clone">
      <summary>
            Creates a new object that is a clone of the current instance.
            </summary>
      <returns>A new object that is a clone of this instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.TryGet(System.String,DigitalRune.Graphics.Effects.EffectBinding@)">
      <summary>
            Gets the effect parameter bindings for the specified render pass.
            </summary>
      <param name="pass">The render pass.</param>
      <param name="bindings">
            When this method returns, the effect parameter bindings for the specified render pass, if 
            the render pass is supported by the material; otherwise, the <see langword="null" />. This 
            parameter is passed uninitialized.
            </param>
      <returns>
        <see langword="true" /> if the material supports the specified render pass; otherwise, 
            <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pass" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection">
      <summary>
            Manages a read-only collection of <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance" /> objects.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Contains(DigitalRune.Graphics.SceneGraph.MaterialInstance)">
      <summary>
            Determines whether the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" /> contains a specific value.
            </summary>
      <param name="materialInstance">
            The material instance to locate in the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" />.
            </param>
      <returns>
        <see langword="true" /> if <paramref name="materialInstance" /> is found in the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.CopyTo(DigitalRune.Graphics.SceneGraph.MaterialInstance[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" /> to an 
            <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" />. The <see cref="T:System.Array" /> must have zero-based 
            indexing.
            </param>
      <param name="arrayIndex">
            The zero-based index in <paramref name="array" /> at which copying begins.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional. Or <paramref name="arrayIndex" /> is equal to 
            or greater than the length of <paramref name="array" />. Or the number of elements in the 
            source <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" /> is greater than the available space from 
            <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Count">
      <summary>
            Gets the number of material instances contained in the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.IndexOf(DigitalRune.Graphics.SceneGraph.MaterialInstance)">
      <summary>
            Determines the index of a specific material instance in the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" />.
            </summary>
      <param name="materialInstance">
            The material instance to locate in the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" />.
            </param>
      <returns>
            The index of <paramref name="materialInstance" /> if found in the collection; otherwise, -1.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Item(System.Int32)">
      <summary>
            Gets the material instance at the specified index.
            </summary>
      <param name="index">The zero-based index of the material instance to get.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or equal to or greater than <see cref="P:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Count" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#SceneGraph#MaterialInstance}#Add(DigitalRune.Graphics.SceneGraph.MaterialInstance)">
      <summary>
            Not supported.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" /> is read-only.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#SceneGraph#MaterialInstance}#Clear">
      <summary>
            Not supported.
            </summary>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#SceneGraph#MaterialInstance}#IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#SceneGraph#MaterialInstance}#Remove(DigitalRune.Graphics.SceneGraph.MaterialInstance)">
      <summary>
            Not supported.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> was successfully removed from the 
            <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />. This method also returns 
            <see langword="false" /> if <paramref name="item" /> is not found in the original 
            <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#Generic#IEnumerable{DigitalRune#Graphics#SceneGraph#MaterialInstance}#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#Generic#IList{DigitalRune#Graphics#SceneGraph#MaterialInstance}#Insert(System.Int32,DigitalRune.Graphics.SceneGraph.MaterialInstance)">
      <summary>
            Not supported.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
      <param name="item">
            The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.
            </param>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#Generic#IList{DigitalRune#Graphics#SceneGraph#MaterialInstance}#RemoveAt(System.Int32)">
      <summary>
            Not supported.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Enumerator">
      <summary>
            Enumerates the elements of a <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" />. 
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Enumerator.Current">
      <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Enumerator.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting 
            unmanaged resources.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Enumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
      <returns>
        <see langword="true" /> if the enumerator was successfully advanced to the next element; 
            <see langword="false" /> if the enumerator has passed the end of the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Enumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last 
            element.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.MeshInstance">
      <summary>
            Represents an instance of a mesh in a 3D scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MeshInstance.#ctor(DigitalRune.Graphics.Mesh)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.MeshInstance" /> class.
            </summary>
      <param name="mesh">The <see cref="P:DigitalRune.Graphics.SceneGraph.MeshInstance.Mesh" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mesh" /> is <see langword="null" />. 
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MeshInstance.CastsShadows">
      <summary>
            Gets or sets a value indicating whether this mesh instance blocks the light
            and casts shadows.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MeshInstance.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MeshInstance.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MeshInstance.MaterialInstances">
      <summary>
            Gets a collection of <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance" />s associated with the mesh.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MeshInstance.Mesh">
      <summary>
            Gets or sets the mesh.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MeshInstance.SkeletonPose">
      <summary>
            Gets or sets the skeleton pose for mesh skinning.
            </summary>
      <exception cref="T:System.ArgumentException">
            The <see cref="T:DigitalRune.Animation.Character.Skeleton" /> of the <see cref="P:DigitalRune.Graphics.SceneGraph.MeshInstance.SkeletonPose" /> is different from the 
            <see cref="T:DigitalRune.Animation.Character.Skeleton" /> of the <see cref="P:DigitalRune.Graphics.SceneGraph.MeshInstance.Mesh" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.MeshInstanceQuery">
      <summary>
            Returns the mesh instances that touch a specific reference scene node.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MeshInstanceQuery.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.MeshInstanceQuery" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MeshInstanceQuery.MeshInstances">
      <summary>
            Gets the mesh instances.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MeshInstanceQuery.ReferenceNode">
      <summary>
            Gets the reference node.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MeshInstanceQuery.Reset">
      <summary>
            Resets this query.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MeshInstanceQuery.Set(DigitalRune.Graphics.SceneGraph.SceneNode,System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode})">
      <summary>
            Sets the query result. 
            </summary>
      <param name="referenceNode">The reference node; can be <see langword="null" />.</param>
      <param name="nodes">The scene nodes that touch the reference node.</param>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.Model">
      <summary>
            Represents a 3D model composed of multiple <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Model.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.Model" /> class</summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Model.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.Scene">
      <summary>
            Manages a scene of 3D objects represented by scene nodes (a.k.a the "scene graph"). 
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.Scene" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Not supported.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.CreateInstanceCore">
      <summary>
            Not supported.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.Scene" /> class and 
            optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.Scene.EnableMultithreading">
      <summary>
            Gets or sets a value indicating whether multithreading is enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.Scene.Filter">
      <summary>
            Gets or sets a filter which is used in <see cref="M:DigitalRune.Graphics.SceneGraph.Scene.Query``1(DigitalRune.Graphics.SceneGraph.SceneNode)" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.GetDefaultGroup(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Called when the default group of new scene node is set.
            </summary>
      <param name="sceneNode">The scene node.</param>
      <returns>The default group of a scene node.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.GetGroup(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Gets the group ID of a scene node.
            </summary>
      <param name="sceneNode">The scene node.</param>
      <returns>The group ID.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sceneNode" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.HaveContact(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Determines whether bounding shapes of two scene nodes overlap.
            </summary>
      <param name="nodeA">The first scene node.</param>
      <param name="nodeB">The second scene node.</param>
      <returns>
        <see langword="true" /> if the bounding shape of the scene nodes overlap; 
            <see langword="false" /> if the two nodes do not touch.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.OnParentChanged(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Called when <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Parent" /> was changed.
            </summary>
      <param name="oldParent">The old parent.</param>
      <param name="newParent">The new parent.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.OnSceneChanged(DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Graphics.SceneGraph.SceneNode.SceneChanged" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.Query``1(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Gets the scene nodes that touch the specified reference node.
            </summary>
      <param name="referenceNode">
            The reference node. Must not be <see langword="null" />.
            </param>
      <typeparam name="T">
            The type of query (see <see cref="T:DigitalRune.Graphics.SceneGraph.ISceneQuery" />) that should be executed.
            </typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.SceneGraph.ISceneQuery" /> object containing the result of the query.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="referenceNode" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.SetGroup(DigitalRune.Graphics.SceneGraph.SceneNode,System.Int32)">
      <summary>
            Sets the group ID of a scene node.
            </summary>
      <param name="sceneNode">The scene node.</param>
      <param name="group">The group ID.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sceneNode" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.GraphicsException">
            The group of the scene node cannot be changed because the scene node has already been added
            to a scene.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.Update(System.TimeSpan)">
      <summary>
            Updates the scene.
            </summary>
      <param name="deltaTime">The time step size in seconds.</param>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs">
      <summary>
            Provides arguments for an event concerning a <see cref="P:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs.SceneNode" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs.Changes">
      <summary>
            Gets or sets the changes.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs.Create(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneChanges)">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs" /> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <param name="sceneNode">The scene node.</param>
      <param name="changes">The changes.</param>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs" /> class.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs.Recycle">
      <summary>
            Recycles this instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs.SceneNode">
      <summary>
            Gets or sets the scene node.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.SceneChanges">
      <summary>
            Specifies a change in the scene graph.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.SceneGraph.SceneChanges.NodeAdded">
      <summary>
            A scene node was added to the local subtree.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.SceneGraph.SceneChanges.NodeRemoved">
      <summary>
            A scene node was removed from the local subtree.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.SceneGraph.SceneChanges.ShapeChanged">
      <summary>
            The bounding shape of a scene node has changed.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.SceneGraph.SceneChanges.PoseChanged">
      <summary>
            The pose of a scene node has changed.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.SceneHelper">
      <summary>
            Provides helper methods for working with a scene graph and <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.Contains(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Determines whether whether a scene node contains another scene node in its subtree.
            </summary>
      <param name="containingNode">The containing node.</param>
      <param name="containedNode">The contained node.</param>
      <returns>
        <see langword="true" /> if the subtree where the root is <paramref name="containingNode" />
            contains <paramref name="containedNode" /> (in other words, <paramref name="containingNode" />
            is an ancester of <paramref name="containedNode" /> or both nodes are equal); 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetAncestors(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Gets the ancestors of the given scene node.
            </summary>
      <param name="node">The scene node.</param>
      <returns>The ancestors of this scene node.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetChildren(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Gets the children of the given scene node.
            </summary>
      <param name="node">The node.</param>
      <returns>
            The children of the given node or an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> if 
            <paramref name="node" /> or <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Children" /> is <see langword="null" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetDescendants(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Gets the descendants of the given scene node using a depth-first search.
            </summary>
      <param name="node">The scene node.</param>
      <returns>The descendants of this scene node in depth-first order.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetDescendants(DigitalRune.Graphics.SceneGraph.SceneNode,System.Boolean)">
      <summary>
            Gets the descendants of the given scene node using a depth-first or a breadth-first search.
            </summary>
      <param name="node">The scene node.</param>
      <param name="depthFirst">
            If set to <see langword="true" /> then a depth-first search for descendants will be made; 
            otherwise a breadth-first search will be made.
            </param>
      <returns>The descendants of this scene node.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetLeaves(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Gets the leaves of the scene node.
            </summary>
      <param name="node">The scene node where to start the search.</param>
      <returns>The leaves of the scene node.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetRoot(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Gets the root node.
            </summary>
      <param name="node">The scene node.</param>
      <returns>The root node.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetSceneNode(DigitalRune.Graphics.SceneGraph.SceneNode,System.String)">
      <summary>
            Gets a scene node by name from the subtree of the specified scene node.
            </summary>
      <param name="node">The scene node.</param>
      <param name="name">The name.</param>
      <returns>
            The first scene node with the given name; or <see langword="null" /> if no matching scene 
            node is found.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetSelfAndAncestors(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Gets the scene node and its ancestors scene.
            </summary>
      <param name="node">The scene node.</param>
      <returns>The <paramref name="node" /> and its ancestors of the scene.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetSubtree(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Gets the subtree (the given scene node and all of its descendants) using a depth-first 
            search.
            </summary>
      <param name="node">The scene node.</param>
      <returns>
            The subtree (the given scene node and all of its descendants) in depth-first order.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetSubtree(DigitalRune.Graphics.SceneGraph.SceneNode,System.Boolean)">
      <summary>
            Gets the subtree (the given scene node and all of its descendants) using a depth-first or a 
            breadth-first search.
            </summary>
      <param name="node">The scene node.</param>
      <param name="depthFirst">
            If set to <see langword="true" /> then a depth-first search for descendants will be made; 
            otherwise a breadth-first search will be made.
            </param>
      <returns>The subtree (the given scene node and all of its descendants).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.LookAt(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Rotates the scene node so that it faces a certain direction (in world space).
            </summary>
      <param name="node">The scene node.</param>
      <param name="target">
            The target coordinates in world space at which the scene node is "looking".
            </param>
      <param name="upVector">
            The direction that is "up" from the scene node's point of view given in world space. (Does 
            not need to be normalized.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            Current <see cref="T:DigitalRune.Geometry.Pose" />.<see cref="F:DigitalRune.Geometry.Pose.Position" /> is the same as 
            <paramref name="target" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="upVector" /> is (0, 0, 0).
            </exception>
      <exception cref="T:System.DivideByZeroException">
            The direction (<paramref name="target" /> - <see cref="T:DigitalRune.Geometry.Pose" />.<see cref="F:DigitalRune.Geometry.Pose.Position" />) 
            is probably pointing in the same or opposite direction as <paramref name="upVector" />. (The 
            two vectors must not be parallel.)
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.LookAt(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Moves and rotates the scene node so that it faces a certain direction (in world space).
            </summary>
      <param name="node">The scene node.</param>
      <param name="position">The new position in world space.</param>
      <param name="target">
            The target coordinates in world space at which the scene node is "looking".
            </param>
      <param name="upVector">
            The direction that is "up" from the scene node's point of view given in world space. (Does 
            not need to be normalized.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> is the same as <paramref name="target" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="upVector" /> is (0, 0, 0).
            </exception>
      <exception cref="T:System.DivideByZeroException">
            The camera direction (<paramref name="target" /> - <paramref name="position" />) is probably 
            pointing in the same or opposite direction as <paramref name="upVector" />. (The two vectors 
            must not be parallel.)
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.SetLastPose(DigitalRune.Graphics.SceneGraph.SceneNode,System.Boolean)">
      <summary>
            Sets <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastPoseWorld" /> to the current 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseWorld" />.
            </summary>
      <param name="sceneNode">The scene node.</param>
      <param name="recursive">
            If set to <see langword="true" /> this method is executed recursively on the specified node 
            and all descendants nodes; otherwise, this method is executed only on the specified node.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.SetLastScale(DigitalRune.Graphics.SceneGraph.SceneNode,System.Boolean)">
      <summary>
            Sets <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastScaleWorld" /> to the current 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleWorld" />.
            </summary>
      <param name="sceneNode">The scene node.</param>
      <param name="recursive">
            If set to <see langword="true" /> this method is executed recursively on the specified node 
            and all descendants nodes; otherwise, this method is executed only on the specified node.
            </param>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.SceneNode">
      <summary>
            Represents an object in a 3D scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.Aabb">
      <summary>
            Gets the axis-aligned bounding box (AABB) in world space.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.Children">
      <summary>
            Gets or sets the children of this scene node.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.DigitalRune#Geometry#IGeometricObject#Pose">
      <summary>
            Gets the pose (position and orientation) in world space.
            </summary>
    </member>
    <member name="E:DigitalRune.Graphics.SceneGraph.SceneNode.DigitalRune#Geometry#IGeometricObject#PoseChanged">
      <summary>
            Occurs when the pose was changed.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.DigitalRune#Geometry#IGeometricObject#Scale">
      <summary>
            Gets the total effective scale (which incorporates the scale factors of parent scene nodes).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.Dispose">
      <summary>
            Releases all resources used by the scene node and all descendant nodes.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> class 
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.Finalize">
      <summary>
            Releases unmanaged resources before an instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> class is 
            reclaimed by garbage collection.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.Invalidate">
      <summary>
            Invalidates this scene node and all children.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsVisible">
      <summary>
            Gets or sets a value indicating whether this scene node is visible.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastPoseWorld">
      <summary>
            Gets or sets the <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseWorld" /> of the last frame.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastScaleWorld">
      <summary>
            Gets or sets the <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleWorld" /> of the last frame.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.Name">
      <summary>
            Gets or sets the name of this scene node.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.OnParentChanged(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Called when <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Parent" /> was changed.
            </summary>
      <param name="oldParent">The old parent.</param>
      <param name="newParent">The new parent.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.OnPoseChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Geometry.IGeometricObject.PoseChanged" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:System.EventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.OnSceneChanged(DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Graphics.SceneGraph.SceneNode.SceneChanged" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.OnShapeChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Graphics.SceneGraph.SceneNode.ShapeChanged" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:System.EventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.Parent">
      <summary>
            Gets the parent scene node.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseLocal">
      <summary>
            Gets or sets the pose (position and orientation) relative to the parent scene node.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseWorld">
      <summary>
            Gets or sets the pose (position and orientation) in world space.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.RenderData">
      <summary>
            Gets or sets the cached renderer data.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleLocal">
      <summary>
            Gets or sets the scale relative to the parent scene node. 
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleWorld">
      <summary>
            Gets the total effective scale (which incorporates the scale factors of parent scene nodes).
            </summary>
    </member>
    <member name="E:DigitalRune.Graphics.SceneGraph.SceneNode.SceneChanged">
      <summary>
            Event raised when a change occurred in the local subtree.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.SceneData">
      <summary>
            Gets or sets scene data.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.Shape">
      <summary>
            Gets (or sets) the bounding shape of this scene node.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="E:DigitalRune.Graphics.SceneGraph.SceneNode.ShapeChanged">
      <summary>
            Occurs when the <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Shape" /> or <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleWorld" /> was changed.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.SortTag">
      <summary>
            Gets or sets the sort tag.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.System#ICloneable#Clone">
      <summary>
            Creates a new object that is a clone of the current instance.
            </summary>
      <returns>A new object that is a clone of this instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.UserData">
      <summary>
            Gets or sets user-defined data.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.SceneNodeCollection">
      <summary>
            Manages a collection of scene nodes as the children of another scene node.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNodeCollection" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollection.GetParent(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Gets the parent of an object.
            </summary>
      <param name="child">The child object.</param>
      <returns>The parent of <paramref name="child" />.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNodeCollection.Parent">
      <summary>
            Gets (or sets) the parent which owns this child collection.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollection.SetParent(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Sets the parent of the given object.
            </summary>
      <param name="parent">The parent to set.</param>
      <param name="child">The child object.</param>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter">
      <summary>
            Filters collisions between scene nodes using their group IDs.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.#ctor(DigitalRune.Graphics.SceneGraph.Scene)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter" /> class.
            </summary>
      <param name="scene">The scene.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.#ctor(DigitalRune.Graphics.SceneGraph.Scene,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter" /> class.
            </summary>
      <param name="scene">The scene.</param>
      <param name="maxNumberOfGroups">
            The maximum number of groups (see <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.MaxNumberOfGroups" />).
            </param>
    </member>
    <member name="E:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.Changed">
      <summary>
            Occurs when the filter rules were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.Filter(DigitalRune.Collections.Pair{DigitalRune.Graphics.SceneGraph.SceneNode})">
      <summary>
            Determines whether the given <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />s can collide.
            </summary>
      <param name="pair">The pair of collision objects.</param>
      <returns>
        <see langword="true" /> if the pair of collision objects can collide; otherwise, 
            <see langword="false" /> if the objects cannot collide.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.Get(System.Int32,System.Int32)">
      <summary>
            Returns <see langword="true" /> if collisions between two scene node groups are enabled.
            </summary>
      <param name="groupA">The first scene node group.</param>
      <param name="groupB">The second scene node group.</param>
      <returns>
        <see langword="true" /> if collisions with the between <paramref name="groupA" /> and 
            <paramref name="groupB" /> are enabled; otherwise <see langword="false" />.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="groupA" /> or <paramref name="groupB" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.MaxNumberOfGroups">
      <summary>
            The maximum number of supported scene node groups.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.OnChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.Changed" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:System.EventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.Reset">
      <summary>
            Resets this filter. All collisions will be enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.Scene">
      <summary>
            Gets or sets the scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.Set(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Enables or disables collisions between a pair of scene node groups.
            </summary>
      <param name="groupA">The first group.</param>
      <param name="groupB">The second group.</param>
      <param name="collisionsEnabled">
            If set to <see langword="true" /> collisions between scene nodes in <paramref name="groupA" /> 
            and scene nodes in <paramref name="groupB" /> are enabled. 
            Use <see langword="false" /> to disable collisions.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="groupA" /> is out of range.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="groupB" /> is out of range.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Shadows.CascadedShadow">
      <summary>
            Defines a cascaded shadow that can be used for <see cref="T:DigitalRune.Graphics.DirectionalLight" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.CascadedShadow.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Shadows.CascadedShadow" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.CascadedShadow.CloneCore(DigitalRune.Graphics.Shadows.Shadow)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Shadows.Shadow" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.CascadedShadow.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Shadows.Shadow" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.CascadedShadow.DepthBiasOffset">
      <summary>
            Gets or sets the depth bias offset  of each cascade used to remove surface acne.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.CascadedShadow.DepthBiasScale">
      <summary>
            Gets or sets the depth bias scale of each cascade used to remove surface acne.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.CascadedShadow.FadeOutDistance">
      <summary>
            Gets or sets the distance where the shadow starts to fade out.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.CascadedShadow.FilterRadius">
      <summary>
            Gets or sets the filter radius of each cascade.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.CascadedShadow.JitterResolution">
      <summary>
            Gets or sets the jitter resolution (for jitter sampling) of each cascade.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.CascadedShadow.MaxDistance">
      <summary>
            Gets or sets the maximum distance up to which shadows are rendered. 
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.CascadedShadow.MinLightDistance">
      <summary>
            Gets or sets the minimal distance of the light projection to the camera frustum of a 
            cascade.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.CascadedShadow.NumberOfCascades">
      <summary>
            Gets or sets the number of cascades.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.CascadedShadow.RecycleShadowMap(DigitalRune.Graphics.RenderTargetPool)">
      <summary>
            Recycles the shadow map.
            </summary>
      <param name="renderTargetPool">The render target pool.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.CascadedShadow.ShadowFog">
      <summary>
            Gets or sets the shadow factor that is used beyond <see cref="P:DigitalRune.Graphics.Shadows.CascadedShadow.MaxDistance" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.CascadedShadow.ShadowMap">
      <summary>
            Gets or sets the shadow map.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.CascadedShadow.SplitDistribution">
      <summary>
            Gets or sets the split distribution parameter.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Shadows.CascadedShadowMapRenderer">
      <summary>
            Creates the shadow map of a <see cref="T:DigitalRune.Graphics.Shadows.CascadedShadow" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.CascadedShadowMapRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Shadows.CascadedShadowMapRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.CascadedShadowMapRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.LightInstance},DigitalRune.Graphics.RenderContext)">
      <summary>
            Renders the shadow maps of light instance with a <see cref="T:DigitalRune.Graphics.Shadows.CascadedShadow" />.
            </summary>
      <param name="lightInstances">
            The light instances. For all light instances that contain a <see cref="T:DigitalRune.Graphics.Shadows.CascadedShadow" /> the
            shadow map is created and stored in the <see cref="T:DigitalRune.Graphics.Shadows.CascadedShadow" /> object.
            </param>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Shadows.CubeMapShadow">
      <summary>
            Defines an omnidirectional cube map shadow that can be used for <see cref="T:DigitalRune.Graphics.PointLight" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.CubeMapShadow.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Shadows.CubeMapShadow" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.CubeMapShadow.CloneCore(DigitalRune.Graphics.Shadows.Shadow)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Shadows.Shadow" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.CubeMapShadow.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Shadows.Shadow" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.CubeMapShadow.DepthBiasOffset">
      <summary>
            Gets or sets the depth bias offset used to remove surface acne.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.CubeMapShadow.DepthBiasScale">
      <summary>
            Gets or sets the depth bias scale used to remove surface acne.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.CubeMapShadow.FilterRadius">
      <summary>
            Gets or sets the filter radius.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.CubeMapShadow.JitterResolution">
      <summary>
            Gets or sets the jitter resolution (for jitter sampling).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.CubeMapShadow.Near">
      <summary>
            Gets or sets the near plane distance for the shadow projection.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.CubeMapShadow.RecycleShadowMap(DigitalRune.Graphics.RenderTargetPool)">
      <summary>
            Recycles the shadow map.
            </summary>
      <param name="renderTargetPool">The render target pool.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.CubeMapShadow.ShadowMap">
      <summary>
            Gets or sets the shadow map.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Shadows.CubeMapShadowMapRenderer">
      <summary>
            Creates the shadow map of a <see cref="T:DigitalRune.Graphics.Shadows.CubeMapShadow" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.CubeMapShadowMapRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Shadows.CubeMapShadowMapRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.CubeMapShadowMapRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.LightInstance},DigitalRune.Graphics.RenderContext)">
      <summary>
            Renders the shadow maps of light instance with a <see cref="T:DigitalRune.Graphics.Shadows.CubeMapShadow" />.
            </summary>
      <param name="lightInstances">
            The light instances. For all light instances that contain a <see cref="T:DigitalRune.Graphics.Shadows.CubeMapShadow" /> the 
            shadow map is created and stored in the <see cref="T:DigitalRune.Graphics.Shadows.CubeMapShadow" /> object.
            </param>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Shadows.Shadow">
      <summary>
            Defines the shadow of a specific <see cref="T:DigitalRune.Graphics.SceneGraph.LightInstance" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.Shadow.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Shadows.Shadow" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.Shadow.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Shadows.Shadow" /> that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Shadows.Shadow" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.Shadow.CloneCore(DigitalRune.Graphics.Shadows.Shadow)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Shadows.Shadow" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.Shadow.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Shadows.Shadow" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.Shadow.Prefer16Bit">
      <summary>
            Gets or sets a value indicating whether the shadow map should use a 16 bit format to store 
            depth.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.Shadow.PreferredSize">
      <summary>
            Gets or sets the size of the desired size of the shadow map in pixels.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.Shadow.RecycleShadowMap(DigitalRune.Graphics.RenderTargetPool)">
      <summary>
            Recycles the shadow map.
            </summary>
      <param name="renderTargetPool">The render target pool.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.Shadow.ShadowMask">
      <summary>
            Gets or sets the shadow mask.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.Shadow.ShadowMaskChannel">
      <summary>
            Gets or sets the shadow mask channel.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.Shadow.System#ICloneable#Clone">
      <summary>
            Creates a new object that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new object that is a clone (deep copy) of this instance.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.Shadows.StandardShadow">
      <summary>
            Defines a standard shadow that can be used for <see cref="T:DigitalRune.Graphics.Spotlight" />s or 
            <see cref="T:DigitalRune.Graphics.ProjectorLight" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.StandardShadow.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Shadows.StandardShadow" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.StandardShadow.CloneCore(DigitalRune.Graphics.Shadows.Shadow)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Shadows.Shadow" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.StandardShadow.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Shadows.Shadow" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.StandardShadow.DefaultNear">
      <summary>
            Gets or sets the default near plane distance for the shadow projection.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.StandardShadow.DepthBiasOffset">
      <summary>
            Gets or sets the depth bias offset used to remove surface acne.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.StandardShadow.DepthBiasScale">
      <summary>
            Gets or sets the depth bias scale used to remove surface acne.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.StandardShadow.FilterRadius">
      <summary>
            Gets or sets the filter radius.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.StandardShadow.JitterResolution">
      <summary>
            Gets or sets the jitter resolution (for jitter sampling).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.StandardShadow.RecycleShadowMap(DigitalRune.Graphics.RenderTargetPool)">
      <summary>
            Recycles the shadow map.
            </summary>
      <param name="renderTargetPool">The render target pool.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Shadows.StandardShadow.ShadowMap">
      <summary>
            Gets or sets the shadow map.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Shadows.StandardShadowMapRenderer">
      <summary>
            Creates the shadow map of a <see cref="T:DigitalRune.Graphics.Shadows.StandardShadow" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.StandardShadowMapRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Shadows.StandardShadowMapRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Shadows.StandardShadowMapRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.LightInstance},DigitalRune.Graphics.RenderContext)">
      <summary>
            Renders the shadow maps of light instance with a <see cref="T:DigitalRune.Graphics.Shadows.StandardShadow" />.
            </summary>
      <param name="lightInstances">
            The light instances. For all light instances that contain a <see cref="T:DigitalRune.Graphics.Shadows.StandardShadow" /> the 
            shadow map is created and stored in the <see cref="T:DigitalRune.Graphics.Shadows.StandardShadow" /> object.
            </param>
      <param name="context">The render context.</param>
    </member>
  </members>
</doc>