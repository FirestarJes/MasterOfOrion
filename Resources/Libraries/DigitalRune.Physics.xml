<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>DigitalRune.Physics</name>
  </assembly>
  <members>
    <member name="T:DigitalRune.Physics.CollisionResponseFilter">
      <summary>
            Defines whether collision response between rigid bodies is enabled or disabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.CollisionResponseFilter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Physics.CollisionResponseFilter" /> class</summary>
    </member>
    <member name="E:DigitalRune.Physics.CollisionResponseFilter.Changed">
      <summary>
            Occurs when the filter rules have changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.CollisionResponseFilter.Filter(DigitalRune.Collections.Pair{DigitalRune.Physics.RigidBody})">
      <summary>
            Returns <see langword="true" /> if collision response is enabled for the given pair.
            </summary>
      <param name="pair">The pair of rigid bodies.</param>
      <returns>
        <see langword="true" /> if collision response is enabled; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.CollisionResponseFilter.OnChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Physics.CollisionResponseFilter.Changed" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:System.EventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="M:DigitalRune.Physics.CollisionResponseFilter.Reset">
      <summary>
            Resets this filter. Collision response will be enabled for all pairs of rigid bodies.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.CollisionResponseFilter.Set(DigitalRune.Physics.RigidBody,DigitalRune.Physics.RigidBody,System.Boolean)">
      <summary>
            Enables or disables collision response between the given rigid bodies.
            </summary>
      <param name="bodyA">The first rigid bodies.</param>
      <param name="bodyB">The second rigid bodies.</param>
      <param name="responseEnabled">
            If set to <see langword="true" /> the collision response between <paramref name="bodyA" /> and 
            <paramref name="bodyB" /> is enabled. Use <see langword="false" /> to disable the collision
            response.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bodyA" /> or <paramref name="bodyB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Physics.MassFrame">
      <summary>
            Defines the mass properties of a rigid body.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.MassFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Physics.MassFrame" /> class</summary>
    </member>
    <member name="M:DigitalRune.Physics.MassFrame.Adjust(System.Single)">
      <summary>
            Changes the mass so that it is equal to the given target mass and the
            related properties (inertia) are scaled accordingly.
            </summary>
      <param name="targetMass">The target mass.</param>
    </member>
    <member name="M:DigitalRune.Physics.MassFrame.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Physics.MassFrame" /> that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Physics.MassFrame" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="P:DigitalRune.Physics.MassFrame.Density">
      <summary>
            Gets or sets the density.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Physics.MassFrame.FromShapeAndDensity(DigitalRune.Geometry.Shapes.Shape,DigitalRune.Mathematics.Algebra.Vector3F,System.Single,System.Single,System.Int32)">
      <summary>
            Computes a mass frame for the given shape and density.
            </summary>
      <param name="shape">The shape.</param>
      <param name="scale">The scale of the shape.</param>
      <param name="density">The density.</param>
      <param name="relativeDistanceThreshold">
            The relative distance threshold. If no mass or inertia formula for the given shape are known
            the shape is approximated with a triangle mesh and the mass frame of this mesh is returned.
            The relative distance threshold controls the accuracy of the approximated mesh. Good default
            values are 0.05 to get an approximation with an error of about 5%.
            </param>
      <param name="iterationLimit">
            The iteration limit. For some shapes the mass properties are computed with an iterative
            algorithm. No more than <paramref name="iterationLimit" /> iterations will be performed.
            A value of 3 gives good results in most cases. Use a value of -1 to get only a coarse
            approximation.
            </param>
      <returns>
            A new <see cref="T:DigitalRune.Physics.MassFrame" /> for the given parameters is returned.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="shape" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="density" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="relativeDistanceThreshold" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Physics.MassFrame.FromShapeAndMass(DigitalRune.Geometry.Shapes.Shape,DigitalRune.Mathematics.Algebra.Vector3F,System.Single,System.Single,System.Int32)">
      <summary>
            Computes a mass frame for the given shape and target mass.
            </summary>
      <param name="shape">The shape.</param>
      <param name="scale">The scale of the shape.</param>
      <param name="mass">
            The target mass. The mass of the computed <see cref="T:DigitalRune.Physics.MassFrame" /> will be equal to this 
            value. Other mass properties are adjusted to match the target mass.
            </param>
      <param name="relativeDistanceThreshold">
            The relative distance threshold. If no mass or inertia formula for the given shape are known
            the shape is approximated with a triangle mesh and the mass frame of this mesh is returned.
            The relative distance threshold controls the accuracy of the approximated mesh. Good default
            values are 0.05 to get an approximation with an error of about 5%.
            </param>
      <param name="iterationLimit">
            The iteration limit. For some shapes the mass properties are computed with an iterative
            algorithm. No more than <paramref name="iterationLimit" /> iterations will be performed.
            A value of 3 gives good results in most cases. Use a value of -1 to get only a coarse
            approximation.
            </param>
      <returns>
            A new <see cref="T:DigitalRune.Physics.MassFrame" /> for the given parameters is returned.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="shape" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mass" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="relativeDistanceThreshold" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.MassFrame.Inertia">
      <summary>
            Gets or sets the inertia.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.MassFrame.Mass">
      <summary>
            Gets or sets the mass.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.MassFrame.MassLimit">
      <summary>
            Gets or sets the mass limit. Mass values above this value are treated as infinite.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.MassFrame.Pose">
      <summary>
            Gets or sets the pose that defines the center of mass and the principal axes.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.MassFrame.System#ICloneable#Clone">
      <summary>
            Creates a new object that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new object that is a clone (deep copy) of this instance.
            </returns>
    </member>
    <member name="T:DigitalRune.Physics.MassHelper">
      <summary>
            Provides helper methods for computing and manipulating mass properties.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.MassHelper.GetMass(DigitalRune.Geometry.Meshes.ITriangleMesh,System.Single@,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Matrix33F@)">
      <summary>
            Gets the mass properties of the given triangle mesh for a density of 1.
            </summary>
      <param name="mesh">The mesh.</param>
      <param name="mass">The mass.</param>
      <param name="centerOfMass">The center of mass.</param>
      <param name="inertia">The inertia matrix.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mesh" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Physics.MotionType">
      <summary>
            Defines how the simulation computes the rigid body movement.
            </summary>
    </member>
    <member name="F:DigitalRune.Physics.MotionType.Static">
      <summary>
            The body is static. It will never move.
            </summary>
    </member>
    <member name="F:DigitalRune.Physics.MotionType.Kinematic">
      <summary>
            The body is kinematic. Its movement is controlled by the user, not by simulation forces.
            </summary>
    </member>
    <member name="F:DigitalRune.Physics.MotionType.Dynamic">
      <summary>
            The body is dynamic. Its movement is controlled by the simulation forces and collision 
            response.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.PhysicsException">
      <summary>
            The exception that is thrown when a general error in the physics library occurs.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.PhysicsException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.PhysicsException" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.PhysicsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.PhysicsException" /> class with serialized 
            data.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the 
            exception being thrown.
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or 
            destination.
            </param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is <see langword="null" />.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:DigitalRune.Physics.PhysicsException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.PhysicsException" /> class with a specified 
            error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:DigitalRune.Physics.PhysicsException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.PhysicsException" /> class with a specified 
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">
            The exception that is the cause of the current exception, or <see langword="null" /> if no 
            inner exception is specified.
            </param>
    </member>
    <member name="T:DigitalRune.Physics.RigidBody">
      <summary>
            Represents a rigid body.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.RigidBody.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.RigidBody" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.RigidBody.#ctor(DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.RigidBody" /> class.
            </summary>
      <param name="shape">
            The shape. Can be <see langword="null" /> to use the default <see cref="P:DigitalRune.Physics.RigidBody.Shape" />.
            </param>
    </member>
    <member name="M:DigitalRune.Physics.RigidBody.#ctor(DigitalRune.Geometry.Shapes.Shape,DigitalRune.Physics.MassFrame,DigitalRune.Physics.Materials.IMaterial)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.RigidBody" /> class.
            </summary>
      <param name="shape">
            The shape. Can be <see langword="null" /> to use the default <see cref="P:DigitalRune.Physics.RigidBody.Shape" />.
            </param>
      <param name="massFrame">
            The mass frame. Can be <see langword="null" /> in which case the mass properties for
            a density of 1000 are used.
            </param>
      <param name="material">
            The material. Can be <see langword="null" /> to use the default <see cref="P:DigitalRune.Physics.RigidBody.Material" />.
            </param>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.Aabb">
      <summary>
            Gets the axis-aligned bounding box (AABB).
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.RigidBody.AddForce(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Applies a force at the center of mass of the rigid body.
            </summary>
      <param name="forceWorld">The force in world space.</param>
    </member>
    <member name="M:DigitalRune.Physics.RigidBody.AddForce(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Applies a force to the rigid body.
            </summary>
      <param name="forceWorld">The force in world space.</param>
      <param name="positionWorld">
            The position where the force is applied in world space.
            </param>
    </member>
    <member name="M:DigitalRune.Physics.RigidBody.AddTorque(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Applies a torque at the center of mass of the rigid body.
            </summary>
      <param name="torqueWorld">The torque in world space.</param>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.AngularVelocity">
      <summary>
            Gets or sets the angular velocity about the center of mass in world space.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.RigidBody.ApplyAngularImpulse(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Applies an angular impulse at the center of mass
            </summary>
      <param name="impulseWorld">The impulse in world space.</param>
    </member>
    <member name="M:DigitalRune.Physics.RigidBody.ApplyImpulse(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Applies an impulse at a given position.
            </summary>
      <param name="impulseWorld">The impulse in world space.</param>
      <param name="positionWorld">
            The position where the impulse is applied in world space.
            </param>
    </member>
    <member name="M:DigitalRune.Physics.RigidBody.ApplyLinearImpulse(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Applies a linear impulse at the center of mass
            </summary>
      <param name="impulseWorld">The impulse in world space.</param>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.AutoUpdateMass">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:DigitalRune.Physics.RigidBody.MassFrame" /> is automatically updated
            if the <see cref="P:DigitalRune.Physics.RigidBody.Shape" /> or <see cref="P:DigitalRune.Physics.RigidBody.Scale" /> of this body is changed.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.CanSleep">
      <summary>
            Gets or sets a value indicating whether this body can sleep.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.CcdEnabled">
      <summary>
            Gets or sets a value indicating whether Continuous Collision Detection (CCD) is enabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.RigidBody.ClearForces">
      <summary>
            Clears all forces that were set with <see cref="M:DigitalRune.Physics.RigidBody.AddForce(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)" />,
            <see cref="M:DigitalRune.Physics.RigidBody.AddForce(DigitalRune.Mathematics.Algebra.Vector3F)" /> or <see cref="M:DigitalRune.Physics.RigidBody.AddTorque(DigitalRune.Mathematics.Algebra.Vector3F)" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.RigidBody.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Physics.RigidBody" /> that is a clone (deep copy) of the current  instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Physics.RigidBody" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.RigidBody.CloneCore(DigitalRune.Physics.RigidBody)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Physics.RigidBody" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.CollisionObject">
      <summary>
            Gets the collision object.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.CollisionResponseEnabled">
      <summary>
            Gets or sets a value indicating whether collision response is enabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.RigidBody.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Physics.RigidBody" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Physics.RigidBody.GetVelocityOfLocalPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets the velocity of a point on the rigid body.
            </summary>
      <param name="positionLocal">
            The position of the point in the local space of the rigid body.
            </param>
      <returns>
            The velocity of the point on the rigid body in world space.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.RigidBody.GetVelocityOfWorldPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets the velocity of a point on the rigid body.
            </summary>
      <param name="positionWorld">The position of the point in world space.</param>
      <returns>
            The velocity of the point on the rigid body in world space.
            </returns>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.InertiaInverseWorld">
      <summary>
            Gets the effective inverse inertia.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.IsSleeping">
      <summary>
            Gets a value indicating whether this rigid body is sleeping.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.KineticEnergy">
      <summary>
            Gets the kinetic energy.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.LinearVelocity">
      <summary>
            Gets or sets the linear velocity of this body in world space.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.LockRotationX">
      <summary>
            Gets or sets a value indicating whether the body can rotate around its local mass frame 
            x-axis.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.LockRotationY">
      <summary>
            Gets or sets a value indicating whether the body can rotate around its local mass frame 
            y-axis.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.LockRotationZ">
      <summary>
            Gets or sets a value indicating whether the body can rotate around its local mass frame 
            z-axis.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.MassFrame">
      <summary>
            Gets or sets the mass frame which defines the mass properties of this body.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.MassInverse">
      <summary>
            Gets the effective inverse mass.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.Material">
      <summary>
            Gets or sets the material.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.MotionType">
      <summary>
            Gets or sets the motion type.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.Name">
      <summary>
            Gets the name.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.RigidBody.OnAddToSimulation">
      <summary>
            Called when this rigid body is added to a simulation.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.RigidBody.OnPoseChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Physics.RigidBody.PoseChanged" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:System.EventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="M:DigitalRune.Physics.RigidBody.OnRemoveFromSimulation">
      <summary>
            Called when this rigid body is removed from a simulation.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.RigidBody.OnShapeChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Physics.RigidBody.ShapeChanged" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.Pose">
      <summary>
            Gets or sets the pose (position and orientation).
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.PoseCenterOfMass">
      <summary>
            Gets or sets the pose (position and orientation) of the center of mass.
            </summary>
    </member>
    <member name="E:DigitalRune.Physics.RigidBody.PoseChanged">
      <summary>
            Occurs when the pose was changed.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.RotationalEnergy">
      <summary>
            Gets the rotational kinetic energy.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.Scale">
      <summary>
            Gets or sets the scale.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.Shape">
      <summary>
            Gets or sets the shape.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="E:DigitalRune.Physics.RigidBody.ShapeChanged">
      <summary>
            Occurs when the <see cref="P:DigitalRune.Physics.RigidBody.Shape" /> or <see cref="P:DigitalRune.Physics.RigidBody.Scale" /> was changed.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.Simulation">
      <summary>
            Gets the simulation.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.RigidBody.Sleep">
      <summary>
            Deactivates this rigid body. 
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.RigidBody.System#ICloneable#Clone">
      <summary>
            Creates a new object that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new object that is a clone (deep copy) of this instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.RigidBody.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.TranslationalEnergy">
      <summary>
            Gets the translational kinetic energy.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.RigidBody.UserData">
      <summary>
            Gets or sets the user data.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.RigidBody.WakeUp">
      <summary>
            Wakes the rigid body up from sleeping.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.RigidBodyCollection">
      <summary>
            Stores the <see cref="T:DigitalRune.Physics.RigidBody" /> objects of a simulation.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.RigidBodyCollection.InsertItem(System.Int32,DigitalRune.Physics.RigidBody)">
      <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
      <param name="item">The object to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. The collection does not allow 
            <see langword="null" /> values. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowNull" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. The collection does not 
            allow duplicate items. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowDuplicates" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Physics.RigidBodyCollection.SetItem(System.Int32,DigitalRune.Physics.RigidBody)">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. The collection does not allow 
            <see langword="null" /> values. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowNull" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. The collection does not 
            allow duplicate items. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowDuplicates" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Physics.Simulation">
      <summary>
            Manages a physics simulation.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Simulation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Simulation" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Simulation.CollisionDomain">
      <summary>
            Gets the collision domain.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Simulation.Constraints">
      <summary>
            Gets the constraints.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Simulation.ContactConstraints">
      <summary>
            Gets the contact constraints.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Simulation.ForceEffects">
      <summary>
            Gets the force effects that act on the rigid bodies.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Simulation.IslandManager">
      <summary>
            Gets the <see cref="T:DigitalRune.Physics.SimulationIslandManager" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Simulation.OnSubTimeStepFinished(System.EventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Physics.Simulation.SubTimeStepFinished" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:System.EventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="P:DigitalRune.Physics.Simulation.ResponseFilter">
      <summary>
            Gets or sets the collision response filter.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Simulation.RigidBodies">
      <summary>
            Gets the rigid bodies.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Simulation.Settings">
      <summary>
            Gets or sets the simulation settings.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="E:DigitalRune.Physics.Simulation.SubTimeStepFinished">
      <summary>
            Occurs when an internal time step has finished.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Simulation.TargetTime">
      <summary>
            Gets the target time to which the simulation <see cref="P:DigitalRune.Physics.Simulation.Time" /> should advance.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Simulation.Time">
      <summary>
            Gets the current simulation time.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Simulation.TimeScaling">
      <summary>
            Gets or sets the time scaling.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Physics.Simulation.Update(System.Single)">
      <summary>
            Advances the simulation by the given time.
            </summary>
      <param name="deltaTime">The size of the time step in seconds.</param>
    </member>
    <member name="M:DigitalRune.Physics.Simulation.Update(System.TimeSpan)">
      <summary>
            Advances the simulation by the given time.
            </summary>
      <param name="deltaTime">The size of the time step.</param>
    </member>
    <member name="F:DigitalRune.Physics.Simulation.World">
      <summary>
            Represents the simulation "world".
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.SimulationIsland">
      <summary>
            Describes a collection of rigid bodies and constraints that can be simulated independently.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.SimulationIsland.Constraints">
      <summary>
            Gets the constraints of this island.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.SimulationIsland.ContactConstraints">
      <summary>
            Gets the contact constraints of this island.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.SimulationIsland.RigidBodies">
      <summary>
            Gets the rigid bodies of this island.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.SimulationIslandManager">
      <summary>
            Manages <see cref="T:DigitalRune.Physics.SimulationIsland" />s of a <see cref="T:DigitalRune.Physics.Simulation" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.SimulationIslandManager.Islands">
      <summary>
            Gets the simulation islands.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.SimulationIslandManager.System#Collections#Generic#IComparer{DigitalRune#Physics#SimulationIsland}#Compare(DigitalRune.Physics.SimulationIsland,DigitalRune.Physics.SimulationIsland)">
      <summary>
            Compares two islands by size.
            </summary>
      <param name="first">The first island.</param>
      <param name="second">The second island.</param>
      <returns>
            A signed integer that indicates the relative size of the simulation islands, as shown in the following table.
            <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>Less than zero</term><description>The first island is bigger than the second island.</description></item><item><term>Zero</term><description>The first and the second island are equal in size.</description></item><item><term>Greater than zero</term><description>The second island is bigger than the first.</description></item></list></returns>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.AngularLimit">
      <summary>
            Defines a constraint that restricts rotational movement. This constraint is configurable
            to create custom joints.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.AngularLimit.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Physics.Constraints.AngularLimit" /> class</summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.AngularLimit.AnchorOrientationALocal">
      <summary>
            Gets or sets the constraint anchor orientation on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> in local 
            space of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.AngularLimit.AnchorOrientationBLocal">
      <summary>
            Gets or sets the constraint anchor orientation on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> in local 
            space of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.AngularLimit.AngularConstraintImpulse">
      <summary>
            Gets or sets the angular constraint impulse that was applied.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.AngularLimit.ErrorReduction">
      <summary>
            Gets or sets the error reduction parameter.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.AngularLimit.GetLimitState(System.Int32)">
      <summary>
            Gets the state of an angular limit about a certain axis.
            </summary>
      <param name="index">
            The index of the limit axis. (0 = first rotation axis, 1 = second rotation axis, 
            2 = third rotation axis)
            </param>
      <returns>
            The limit state on the given axis.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not in the range [0, 2].
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.AngularLimit.LinearConstraintImpulse">
      <summary>
            Gets or sets the linear constraint impulse that was applied. 
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.AngularLimit.MaxForce">
      <summary>
            Gets or sets the maximal forces for the three rotational constraints.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.AngularLimit.Maximum">
      <summary>
            Gets or sets the maximum movement limit on the three constraint axes (in radians).
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.AngularLimit.Minimum">
      <summary>
            Gets or sets the minimum movement limit on the three constraint axes (in radians).
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.AngularLimit.OnApplyImpulse">
      <summary>
            Called when the constraint impulse should be applied.
            </summary>
      <returns>
        <see langword="true" /> if a constraint larger than 
            <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" /> was applied.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.AngularLimit.OnChanged">
      <summary>
            Called when properties of this constraint were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.AngularLimit.OnSetup">
      <summary>
            Called when constraint should be set-up for a new time step.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.AngularLimit.RelativePosition">
      <summary>
            Gets the relative rotations about the constraint axes (the three Euler angles).
            </summary>
      <exception cref="T:DigitalRune.Physics.PhysicsException">
        <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> or <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.AngularLimit.Restitution">
      <summary>
            Gets or sets the coefficients of restitution.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.AngularLimit.Softness">
      <summary>
            Gets or sets the softness.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.AngularVelocityMotor">
      <summary>
            Defines a motor that controls the relative angular velocity of two constrained bodies.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.AngularVelocityMotor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Physics.Constraints.AngularVelocityMotor" /> class</summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.AngularVelocityMotor.AngularConstraintImpulse">
      <summary>
            Gets or sets the angular constraint impulse that was applied.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.AngularVelocityMotor.AxisALocal">
      <summary>
            Gets or sets the rotation axis that is fixed on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> in local 
            space of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />. 
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.AngularVelocityMotor.LinearConstraintImpulse">
      <summary>
            Gets or sets the linear constraint impulse that was applied. 
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.AngularVelocityMotor.MaxForce">
      <summary>
            Gets or sets the maximal force that is applied by this motor.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.AngularVelocityMotor.OnApplyImpulse">
      <summary>
            Called when the constraint impulse should be applied.
            </summary>
      <returns>
        <see langword="true" /> if a constraint larger than 
            <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" /> was applied.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.AngularVelocityMotor.OnChanged">
      <summary>
            Called when properties of this constraint were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.AngularVelocityMotor.OnSetup">
      <summary>
            Called when constraint should be set-up for a new time step.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.AngularVelocityMotor.Softness">
      <summary>
            Gets or sets the softness.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.AngularVelocityMotor.TargetVelocity">
      <summary>
            Gets or sets the target angular velocity around the rotation axis (<see cref="P:DigitalRune.Physics.Constraints.AngularVelocityMotor.AxisALocal" />).
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.AngularVelocityMotor.UseSingleAxisMode">
      <summary>
            Gets or sets a value indicating whether the motor applies forces only on a single axis.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.BallJoint">
      <summary>
            Defines a ball-and-socked joint.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.BallJoint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Physics.Constraints.BallJoint" /> class</summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.BallJoint.AnchorPositionALocal">
      <summary>
            Gets or sets the constraint anchor position on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> in local space
            of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.BallJoint.AnchorPositionBLocal">
      <summary>
            Gets or sets the constraint anchor position on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> in local space
            of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.BallJoint.AngularConstraintImpulse">
      <summary>
            Gets or sets the angular constraint impulse that was applied.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.BallJoint.ErrorReduction">
      <summary>
            Gets or sets the error reduction parameter.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.BallJoint.LinearConstraintImpulse">
      <summary>
            Gets or sets the linear constraint impulse that was applied. 
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.BallJoint.MaxForce">
      <summary>
            Gets or sets the maximal force that is applied by this constraint.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.BallJoint.OnApplyImpulse">
      <summary>
            Called when the constraint impulse should be applied.
            </summary>
      <returns>
        <see langword="true" /> if a constraint larger than 
            <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" /> was applied.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.BallJoint.OnChanged">
      <summary>
            Called when properties of this constraint were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.BallJoint.OnSetup">
      <summary>
            Called when constraint should be set-up for a new time step.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.BallJoint.Softness">
      <summary>
            Gets or sets the softness.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.Constraint">
      <summary>
            Defines a constraint between two rigid bodies.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.Constraint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Physics.Constraints.Constraint" /> class</summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.Constraint.AngularConstraintImpulse">
      <summary>
            Gets or sets the angular constraint impulse that was applied.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.Constraint.ApplyImpulse">
      <summary>
            Called by the simulation to apply an impulse that satisfies the constraint.
            </summary>
      <returns>
        <see langword="true" /> if a constraint larger than 
            <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" /> was applied.
            </returns>
      <exception cref="T:DigitalRune.Physics.PhysicsException">
        <see cref="M:DigitalRune.Physics.Constraints.Constraint.Setup" /> was not called before <see cref="M:DigitalRune.Physics.Constraints.Constraint.ApplyImpulse" />.</exception>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.Constraint.BodyA">
      <summary>
            Gets or sets the first body.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.Constraint.BodyB">
      <summary>
            Gets or sets the second body.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.Constraint.CollisionEnabled">
      <summary>
            Gets or sets a value indicating whether collisions between <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> and
            <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> are disabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.Constraint.Enabled">
      <summary>
            Gets or sets a value indicating whether this constraint is enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.Constraint.LinearConstraintImpulse">
      <summary>
            Gets or sets the linear constraint impulse that was applied. 
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.Constraint.OnAddToSimulation">
      <summary>
            Called when this constraint is added to a simulation.
            </summary>
      <exception cref="T:DigitalRune.Physics.PhysicsException">
        <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> or <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> is <see langword="null" />. The constraint bodies 
            must not be <see langword="null" /> when a constraint/joint is added to a simulation.
            </exception>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.Constraint.OnApplyImpulse">
      <summary>
            Called when the constraint impulse should be applied.
            </summary>
      <returns>
        <see langword="true" /> if a constraint larger than 
            <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" /> was applied.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.Constraint.OnChanged">
      <summary>
            Called when properties of this constraint were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.Constraint.OnRemoveFromSimulation">
      <summary>
            Called when this constraint is removed from a simulation.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.Constraint.OnSetup">
      <summary>
            Called when constraint should be set-up for a new time step.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.Constraint.Setup">
      <summary>
            Called by the simulation to prepare this constraint for constraint solving for a new
            time step.
            </summary>
      <exception cref="T:DigitalRune.Physics.PhysicsException">
        <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> or <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.Constraint.Simulation">
      <summary>
            Gets the simulation to which this constraint belongs.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.ConstraintCollection">
      <summary>
            Stores the <see cref="T:DigitalRune.Physics.Constraints.Constraint" /> objects of a simulation.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.ConstraintCollection.InsertItem(System.Int32,DigitalRune.Physics.Constraints.Constraint)">
      <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
      <param name="item">The object to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. The collection does not allow 
            <see langword="null" /> values. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowNull" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. The collection does not 
            allow duplicate items. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowDuplicates" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.ConstraintCollection.SetItem(System.Int32,DigitalRune.Physics.Constraints.Constraint)">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. The collection does not allow 
            <see langword="null" /> values. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowNull" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. The collection does not 
            allow duplicate items. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowDuplicates" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.ConstraintHelper">
      <summary>
            Provides constraint-related helper methods.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.ConstraintHelper.ComputeDampingConstant(System.Single,System.Single,System.Single)">
      <summary>
            Computes the damping constant from error reduction and softness parameters.
            </summary>
      <param name="deltaTime">The time step size.</param>
      <param name="errorReduction">The error reduction parameter.</param>
      <param name="softness">The softness parameter.</param>
      <returns>The damping constant.</returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.ConstraintHelper.ComputeErrorReduction(System.Single,System.Single,System.Single)">
      <summary>
            Computes the error reduction parameter for a given spring and damping constant.
            </summary>
      <param name="deltaTime">The time step size.</param>
      <param name="springConstant">The spring constant.</param>
      <param name="dampingConstant">The damping constant.</param>
      <returns>
            The error reduction parameter that lets the constraint behave like a damped spring with
            the given parameters.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.ConstraintHelper.ComputeKMatrix(DigitalRune.Physics.RigidBody,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Computes the K matrix needed by sequential impulse-based methods.
            </summary>
      <param name="body">The body.</param>
      <param name="positionWorld">The constraint anchor position in world space.</param>
      <returns>
            The K matrix.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.ConstraintHelper.ComputeSoftness(System.Single,System.Single,System.Single)">
      <summary>
            Computes the softness parameter for a given spring and damping constant.
            </summary>
      <param name="deltaTime">The time step size.</param>
      <param name="springConstant">The spring constant.</param>
      <param name="dampingConstant">The damping constant.</param>
      <returns>
            The softness parameter that lets the constraint behave like a damped spring with
            the given parameters.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.ConstraintHelper.ComputeSpringConstant(System.Single,System.Single,System.Single)">
      <summary>
            Computes the spring constant from error reduction and softness parameters.
            </summary>
      <param name="deltaTime">The time step size.</param>
      <param name="errorReduction">The error reduction parameter.</param>
      <param name="softness">The softness parameter.</param>
      <returns>The spring constant.</returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.ConstraintHelper.GetEulerAngles(DigitalRune.Mathematics.Algebra.Matrix33F)">
      <summary>
            Gets the Euler angles for the given rotation.
            </summary>
      <param name="rotation">The rotation.</param>
      <returns>
            A vector with the three Euler angles in radians: (angle0, angle1, angle2).
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.ConstraintHelper.SetVelocityOfWorldPoint(DigitalRune.Physics.RigidBody,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Applies an impulse so that the velocity of point on the body is changed.
            </summary>
      <param name="body">The body.</param>
      <param name="positionWorld">The position on the body in world space.</param>
      <param name="velocityWorld">The target velocity of the point in world space.</param>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.ContactConstraint">
      <summary>
            Defines a constraint at a rigid body contact that models non-penetration, dry friction
            and bounciness.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.ContactConstraint.ApplyImpulse">
      <summary>
            Called by the simulation to apply an impulse that satisfies the constraint.
            </summary>
      <returns>
        <see langword="true" /> if a constraint larger than <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" />
            was applied.
            </returns>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.ContactConstraint.BodyA">
      <summary>
            Gets the first body.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.ContactConstraint.BodyB">
      <summary>
            Gets the second body.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.ContactConstraint.Contact">
      <summary>
            Gets the contact.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.ContactConstraint.DigitalRune#Physics#Constraints#IConstraint#AngularConstraintImpulse">
      <summary>
            Gets or sets the angular constraint impulse that was applied.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.ContactConstraint.DigitalRune#Physics#Constraints#IConstraint#CollisionEnabled">
      <summary>
            Gets a value indicating whether collisions between <see cref="P:DigitalRune.Physics.Constraints.IConstraint.BodyA" /> and 
            <see cref="P:DigitalRune.Physics.Constraints.IConstraint.BodyB" /> are disabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.ContactConstraint.DigitalRune#Physics#Constraints#IConstraint#Enabled">
      <summary>
            Gets a value indicating whether this constraint is enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.ContactConstraint.ErrorReduction">
      <summary>
            Gets or sets the error reduction parameter.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.ContactConstraint.LinearConstraintImpulse">
      <summary>
            Gets or sets the linear constraint impulse that was applied. 
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.ContactConstraint.Setup">
      <summary>
            Called by the simulation to prepare this constraint for constraint solving for a new
            time step.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.ContactConstraint.Simulation">
      <summary>
            Gets the simulation to which this constraint belongs.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.CylindricalJoint">
      <summary>
            Defines a cylindrical slider joint.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.CylindricalJoint.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Constraints.CylindricalJoint" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.CylindricalJoint.AnchorPoseALocal">
      <summary>
            Gets or sets the constraint anchor pose on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> in local space of 
            <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.CylindricalJoint.AnchorPoseBLocal">
      <summary>
            Gets or sets the constraint anchor pose on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> in local space of 
            <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.CylindricalJoint.AngularConstraintImpulse">
      <summary>
            Gets or sets the angular constraint impulse that was applied.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.CylindricalJoint.AngularMaximum">
      <summary>
            Gets or sets the minimum rotation limit for rotations about the slider axis.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.CylindricalJoint.AngularMinimum">
      <summary>
            Gets or sets the minimum rotation limit for rotations about the slider axis.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.CylindricalJoint.AngularRelativePosition">
      <summary>
            Gets the relative rotation about the slider axis.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.CylindricalJoint.ErrorReduction">
      <summary>
            Gets or sets the error reduction parameter.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.CylindricalJoint.LinearConstraintImpulse">
      <summary>
            Gets or sets the linear constraint impulse that was applied. 
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.CylindricalJoint.LinearMaximum">
      <summary>
            Gets or sets the maximum translational movement limit on the slider axis.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.CylindricalJoint.LinearMinimum">
      <summary>
            Gets or sets the minimum translational movement limit on the slider axis.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.CylindricalJoint.LinearRelativePosition">
      <summary>
            Gets the relative position on the slider axis.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.CylindricalJoint.MaxForce">
      <summary>
            Gets or sets the maximal force that is applied by this constraint.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.CylindricalJoint.OnAddToSimulation">
      <summary>
            Called when this constraint is added to a simulation.
            </summary>
      <exception cref="T:DigitalRune.Physics.PhysicsException">
        <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> or <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> is <see langword="null" />. The constraint bodies 
            must not be <see langword="null" /> when a constraint/joint is added to a simulation.
            </exception>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.CylindricalJoint.OnApplyImpulse">
      <summary>
            Called when the constraint impulse should be applied.
            </summary>
      <returns>
        <see langword="true" /> if a constraint larger than 
            <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" /> was applied.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.CylindricalJoint.OnChanged">
      <summary>
            Called when properties of this constraint were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.CylindricalJoint.OnRemoveFromSimulation">
      <summary>
            Called when this constraint is removed from a simulation.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.CylindricalJoint.OnSetup">
      <summary>
            Called when constraint should be set-up for a new time step.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.CylindricalJoint.Restitution">
      <summary>
            Gets or sets the coefficient of restitution for slider limits.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.CylindricalJoint.Softness">
      <summary>
            Gets or sets the softness.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.DistanceLimit">
      <summary>
            Defines a constraint that limits the distance of two points.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.DistanceLimit.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Physics.Constraints.DistanceLimit" /> class</summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.DistanceLimit.AnchorPositionALocal">
      <summary>
            Gets or sets the constraint anchor position on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> in local space
            of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.DistanceLimit.AnchorPositionBLocal">
      <summary>
            Gets or sets the constraint anchor position on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> in local space
            of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.DistanceLimit.AngularConstraintImpulse">
      <summary>
            Gets or sets the angular constraint impulse that was applied.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.DistanceLimit.ErrorReduction">
      <summary>
            Gets or sets the error reduction parameter.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.DistanceLimit.LinearConstraintImpulse">
      <summary>
            Gets or sets the linear constraint impulse that was applied. 
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.DistanceLimit.MaxDistance">
      <summary>
            Gets or sets the maximal allowed distance between the constraint anchor points.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.DistanceLimit.MaxForce">
      <summary>
            Gets or sets the maximal force that is applied by this constraint.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.DistanceLimit.MinDistance">
      <summary>
            Gets or sets the minimal allowed distance between the constraint anchor points.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.DistanceLimit.OnApplyImpulse">
      <summary>
            Called when the constraint impulse should be applied.
            </summary>
      <returns>
        <see langword="true" /> if a constraint larger than 
            <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" /> was applied.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.DistanceLimit.OnChanged">
      <summary>
            Called when properties of this constraint were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.DistanceLimit.OnSetup">
      <summary>
            Called when constraint should be set-up for a new time step.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.DistanceLimit.Softness">
      <summary>
            Gets or sets the softness.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.EulerMotor">
      <summary>
            Defines a motor that controls the relative orientation of two constrained bodies using Euler
            angle.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.EulerMotor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Physics.Constraints.EulerMotor" /> class</summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.EulerMotor.AnchorOrientationALocal">
      <summary>
            Gets or sets the constraint anchor orientation on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> in local 
            space of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.EulerMotor.AnchorOrientationBLocal">
      <summary>
            Gets or sets the constraint anchor orientation on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> in local 
            space of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.EulerMotor.AngularConstraintImpulse">
      <summary>
            Gets or sets the angular constraint impulse that was applied.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.EulerMotor.DampingConstant">
      <summary>
            Gets or sets the damping constant.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.EulerMotor.LinearConstraintImpulse">
      <summary>
            Gets or sets the linear constraint impulse that was applied. 
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.EulerMotor.MaxForce">
      <summary>
            Gets or sets the maximal force that is applied by this motor.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.EulerMotor.MaxVelocity">
      <summary>
            Gets or sets the maximal velocity.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.EulerMotor.OnApplyImpulse">
      <summary>
            Called when the constraint impulse should be applied.
            </summary>
      <returns>
        <see langword="true" /> if a constraint larger than 
            <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" /> was applied.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.EulerMotor.OnChanged">
      <summary>
            Called when properties of this constraint were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.EulerMotor.OnSetup">
      <summary>
            Called when constraint should be set-up for a new time step.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.EulerMotor.SpringConstant">
      <summary>
            Gets or sets the spring constant.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.EulerMotor.TargetAngles">
      <summary>
            Gets or sets the target angles.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.FixedJoint">
      <summary>
            Defines a fixed joint that removes all degrees of freedom.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.FixedJoint.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Constraints.FixedJoint" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.FixedJoint.AnchorPoseALocal">
      <summary>
            Gets or sets the constraint anchor pose on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> in local space of 
            <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.FixedJoint.AnchorPoseBLocal">
      <summary>
            Gets or sets the constraint anchor pose on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> in local space of 
            <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.FixedJoint.AngularConstraintImpulse">
      <summary>
            Gets or sets the angular constraint impulse that was applied.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.FixedJoint.ErrorReduction">
      <summary>
            Gets or sets the error reduction parameter.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.FixedJoint.LinearConstraintImpulse">
      <summary>
            Gets or sets the linear constraint impulse that was applied. 
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.FixedJoint.MaxForce">
      <summary>
            Gets or sets the maximal force that is applied by this constraint.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.FixedJoint.OnAddToSimulation">
      <summary>
            Called when this constraint is added to a simulation.
            </summary>
      <exception cref="T:DigitalRune.Physics.PhysicsException">
        <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> or <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> is <see langword="null" />. The constraint bodies 
            must not be <see langword="null" /> when a constraint/joint is added to a simulation.
            </exception>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.FixedJoint.OnApplyImpulse">
      <summary>
            Called when the constraint impulse should be applied.
            </summary>
      <returns>
        <see langword="true" /> if a constraint larger than 
            <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" /> was applied.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.FixedJoint.OnChanged">
      <summary>
            Called when properties of this constraint were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.FixedJoint.OnRemoveFromSimulation">
      <summary>
            Called when this constraint is removed from a simulation.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.FixedJoint.OnSetup">
      <summary>
            Called when constraint should be set-up for a new time step.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.FixedJoint.Softness">
      <summary>
            Gets or sets the softness.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.Hinge2Joint">
      <summary>
            Defines a joint that allows rotations on two axis. The joint can be used to model the front
            wheel of a car.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.Hinge2Joint.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Constraints.Hinge2Joint" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.Hinge2Joint.AnchorPoseALocal">
      <summary>
            Gets or sets the constraint anchor pose on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> in local space of 
            <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.Hinge2Joint.AnchorPoseBLocal">
      <summary>
            Gets or sets the constraint anchor pose on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> in local space of 
            <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.Hinge2Joint.AngularConstraintImpulse">
      <summary>
            Gets or sets the angular constraint impulse that was applied.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.Hinge2Joint.ErrorReduction">
      <summary>
            Gets or sets the error reduction parameter.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.Hinge2Joint.LinearConstraintImpulse">
      <summary>
            Gets or sets the linear constraint impulse that was applied. 
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.Hinge2Joint.MaxForce">
      <summary>
            Gets or sets the maximal force that is applied by this constraint.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.Hinge2Joint.Maximum">
      <summary>
            Gets or sets the maximum rotation limits about the two rotation axis.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.Hinge2Joint.Minimum">
      <summary>
            Gets or sets the minimum rotation limits about the two rotation axis.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.Hinge2Joint.OnAddToSimulation">
      <summary>
            Called when this constraint is added to a simulation.
            </summary>
      <exception cref="T:DigitalRune.Physics.PhysicsException">
        <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> or <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> is <see langword="null" />. The constraint bodies 
            must not be <see langword="null" /> when a constraint/joint is added to a simulation.
            </exception>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.Hinge2Joint.OnApplyImpulse">
      <summary>
            Called when the constraint impulse should be applied.
            </summary>
      <returns>
        <see langword="true" /> if a constraint larger than 
            <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" /> was applied.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.Hinge2Joint.OnChanged">
      <summary>
            Called when properties of this constraint were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.Hinge2Joint.OnRemoveFromSimulation">
      <summary>
            Called when this constraint is removed from a simulation.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.Hinge2Joint.OnSetup">
      <summary>
            Called when constraint should be set-up for a new time step.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.Hinge2Joint.Restitution">
      <summary>
            Gets or sets the coefficient of restitution.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.Hinge2Joint.Softness">
      <summary>
            Gets or sets the softness.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.HingeJoint">
      <summary>
            Defines a hinge joint that only allows the constraint bodies to rotate about the hinge
            axis.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.HingeJoint.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Constraints.HingeJoint" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.HingeJoint.AnchorPoseALocal">
      <summary>
            Gets or sets the constraint anchor pose on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> in local space of 
            <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.HingeJoint.AnchorPoseBLocal">
      <summary>
            Gets or sets the constraint anchor pose on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> in local space of 
            <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.HingeJoint.AngularConstraintImpulse">
      <summary>
            Gets or sets the angular constraint impulse that was applied.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.HingeJoint.ErrorReduction">
      <summary>
            Gets or sets the error reduction parameter.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.HingeJoint.LinearConstraintImpulse">
      <summary>
            Gets or sets the linear constraint impulse that was applied. 
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.HingeJoint.MaxForce">
      <summary>
            Gets or sets the maximal force that is applied by this constraint.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.HingeJoint.Maximum">
      <summary>
            Gets or sets the maximum rotation limit about the hinge axis in radians.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.HingeJoint.Minimum">
      <summary>
            Gets or sets the minimum rotation limit about the hinge axis in radians.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.HingeJoint.OnAddToSimulation">
      <summary>
            Called when this constraint is added to a simulation.
            </summary>
      <exception cref="T:DigitalRune.Physics.PhysicsException">
        <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> or <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> is <see langword="null" />. The constraint bodies 
            must not be <see langword="null" /> when a constraint/joint is added to a simulation.
            </exception>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.HingeJoint.OnApplyImpulse">
      <summary>
            Called when the constraint impulse should be applied.
            </summary>
      <returns>
        <see langword="true" /> if a constraint larger than 
            <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" /> was applied.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.HingeJoint.OnChanged">
      <summary>
            Called when properties of this constraint were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.HingeJoint.OnRemoveFromSimulation">
      <summary>
            Called when this constraint is removed from a simulation.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.HingeJoint.OnSetup">
      <summary>
            Called when constraint should be set-up for a new time step.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.HingeJoint.RelativeAngularVelocity">
      <summary>
            Gets the relative angular velocity about the hinge axis.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.HingeJoint.RelativePosition">
      <summary>
            Gets the relative rotation angle about the hinge axis.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.HingeJoint.Restitution">
      <summary>
            Gets or sets the coefficient of restitution for hinge limits.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.HingeJoint.Softness">
      <summary>
            Gets or sets the softness.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.IConstraint">
      <summary>
            Defines a constraint between two bodies.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.IConstraint.AngularConstraintImpulse">
      <summary>
            Gets or sets the angular constraint impulse that was applied.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.IConstraint.ApplyImpulse">
      <summary>
            Called by the simulation to apply an impulse that satisfies the constraint.
            </summary>
      <returns>
        <see langword="true" /> if a constraint impulse larger than 
            <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" /> was applied.
            </returns>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.IConstraint.BodyA">
      <summary>
            Gets the first body.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.IConstraint.BodyB">
      <summary>
            Gets the second body.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.IConstraint.CollisionEnabled">
      <summary>
            Gets a value indicating whether collisions between <see cref="P:DigitalRune.Physics.Constraints.IConstraint.BodyA" /> and 
            <see cref="P:DigitalRune.Physics.Constraints.IConstraint.BodyB" /> are disabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.IConstraint.Enabled">
      <summary>
            Gets a value indicating whether this constraint is enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.IConstraint.LinearConstraintImpulse">
      <summary>
            Gets or sets the linear constraint impulse that was applied. 
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.IConstraint.Setup">
      <summary>
            Called by the simulation to prepare this constraint for constraint solving for a new
            time step.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.IConstraint.Simulation">
      <summary>
            Gets the simulation to which this constraint belongs.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.LimitState">
      <summary>
            Describe the state of a constraint limit.
            </summary>
    </member>
    <member name="F:DigitalRune.Physics.Constraints.LimitState.Inactive">
      <summary>
            The limit is inactive. The bodies are in an allowed position.
            </summary>
    </member>
    <member name="F:DigitalRune.Physics.Constraints.LimitState.Min">
      <summary>
            The minimal limit is reached.
            </summary>
    </member>
    <member name="F:DigitalRune.Physics.Constraints.LimitState.Max">
      <summary>
            The maximal limit is reached.
            </summary>
    </member>
    <member name="F:DigitalRune.Physics.Constraints.LimitState.Locked">
      <summary>
            The constraint is locked and does not allow relative movement on this constraint axis.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.LinearLimit">
      <summary>
            Defines a constraint that restricts translational movement. This constraint is configurable
            to create custom joints.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.LinearLimit.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Physics.Constraints.LinearLimit" /> class</summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.LinearLimit.AnchorPoseALocal">
      <summary>
            Gets or sets the constraint anchor pose on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> in local space of 
            <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.LinearLimit.AnchorPositionBLocal">
      <summary>
            Gets or sets the constraint anchor position on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> in local space
            of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.LinearLimit.AngularConstraintImpulse">
      <summary>
            Gets or sets the angular constraint impulse that was applied.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.LinearLimit.ErrorReduction">
      <summary>
            Gets or sets the error reduction parameter.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.LinearLimit.GetLimitState(System.Int32)">
      <summary>
            Gets the state of a linear limit.
            </summary>
      <param name="index">
            The index of the limit axis. (0 = x-axis, 1 = y-axis, 2 = z-axis).
            </param>
      <returns>
            The limit state on the given axis.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not in the range [0, 2].
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.LinearLimit.LinearConstraintImpulse">
      <summary>
            Gets or sets the linear constraint impulse that was applied. 
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.LinearLimit.MaxForce">
      <summary>
            Gets or sets the maximal forces for the three constraint axes.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.LinearLimit.Maximum">
      <summary>
            Gets or sets the maximum movement limit on the three constraint axes.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.LinearLimit.Minimum">
      <summary>
            Gets or sets the minimum movement limit on the three constraint axes.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.LinearLimit.OnApplyImpulse">
      <summary>
            Called when the constraint impulse should be applied.
            </summary>
      <returns>
        <see langword="true" /> if a constraint larger than 
            <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" /> was applied.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.LinearLimit.OnChanged">
      <summary>
            Called when properties of this constraint were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.LinearLimit.OnSetup">
      <summary>
            Called when constraint should be set-up for a new time step.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.LinearLimit.RelativePosition">
      <summary>
            Gets the relative position on the constraint axes.
            </summary>
      <exception cref="T:DigitalRune.Physics.PhysicsException">
        <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> or <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.LinearLimit.Restitution">
      <summary>
            Gets or sets the coefficients of restitution.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.LinearLimit.Softness">
      <summary>
            Gets or sets the softness.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.LinearVelocityMotor">
      <summary>
            Defines a motor that controls the relative linear velocity of two constrained bodies.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.LinearVelocityMotor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Physics.Constraints.LinearVelocityMotor" /> class</summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.LinearVelocityMotor.AnchorPositionALocal">
      <summary>
            Gets or sets the constraint anchor position on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> in local space 
            of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.LinearVelocityMotor.AnchorPositionBLocal">
      <summary>
            Gets or sets the constraint anchor position on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> in local space
            of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.LinearVelocityMotor.AngularConstraintImpulse">
      <summary>
            Gets or sets the angular constraint impulse that was applied.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.LinearVelocityMotor.AxisALocal">
      <summary>
            Gets or sets the constraint axis that is fixed on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> in local 
            space of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.LinearVelocityMotor.LinearConstraintImpulse">
      <summary>
            Gets or sets the linear constraint impulse that was applied. 
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.LinearVelocityMotor.MaxForce">
      <summary>
            Gets or sets the maximal force that is applied by this motor.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.LinearVelocityMotor.OnApplyImpulse">
      <summary>
            Called when the constraint impulse should be applied.
            </summary>
      <returns>
        <see langword="true" /> if a constraint larger than 
            <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" /> was applied.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.LinearVelocityMotor.OnChanged">
      <summary>
            Called when properties of this constraint were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.LinearVelocityMotor.OnSetup">
      <summary>
            Called when constraint should be set-up for a new time step.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.LinearVelocityMotor.Softness">
      <summary>
            Gets or sets the softness.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.LinearVelocityMotor.TargetVelocity">
      <summary>
            Gets or sets the target linear velocity in the direction of the constraint axis
            (<see cref="P:DigitalRune.Physics.Constraints.LinearVelocityMotor.AxisALocal" />).
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.LinearVelocityMotor.UseSingleAxisMode">
      <summary>
            Gets or sets a value indicating whether the motor applies forces only on a single axis.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.NoRotationConstraint">
      <summary>
            Defines a constraint that fixes the relative orientation of two bodies.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.NoRotationConstraint.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Constraints.NoRotationConstraint" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.NoRotationConstraint.AnchorOrientationALocal">
      <summary>
            Gets or sets the constraint anchor orientation on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> in local 
            space of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.NoRotationConstraint.AnchorOrientationBLocal">
      <summary>
            Gets or sets the constraint anchor orientation on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> in local 
            space of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.NoRotationConstraint.AngularConstraintImpulse">
      <summary>
            Gets or sets the angular constraint impulse that was applied.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.NoRotationConstraint.ErrorReduction">
      <summary>
            Gets or sets the error reduction parameter.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.NoRotationConstraint.LinearConstraintImpulse">
      <summary>
            Gets or sets the linear constraint impulse that was applied. 
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.NoRotationConstraint.MaxForce">
      <summary>
            Gets or sets the maximal force that is applied by this constraint.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.NoRotationConstraint.OnAddToSimulation">
      <summary>
            Called when this constraint is added to a simulation.
            </summary>
      <exception cref="T:DigitalRune.Physics.PhysicsException">
        <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> or <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> is <see langword="null" />. The constraint bodies 
            must not be <see langword="null" /> when a constraint/joint is added to a simulation.
            </exception>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.NoRotationConstraint.OnApplyImpulse">
      <summary>
            Called when the constraint impulse should be applied.
            </summary>
      <returns>
        <see langword="true" /> if a constraint larger than 
            <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" /> was applied.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.NoRotationConstraint.OnChanged">
      <summary>
            Called when properties of this constraint were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.NoRotationConstraint.OnRemoveFromSimulation">
      <summary>
            Called when this constraint is removed from a simulation.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.NoRotationConstraint.OnSetup">
      <summary>
            Called when constraint should be set-up for a new time step.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.NoRotationConstraint.Softness">
      <summary>
            Gets or sets the softness.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.PlaneLimit">
      <summary>
            Defines a limit plane and a limit point that must stay in front of the plane.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PlaneLimit.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Physics.Constraints.PlaneLimit" /> class</summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PlaneLimit.AnchorPositionBLocal">
      <summary>
            Gets or sets the constraint anchor position on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> in local space
            of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PlaneLimit.AngularConstraintImpulse">
      <summary>
            Gets or sets the angular constraint impulse that was applied.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PlaneLimit.ConstraintImpulse">
      <summary>
            Gets or sets the constraint impulse that was applied. 
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PlaneLimit.ErrorReduction">
      <summary>
            Gets or sets the error reduction parameter.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PlaneLimit.LinearConstraintImpulse">
      <summary>
            Gets or sets the linear constraint impulse that was applied. 
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PlaneLimit.MaxForce">
      <summary>
            Gets or sets the maximal force that is applied by this constraint.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PlaneLimit.OnApplyImpulse">
      <summary>
            Called when the constraint impulse should be applied.
            </summary>
      <returns>
        <see langword="true" /> if a constraint larger than 
            <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" /> was applied.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PlaneLimit.OnChanged">
      <summary>
            Called when properties of this constraint were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PlaneLimit.OnSetup">
      <summary>
            Called when constraint should be set-up for a new time step.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PlaneLimit.PlaneALocal">
      <summary>
            Gets or sets the constraint plane that this is fixed on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> 
            (defined in local space of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />).
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PlaneLimit.Restitution">
      <summary>
            Gets or sets the coefficient of restitution.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PlaneLimit.Softness">
      <summary>
            Gets or sets the softness.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.PointOnLineConstraint">
      <summary>
            Defines a constraint that forces one body to move on a line that is fixed on the other body.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PointOnLineConstraint.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Constraints.PointOnLineConstraint" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnLineConstraint.AnchorPositionALocal">
      <summary>
            Gets or sets the constraint anchor position on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> in local space
            of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnLineConstraint.AnchorPositionBLocal">
      <summary>
            Gets or sets the constraint anchor position on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> in local space
            of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnLineConstraint.AngularConstraintImpulse">
      <summary>
            Gets or sets the angular constraint impulse that was applied.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnLineConstraint.AxisALocal">
      <summary>
            Gets or sets the line axis that is fixed on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> in local space
            of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />.
            </summary>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is a zero vector.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnLineConstraint.ErrorReduction">
      <summary>
            Gets or sets the error reduction parameter.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnLineConstraint.LinearConstraintImpulse">
      <summary>
            Gets or sets the linear constraint impulse that was applied. 
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnLineConstraint.MaxForce">
      <summary>
            Gets or sets the maximal force that is applied by this constraint.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnLineConstraint.Maximum">
      <summary>
            Gets or sets the maximum movement limit on the line.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnLineConstraint.Minimum">
      <summary>
            Gets or sets the minimum movement limit on the line.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PointOnLineConstraint.OnAddToSimulation">
      <summary>
            Called when this constraint is added to a simulation.
            </summary>
      <exception cref="T:DigitalRune.Physics.PhysicsException">
        <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> or <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> is <see langword="null" />. The constraint bodies 
            must not be <see langword="null" /> when a constraint/joint is added to a simulation.
            </exception>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PointOnLineConstraint.OnApplyImpulse">
      <summary>
            Called when the constraint impulse should be applied.
            </summary>
      <returns>
        <see langword="true" /> if a constraint larger than 
            <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" /> was applied.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PointOnLineConstraint.OnChanged">
      <summary>
            Called when properties of this constraint were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PointOnLineConstraint.OnRemoveFromSimulation">
      <summary>
            Called when this constraint is removed from a simulation.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PointOnLineConstraint.OnSetup">
      <summary>
            Called when constraint should be set-up for a new time step.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnLineConstraint.RelativePosition">
      <summary>
            Gets the position on the line axis relative to <see cref="P:DigitalRune.Physics.Constraints.PointOnLineConstraint.AnchorPositionALocal" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnLineConstraint.Restitution">
      <summary>
            Gets or sets the coefficient of restitution for limits.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnLineConstraint.Softness">
      <summary>
            Gets or sets the softness.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.PointOnPlaneConstraint">
      <summary>
            Restricts a body to move in a plane that is fixed on another body.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PointOnPlaneConstraint.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Constraints.PointOnPlaneConstraint" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnPlaneConstraint.AnchorPositionALocal">
      <summary>
            Gets or sets the constraint anchor position on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> in local space
            of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnPlaneConstraint.AnchorPositionBLocal">
      <summary>
            Gets or sets the constraint anchor position on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> in local space
            of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnPlaneConstraint.AngularConstraintImpulse">
      <summary>
            Gets or sets the angular constraint impulse that was applied.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnPlaneConstraint.ErrorReduction">
      <summary>
            Gets or sets the error reduction parameter.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnPlaneConstraint.LinearConstraintImpulse">
      <summary>
            Gets or sets the linear constraint impulse that was applied. 
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnPlaneConstraint.MaxForce">
      <summary>
            Gets or sets the maximal force that is applied by this constraint.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnPlaneConstraint.Maximum">
      <summary>
            Gets or sets the maximum movement limits on the plane.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnPlaneConstraint.Minimum">
      <summary>
            Gets or sets the minimum movement limits on the plane.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PointOnPlaneConstraint.OnAddToSimulation">
      <summary>
            Called when this constraint is added to a simulation.
            </summary>
      <exception cref="T:DigitalRune.Physics.PhysicsException">
        <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> or <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> is <see langword="null" />. The constraint bodies 
            must not be <see langword="null" /> when a constraint/joint is added to a simulation.
            </exception>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PointOnPlaneConstraint.OnApplyImpulse">
      <summary>
            Called when the constraint impulse should be applied.
            </summary>
      <returns>
        <see langword="true" /> if a constraint larger than 
            <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" /> was applied.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PointOnPlaneConstraint.OnChanged">
      <summary>
            Called when properties of this constraint were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PointOnPlaneConstraint.OnRemoveFromSimulation">
      <summary>
            Called when this constraint is removed from a simulation.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PointOnPlaneConstraint.OnSetup">
      <summary>
            Called when constraint should be set-up for a new time step.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnPlaneConstraint.RelativePosition">
      <summary>
            Gets the position on the plane axes relative to <see cref="P:DigitalRune.Physics.Constraints.PointOnPlaneConstraint.AnchorPositionALocal" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnPlaneConstraint.Restitution">
      <summary>
            Gets or sets the coefficient of restitution for limits.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnPlaneConstraint.Softness">
      <summary>
            Gets or sets the softness.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnPlaneConstraint.XAxisALocal">
      <summary>
            Gets or sets the x-axis in the plane that is fixed on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> in 
            local space of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />.
            </summary>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is a zero vector.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PointOnPlaneConstraint.YAxisALocal">
      <summary>
            Gets or sets the y-axis in the plane that is fixed on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> in 
            local space of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />.
            </summary>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is a zero vector.
            </exception>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.PositionMotor">
      <summary>
            Defines a motor that controls the linear distance of two constrained bodies.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PositionMotor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Physics.Constraints.PositionMotor" /> class</summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PositionMotor.AnchorPoseALocal">
      <summary>
            Gets or sets the constraint anchor pose on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> in local space of 
            <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PositionMotor.AnchorPositionBLocal">
      <summary>
            Gets or sets the constraint anchor position on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> in local space
            of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PositionMotor.AngularConstraintImpulse">
      <summary>
            Gets or sets the angular constraint impulse that was applied.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PositionMotor.DampingConstant">
      <summary>
            Gets or sets the damping constant.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PositionMotor.LinearConstraintImpulse">
      <summary>
            Gets or sets the linear constraint impulse that was applied. 
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PositionMotor.MaxForce">
      <summary>
            Gets or sets the maximal force that is applied by this motor.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PositionMotor.MaxVelocity">
      <summary>
            Gets or sets the maximal velocity.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PositionMotor.OnApplyImpulse">
      <summary>
            Called when the constraint impulse should be applied.
            </summary>
      <returns>
        <see langword="true" /> if a constraint larger than 
            <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" /> was applied.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PositionMotor.OnChanged">
      <summary>
            Called when properties of this constraint were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PositionMotor.OnSetup">
      <summary>
            Called when constraint should be set-up for a new time step.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PositionMotor.RelativePosition">
      <summary>
            Gets the relative position of the constraint anchor on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" />
            relative to the constraint anchor on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />.
            </summary>
      <exception cref="T:DigitalRune.Physics.PhysicsException">
        <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> or <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PositionMotor.SpringConstant">
      <summary>
            Gets or sets the spring constant.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PositionMotor.TargetPosition">
      <summary>
            Gets or sets the target position of the <see cref="P:DigitalRune.Physics.Constraints.PositionMotor.AnchorPositionBLocal" /> relative to 
            <see cref="P:DigitalRune.Physics.Constraints.PositionMotor.AnchorPoseALocal" /></summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PositionMotor.UseSingleAxisMode">
      <summary>
            Gets or sets a value indicating whether the motor applies forces only on a single axis.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.PrismaticJoint">
      <summary>
            Defines a prismatic slider joint.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PrismaticJoint.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Constraints.PrismaticJoint" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PrismaticJoint.AnchorPoseALocal">
      <summary>
            Gets or sets the constraint anchor pose on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> in local space of 
            <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PrismaticJoint.AnchorPoseBLocal">
      <summary>
            Gets or sets the constraint anchor pose on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> in local space of 
            <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PrismaticJoint.AngularConstraintImpulse">
      <summary>
            Gets or sets the angular constraint impulse that was applied.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PrismaticJoint.ErrorReduction">
      <summary>
            Gets or sets the error reduction parameter.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PrismaticJoint.LinearConstraintImpulse">
      <summary>
            Gets or sets the linear constraint impulse that was applied. 
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PrismaticJoint.MaxForce">
      <summary>
            Gets or sets the maximal force that is applied by this constraint.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PrismaticJoint.Maximum">
      <summary>
            Gets or sets the maximum movement limit on the slider axis.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PrismaticJoint.Minimum">
      <summary>
            Gets or sets the minimum movement limit on the slider axis.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PrismaticJoint.OnAddToSimulation">
      <summary>
            Called when this constraint is added to a simulation.
            </summary>
      <exception cref="T:DigitalRune.Physics.PhysicsException">
        <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> or <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> is <see langword="null" />. The constraint bodies 
            must not be <see langword="null" /> when a constraint/joint is added to a simulation.
            </exception>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PrismaticJoint.OnApplyImpulse">
      <summary>
            Called when the constraint impulse should be applied.
            </summary>
      <returns>
        <see langword="true" /> if a constraint larger than 
            <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" /> was applied.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PrismaticJoint.OnChanged">
      <summary>
            Called when properties of this constraint were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PrismaticJoint.OnRemoveFromSimulation">
      <summary>
            Called when this constraint is removed from a simulation.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.PrismaticJoint.OnSetup">
      <summary>
            Called when constraint should be set-up for a new time step.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PrismaticJoint.RelativePosition">
      <summary>
            Gets the relative position on the slider axis.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PrismaticJoint.Restitution">
      <summary>
            Gets or sets the coefficient of restitution for slider limits.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.PrismaticJoint.Softness">
      <summary>
            Gets or sets the softness.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.QuaternionMotor">
      <summary>
            Defines a motor that controls the relative orientation of two constrained bodies using
            quaternions.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.QuaternionMotor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Physics.Constraints.QuaternionMotor" /> class</summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.QuaternionMotor.AnchorOrientationALocal">
      <summary>
            Gets or sets the constraint anchor orientation on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> in local 
            space of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.QuaternionMotor.AnchorOrientationBLocal">
      <summary>
            Gets or sets the constraint anchor orientation on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> in local 
            space of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.QuaternionMotor.AngularConstraintImpulse">
      <summary>
            Gets or sets the angular constraint impulse that was applied.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.QuaternionMotor.DampingConstant">
      <summary>
            Gets or sets the damping constant.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.QuaternionMotor.LinearConstraintImpulse">
      <summary>
            Gets or sets the linear constraint impulse that was applied. 
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.QuaternionMotor.MaxForce">
      <summary>
            Gets or sets the maximal force that is applied by this motor.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.QuaternionMotor.MaxVelocity">
      <summary>
            Gets or sets the maximal velocity.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.QuaternionMotor.OnApplyImpulse">
      <summary>
            Called when the constraint impulse should be applied.
            </summary>
      <returns>
        <see langword="true" /> if a constraint larger than 
            <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" /> was applied.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.QuaternionMotor.OnChanged">
      <summary>
            Called when properties of this constraint were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.QuaternionMotor.OnSetup">
      <summary>
            Called when constraint should be set-up for a new time step.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.QuaternionMotor.SpringConstant">
      <summary>
            Gets or sets the spring constant.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.QuaternionMotor.TargetOrientation">
      <summary>
            Gets or sets the target orientation of the anchor on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> 
            relative to the anchor on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />. 
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.QuaternionMotor.UseSingleAxisMode">
      <summary>
            Gets or sets a value indicating whether the motor applies forces only on a single axis.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.TwistSwingLimit">
      <summary>
            Defines a twist and swing limits to limit rotations.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.TwistSwingLimit.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Physics.Constraints.TwistSwingLimit" /> class</summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.TwistSwingLimit.AnchorOrientationALocal">
      <summary>
            Gets or sets the constraint anchor orientation on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> in local 
            space of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.TwistSwingLimit.AnchorOrientationBLocal">
      <summary>
            Gets or sets the constraint anchor orientation on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> in local 
            space of <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.TwistSwingLimit.AngularConstraintImpulse">
      <summary>
            Gets or sets the angular constraint impulse that was applied.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.TwistSwingLimit.ErrorReduction">
      <summary>
            Gets or sets the error reduction parameter.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.TwistSwingLimit.GetPointOnCone(System.Single,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
      <summary>
            Gets a point on the swing limit cone (for debug visualization).
            </summary>
      <param name="angle">The angle about the twist axis in radians.</param>
      <param name="coneTip">The position of the tip of the cone.</param>
      <param name="distanceFromTip">The distance from tip.</param>
      <returns>
            A point that lies on the cone. The distance to the tip of the cone is <paramref name="distanceFromTip" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.TwistSwingLimit.LinearConstraintImpulse">
      <summary>
            Gets or sets the linear constraint impulse that was applied. 
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.TwistSwingLimit.MaxForce">
      <summary>
            Gets or sets the maximal forces that are applied by this constraint.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.TwistSwingLimit.Maximum">
      <summary>
            Gets or sets the maximum movement limit on the twist and swing axes.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            A maximum swing limit is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.TwistSwingLimit.Minimum">
      <summary>
            Gets or sets the minimum movement limit on the twist and swing axes.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            A minimum swing limit is positive.
            </exception>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.TwistSwingLimit.OnApplyImpulse">
      <summary>
            Called when the constraint impulse should be applied.
            </summary>
      <returns>
        <see langword="true" /> if a constraint larger than 
            <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" /> was applied.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.TwistSwingLimit.OnChanged">
      <summary>
            Called when properties of this constraint were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.TwistSwingLimit.OnSetup">
      <summary>
            Called when constraint should be set-up for a new time step.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.TwistSwingLimit.Restitution">
      <summary>
            Gets or sets the coefficient of restitution for limits.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.TwistSwingLimit.Softness">
      <summary>
            Gets or sets the softness.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Constraints.UniversalJoint">
      <summary>
            Defines a joint that allows rotations about two axes.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.UniversalJoint.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Constraints.UniversalJoint" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.UniversalJoint.AnchorPoseALocal">
      <summary>
            Gets or sets the constraint anchor pose on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> in local space of 
            <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.UniversalJoint.AnchorPoseBLocal">
      <summary>
            Gets or sets the constraint anchor pose on <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> in local space of 
            <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.UniversalJoint.AngularConstraintImpulse">
      <summary>
            Gets or sets the angular constraint impulse that was applied.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.UniversalJoint.ErrorReduction">
      <summary>
            Gets or sets the error reduction parameter.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.UniversalJoint.LinearConstraintImpulse">
      <summary>
            Gets or sets the linear constraint impulse that was applied. 
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.UniversalJoint.MaxForce">
      <summary>
            Gets or sets the maximal force that is applied by this constraint.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.UniversalJoint.Maximum">
      <summary>
            Gets or sets the maximum rotation limits about the two rotation axis.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.UniversalJoint.Minimum">
      <summary>
            Gets or sets the minimum rotation limits about the two rotation axis.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.UniversalJoint.OnAddToSimulation">
      <summary>
            Called when this constraint is added to a simulation.
            </summary>
      <exception cref="T:DigitalRune.Physics.PhysicsException">
        <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyA" /> or <see cref="P:DigitalRune.Physics.Constraints.Constraint.BodyB" /> is <see langword="null" />. The constraint bodies 
            must not be <see langword="null" /> when a constraint/joint is added to a simulation.
            </exception>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.UniversalJoint.OnApplyImpulse">
      <summary>
            Called when the constraint impulse should be applied.
            </summary>
      <returns>
        <see langword="true" /> if a constraint larger than 
            <see cref="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse" /> was applied.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.UniversalJoint.OnChanged">
      <summary>
            Called when properties of this constraint were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.UniversalJoint.OnRemoveFromSimulation">
      <summary>
            Called when this constraint is removed from a simulation.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Constraints.UniversalJoint.OnSetup">
      <summary>
            Called when constraint should be set-up for a new time step.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.UniversalJoint.Restitution">
      <summary>
            Gets or sets the coefficient of restitution.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Constraints.UniversalJoint.Softness">
      <summary>
            Gets or sets the softness.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.ForceEffects.Buoyancy">
      <summary>
            Applies a buoyancy force to create swimming bodies.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.Buoyancy.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.ForceEffects.Buoyancy" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.Buoyancy.#ctor(DigitalRune.Physics.ForceEffects.IAreaOfEffect)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.ForceEffects.Buoyancy" /> class.
            </summary>
      <param name="areaOfEffect">The area of effect.</param>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.Buoyancy.AngularDrag">
      <summary>
            Gets or sets the angular drag coefficient.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.Buoyancy.Apply(DigitalRune.Physics.RigidBody)">
      <summary>
            Applies the force effect to the specified body.
            </summary>
      <param name="body">The rigid body.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.Buoyancy.Density">
      <summary>
            Gets or sets the density of the liquid.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.Buoyancy.Gravity">
      <summary>
            Gets or sets the gravity acceleration.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.Buoyancy.LinearDrag">
      <summary>
            Gets or sets the linear drag coefficient.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.Buoyancy.Prepare(DigitalRune.Physics.RigidBody)">
      <summary>
            Prepares the specified rigid body for the buoyancy effect.
            </summary>
      <param name="body">The rigid body.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.Buoyancy.Surface">
      <summary>
            Gets or sets the water surface plane (in world space).
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.Buoyancy.Velocity">
      <summary>
            Gets or sets the linear velocity of the water.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.ForceEffects.DampedSpring">
      <summary>
            Connects to rigid bodies with a damped spring.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.DampedSpring.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.ForceEffects.DampedSpring" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.DampedSpring.AttachmentPositionALocal">
      <summary>
            Gets or sets the position where the spring is attached to the first body (in local space of
            the first body).
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.DampedSpring.AttachmentPositionBLocal">
      <summary>
            Gets or sets the position where the spring is attached to the second body (in local space of
            the second body).
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.DampedSpring.BodyA">
      <summary>
            Gets or sets the first rigid body.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.DampedSpring.BodyB">
      <summary>
            Gets or sets the second rigid body.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.DampedSpring.DampingConstant">
      <summary>
            Gets or sets the damping constant.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.DampedSpring.Length">
      <summary>
            Gets or sets the rest length of the spring.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.DampedSpring.OnApply">
      <summary>
            Called when the simulation wants this force effect to apply forces to rigid bodies.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.DampedSpring.SpringConstant">
      <summary>
            Gets or sets the spring constant.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.ForceEffects.Damping">
      <summary>
            Applies a damping force (viscous drag).
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.Damping.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.ForceEffects.Damping" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.Damping.#ctor(DigitalRune.Physics.ForceEffects.IAreaOfEffect)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.ForceEffects.Damping" /> class.
            </summary>
      <param name="areaOfEffect">The area of effect.</param>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.Damping.AngularDamping">
      <summary>
            The angular damping coefficient.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.Damping.Apply(DigitalRune.Physics.RigidBody)">
      <summary>
            Applies the force effect to the specified body.
            </summary>
      <param name="body">The rigid body.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.Damping.LinearDamping">
      <summary>
            The linear damping coefficient.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.ForceEffects.Explosion">
      <summary>
            Applies an explosion force for a short duration.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.Explosion.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.ForceEffects.Explosion" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.Explosion.#ctor(DigitalRune.Physics.ForceEffects.IAreaOfEffect)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.ForceEffects.Explosion" /> class.
            </summary>
      <param name="areaOfEffect">The area of effect.</param>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.Explosion.Apply(DigitalRune.Physics.RigidBody)">
      <summary>
            Applies the force effect to the specified body.
            </summary>
      <param name="body">The rigid body.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.Explosion.Duration">
      <summary>
            Gets or sets the duration of the explosion.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.Explosion.Force">
      <summary>
            Gets or sets the force magnitude of the explosion.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.Explosion.OnAddToSimulation">
      <summary>
            Called when this force effect is added to a simulation.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.Explosion.OnApply">
      <summary>
            Called when the simulation wants this force effect to apply forces to rigid bodies.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.Explosion.Position">
      <summary>
            Gets or sets the position of the center of the explosion.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.Explosion.Radius">
      <summary>
            Gets or sets the explosion radius.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.ForceEffects.ForceEffect">
      <summary>
            Applies a force onto rigid bodies.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.ForceEffect.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.ForceEffects.ForceEffect" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.ForceEffect.AddForce(DigitalRune.Physics.RigidBody,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Applies a force to the rigid body at the center of mass.
            </summary>
      <param name="body">The rigid body.</param>
      <param name="forceWorld">The force in world space.</param>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.ForceEffect.AddForce(DigitalRune.Physics.RigidBody,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Applies a force to the rigid body.
            </summary>
      <param name="body">The rigid body.</param>
      <param name="forceWorld">The force in world space.</param>
      <param name="positionWorld">
            The world space position where the force is a applied on the body.
            </param>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.ForceEffect.AddTorque(DigitalRune.Physics.RigidBody,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Applies a torque to the rigid body at the center of mass.
            </summary>
      <param name="body">The rigid body.</param>
      <param name="torqueWorld">The torque in world space.</param>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.ForceEffect.Enabled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:DigitalRune.Physics.ForceEffects.ForceEffect" /> is enabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.ForceEffect.OnAddToSimulation">
      <summary>
            Called when this force effect is added to a simulation.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.ForceEffect.OnApply">
      <summary>
            Called when the simulation wants this force effect to apply forces to rigid bodies.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.ForceEffect.OnDisabled">
      <summary>
            Called when this force effect was disabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.ForceEffect.OnEnabled">
      <summary>
            Called when this force effect was enabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.ForceEffect.OnRemoveFromSimulation">
      <summary>
            Called when this force effect is removed from a simulation.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.ForceEffect.Simulation">
      <summary>
            Gets the simulation to which this force effect belongs.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.ForceEffects.ForceEffectCollection">
      <summary>
            Stores the <see cref="T:DigitalRune.Physics.ForceEffects.ForceEffect" />s of a simulation.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.ForceEffectCollection.InsertItem(System.Int32,DigitalRune.Physics.ForceEffects.ForceEffect)">
      <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
      <param name="item">The object to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. The collection does not allow 
            <see langword="null" /> values. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowNull" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. The collection does not 
            allow duplicate items. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowDuplicates" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.ForceEffectCollection.SetItem(System.Int32,DigitalRune.Physics.ForceEffects.ForceEffect)">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. The collection does not allow 
            <see langword="null" /> values. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowNull" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. The collection does not 
            allow duplicate items. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowDuplicates" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Physics.ForceEffects.ForceField">
      <summary>
            Applies a force effect to all bodies in the <see cref="P:DigitalRune.Physics.ForceEffects.ForceField.AreaOfEffect" /> individually.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.ForceField.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.ForceEffects.ForceField" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.ForceField.#ctor(DigitalRune.Physics.ForceEffects.IAreaOfEffect)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.ForceEffects.ForceField" /> class.
            </summary>
      <param name="areaOfEffect">The area of effect.</param>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.ForceField.Apply(DigitalRune.Physics.RigidBody)">
      <summary>
            Applies the force effect to the specified body.
            </summary>
      <param name="body">The rigid body.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.ForceField.AreaOfEffect">
      <summary>
            Gets or sets the area of effect.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.ForceField.OnApply">
      <summary>
            Called when the simulation wants this force effect to apply forces to rigid bodies.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.ForceEffects.GeometricAreaOfEffect">
      <summary>
            Applies a force field effect to all rigid bodies that touch a certain 
            <see cref="P:DigitalRune.Physics.ForceEffects.GeometricAreaOfEffect.CollisionObject" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.GeometricAreaOfEffect.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.ForceEffects.GeometricAreaOfEffect" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.GeometricAreaOfEffect.#ctor(DigitalRune.Geometry.Collisions.CollisionObject)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.ForceEffects.GeometricAreaOfEffect" /> class.
            </summary>
      <param name="collisionObject">The collision object.</param>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.GeometricAreaOfEffect.Apply(DigitalRune.Physics.ForceEffects.ForceField)">
      <summary>
            Calls <see cref="M:DigitalRune.Physics.ForceEffects.ForceField.Apply(DigitalRune.Physics.RigidBody)" /> of the given force field for all objects
            in the area of effect.
            </summary>
      <param name="forceField">The force field.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="forceField" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.GeometricAreaOfEffect.CollisionObject">
      <summary>
            Gets or sets the collision object that defines the area of effect.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.ForceEffects.GlobalAreaOfEffect">
      <summary>
            Applies a force field effect to all <see cref="P:DigitalRune.Physics.Simulation.RigidBodies" /> of the 
            <see cref="T:DigitalRune.Physics.Simulation" />. (An optional predicate can be used to exclude certain objects.)
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.GlobalAreaOfEffect.#ctor">
      <summary>Initializes a new instance of the <see cref="T:DigitalRune.Physics.ForceEffects.GlobalAreaOfEffect" /> class</summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.GlobalAreaOfEffect.Apply(DigitalRune.Physics.ForceEffects.ForceField)">
      <summary>
            Calls <see cref="M:DigitalRune.Physics.ForceEffects.ForceField.Apply(DigitalRune.Physics.RigidBody)" /> of the given force field for all objects in 
            the area of effect.
            </summary>
      <param name="forceField">The force field.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="forceField" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.GlobalAreaOfEffect.Exclude">
      <summary>
            Gets or sets the predicate that can be used to exclude rigid bodies from the area of effect.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.ForceEffects.Gravity">
      <summary>
            Applies a gravity force to rigid bodies.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.Gravity.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.ForceEffects.Gravity" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.Gravity.#ctor(DigitalRune.Physics.ForceEffects.IAreaOfEffect)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.ForceEffects.Gravity" /> class.
            </summary>
      <param name="areaOfEffect">The area of effect.</param>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.Gravity.Acceleration">
      <summary>
            Gets or sets the gravity acceleration vector.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.Gravity.Apply(DigitalRune.Physics.RigidBody)">
      <summary>
            Applies the force effect to the specified body.
            </summary>
      <param name="body">The rigid body.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Physics.ForceEffects.IAreaOfEffect">
      <summary>
            Defines the area of effect of a <see cref="T:DigitalRune.Physics.ForceEffects.ForceField" />. Only rigid bodies in the area of
            effect are subject to forces.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.IAreaOfEffect.Apply(DigitalRune.Physics.ForceEffects.ForceField)">
      <summary>
            Calls <see cref="M:DigitalRune.Physics.ForceEffects.ForceField.Apply(DigitalRune.Physics.RigidBody)" /> of the given force field for all objects
            in the area of effect.
            </summary>
      <param name="forceField">The force field.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="forceField" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Physics.ForceEffects.ListAreaOfEffect">
      <summary>
            Applies a force field effect to all objects in a given list.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.ListAreaOfEffect.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.ForceEffects.ListAreaOfEffect" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.ListAreaOfEffect.#ctor(System.Collections.Generic.IList{DigitalRune.Physics.RigidBody})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.ForceEffects.ListAreaOfEffect" /> class.
            </summary>
      <param name="rigidBodies">
            The list of rigid bodies. The property <see cref="P:DigitalRune.Physics.ForceEffects.ListAreaOfEffect.RigidBodies" /> is set to this list. 
            The list is not copied.
            </param>
    </member>
    <member name="M:DigitalRune.Physics.ForceEffects.ListAreaOfEffect.Apply(DigitalRune.Physics.ForceEffects.ForceField)">
      <summary>
            Calls <see cref="M:DigitalRune.Physics.ForceEffects.ForceField.Apply(DigitalRune.Physics.RigidBody)" /> of the given force field for all objects
            in the area of effect.
            </summary>
      <param name="forceField">The force field.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="forceField" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.ForceEffects.ListAreaOfEffect.RigidBodies">
      <summary>
            Gets or sets the list of rigid bodies that are affected by the force effect.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Materials.CompositeMaterial">
      <summary>
            Defines a material with different materials for each shape feature of a rigid body.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Materials.CompositeMaterial.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Materials.CompositeMaterial" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Materials.CompositeMaterial.#ctor(DigitalRune.Physics.Materials.UniformMaterial)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Materials.CompositeMaterial" /> class.
            </summary>
      <param name="defaultMaterial">The default material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="defaultMaterial" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Materials.CompositeMaterial.DefaultMaterial">
      <summary>
            Gets the default material that is used for shape features that have no entry
            in <see cref="P:DigitalRune.Physics.Materials.CompositeMaterial.Materials" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Materials.CompositeMaterial.GetProperties(DigitalRune.Physics.RigidBody,DigitalRune.Mathematics.Algebra.Vector3F,System.Int32)">
      <summary>
            Gets the <see cref="T:DigitalRune.Physics.Materials.MaterialProperties" /> for the given rigid body, position and shape
            feature.
            </summary>
      <param name="body">The rigid body.</param>
      <param name="positionLocal">
            The local position on the rigid body for which the material properties should be returned.
            </param>
      <param name="featureIndex">
            The index of the shape feature from which the material properties are needed. For a
            <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape" /> the feature index is the index of the child of the composite
            shape. For a <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape" /> the feature index is the index of a triangle.
            </param>
      <returns>
            The <see cref="T:DigitalRune.Physics.Materials.MaterialProperties" /> of the given rigid body at the given position and 
            child feature.
            </returns>
    </member>
    <member name="P:DigitalRune.Physics.Materials.CompositeMaterial.Materials">
      <summary>
            Gets the list of materials for the shape features.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Materials.IMaterial">
      <summary>
            Defines the material (friction, bounciness, etc.) of a rigid body.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Materials.IMaterial.GetProperties(DigitalRune.Physics.RigidBody,DigitalRune.Mathematics.Algebra.Vector3F,System.Int32)">
      <summary>
            Gets the <see cref="T:DigitalRune.Physics.Materials.MaterialProperties" /> for the given rigid body, position and shape
            feature.
            </summary>
      <param name="body">The rigid body.</param>
      <param name="positionLocal">
            The local position on the rigid body for which the material properties should be returned.
            </param>
      <param name="featureIndex">
            The index of the shape feature from which the material properties are needed. For a
            <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape" /> the feature index is the index of the child of the composite
            shape. For a <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape" /> the feature index is the index of a triangle.
            </param>
      <returns>
            The <see cref="T:DigitalRune.Physics.Materials.MaterialProperties" /> of the given rigid body at the given position and 
            child feature.
            </returns>
    </member>
    <member name="T:DigitalRune.Physics.Materials.IMaterialPropertyCombiner">
      <summary>
            Computes the material properties for two materials in contact.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Materials.IMaterialPropertyCombiner.CombineFriction(System.Single,System.Single)">
      <summary>
            Computes the combined friction coefficient.
            </summary>
      <param name="frictionA">The first friction coefficient.</param>
      <param name="frictionB">The second friction coefficient.</param>
      <returns>
            The combined friction coefficient.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Materials.IMaterialPropertyCombiner.CombineRestitution(System.Single,System.Single)">
      <summary>
            Computes the combined coefficient of restitution.
            </summary>
      <param name="restitutionA">The first coefficient of restitution.</param>
      <param name="restitutionB">The second coefficient of restitution.</param>
      <returns>
            The combined coefficient of restitution.
            </returns>
    </member>
    <member name="T:DigitalRune.Physics.Materials.MaterialProperties">
      <summary>
            Defines material properties of a rigid body.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Materials.MaterialProperties.#ctor(System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Materials.MaterialProperties" /> structure.
            </summary>
      <param name="staticFriction">The static friction.</param>
      <param name="dynamicFriction">The dynamic friction.</param>
      <param name="restitution">The coefficient of restitution.</param>
    </member>
    <member name="M:DigitalRune.Physics.Materials.MaterialProperties.#ctor(System.Single,System.Single,System.Single,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Materials.MaterialProperties" /> structure.
            </summary>
      <param name="staticFriction">The static friction.</param>
      <param name="dynamicFriction">The dynamic friction.</param>
      <param name="restitution">The coefficient of restitution.</param>
      <param name="surfaceMotion">The surface motion velocity.</param>
    </member>
    <member name="M:DigitalRune.Physics.Materials.MaterialProperties.#ctor(System.Single,System.Single,System.Single,System.Boolean,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Materials.MaterialProperties" /> structure.
            </summary>
      <param name="staticFriction">The static friction.</param>
      <param name="dynamicFriction">The dynamic friction.</param>
      <param name="restitution">The coefficient of restitution.</param>
      <param name="supportsSurfaceMotion">
            If set to <see langword="true" /> the material supports surface motion.
            </param>
      <param name="surfaceMotion">The surface motion velocity.</param>
    </member>
    <member name="P:DigitalRune.Physics.Materials.MaterialProperties.DynamicFriction">
      <summary>
            Gets or sets the dynamic friction (kinetic friction) coefficient.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Materials.MaterialProperties.Restitution">
      <summary>
            Gets or sets the coefficient of restitution (bounciness).
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Materials.MaterialProperties.StaticFriction">
      <summary>
            Gets or sets the static friction coefficient.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Materials.MaterialProperties.SupportsSurfaceMotion">
      <summary>
            Gets or sets a value indicating whether this material supports surface motion.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Materials.MaterialProperties.SurfaceMotion">
      <summary>
            Gets or sets the velocity of the rigid body surface (in local space of the body).
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Materials.MaterialPropertyCombiner">
      <summary>
            Computes the material properties for two materials in contact using simple mathematical
            operations.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Materials.MaterialPropertyCombiner.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Materials.MaterialPropertyCombiner" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Materials.MaterialPropertyCombiner.CombineFriction(System.Single,System.Single)">
      <summary>
            Computes the combined friction coefficient.
            </summary>
      <param name="frictionA">The first friction coefficient.</param>
      <param name="frictionB">The second friction coefficient.</param>
      <returns>
            The combined friction coefficient.
            </returns>
    </member>
    <member name="M:DigitalRune.Physics.Materials.MaterialPropertyCombiner.CombineRestitution(System.Single,System.Single)">
      <summary>
            Computes the combined coefficient of restitution.
            </summary>
      <param name="restitutionA">The first coefficient of restitution.</param>
      <param name="restitutionB">The second coefficient of restitution.</param>
      <returns>
            The combined coefficient of restitution.
            </returns>
    </member>
    <member name="P:DigitalRune.Physics.Materials.MaterialPropertyCombiner.FrictionMode">
      <summary>
            Gets or sets the mode that is used to combine friction coefficients.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Materials.MaterialPropertyCombiner.MaxFriction">
      <summary>
            Gets or sets the maximal friction value.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Materials.MaterialPropertyCombiner.MaxRestitution">
      <summary>
            Gets or sets the maximal restitution value.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Materials.MaterialPropertyCombiner.MinFriction">
      <summary>
            Gets or sets the minimal friction value.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Materials.MaterialPropertyCombiner.RestitutionMode">
      <summary>
            Gets or sets the mode that is used to combine coefficients of restitution.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Materials.MaterialPropertyCombiner.Mode">
      <summary>
            Defines how two coefficients are combined.
            </summary>
    </member>
    <member name="F:DigitalRune.Physics.Materials.MaterialPropertyCombiner.Mode.Add">
      <summary>Use the sum of the two coefficients.</summary>
    </member>
    <member name="F:DigitalRune.Physics.Materials.MaterialPropertyCombiner.Mode.Min">
      <summary>Use the minimum of the two coefficients.</summary>
    </member>
    <member name="F:DigitalRune.Physics.Materials.MaterialPropertyCombiner.Mode.Max">
      <summary>Use the maximum of the two coefficients.</summary>
    </member>
    <member name="F:DigitalRune.Physics.Materials.MaterialPropertyCombiner.Mode.ArithmeticMean">
      <summary>Use the arithmetic mean (average) of the two coefficients.</summary>
    </member>
    <member name="F:DigitalRune.Physics.Materials.MaterialPropertyCombiner.Mode.GeometricMean">
      <summary>Use the geometric mean of the two coefficients.</summary>
    </member>
    <member name="F:DigitalRune.Physics.Materials.MaterialPropertyCombiner.Mode.Multiply">
      <summary>Use the product of the two coefficients.</summary>
    </member>
    <member name="T:DigitalRune.Physics.Materials.UniformMaterial">
      <summary>
            Defines a <see cref="T:DigitalRune.Physics.Materials.IMaterial" /> with constant material properties for the whole rigid body.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Materials.UniformMaterial.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Materials.UniformMaterial" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Materials.UniformMaterial.#ctor(DigitalRune.Physics.Materials.UniformMaterial)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Materials.UniformMaterial" /> class from a given material.
            </summary>
      <param name="material">The material from which the properties are copied.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="material" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Physics.Materials.UniformMaterial.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Materials.UniformMaterial" /> class.
            </summary>
      <param name="name">The name of the material. Can be <see langword="null" />.</param>
    </member>
    <member name="M:DigitalRune.Physics.Materials.UniformMaterial.#ctor(System.String,DigitalRune.Physics.Materials.MaterialProperties)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Materials.UniformMaterial" /> class from a given material.
            </summary>
      <param name="name">The name of the material. Can be <see langword="null" />.</param>
      <param name="material">The material from which the properties are copied.</param>
    </member>
    <member name="M:DigitalRune.Physics.Materials.UniformMaterial.#ctor(System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Materials.UniformMaterial" /> class.
            </summary>
      <param name="name">The name of the material. Can be <see langword="null" />.</param>
      <param name="supportsSurfaceMotion">
            If set to <see langword="true" /> the material supports surface motion. See also
            <see cref="P:DigitalRune.Physics.Materials.UniformMaterial.SupportsSurfaceMotion" /> and <see cref="P:DigitalRune.Physics.Materials.UniformMaterial.SurfaceMotion" />.
            </param>
    </member>
    <member name="P:DigitalRune.Physics.Materials.UniformMaterial.DynamicFriction">
      <summary>
            Gets or sets the dynamic friction (kinetic friction) coefficient.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Materials.UniformMaterial.GetProperties(DigitalRune.Physics.RigidBody,DigitalRune.Mathematics.Algebra.Vector3F,System.Int32)">
      <summary>
            Gets the <see cref="T:DigitalRune.Physics.Materials.MaterialProperties" /> for the given rigid body, position and shape
            feature.
            </summary>
      <param name="body">The rigid body.</param>
      <param name="positionLocal">
            The local position on the rigid body for which the material properties should be returned.
            </param>
      <param name="featureIndex">
            The index of the shape feature from which the material properties are needed. For a
            <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape" /> the feature index is the index of the child of the composite
            shape. For a <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape" /> the feature index is the index of a triangle.
            </param>
      <returns>
            The <see cref="T:DigitalRune.Physics.Materials.MaterialProperties" /> of the given rigid body at the given position and
            child feature.
            </returns>
    </member>
    <member name="P:DigitalRune.Physics.Materials.UniformMaterial.Name">
      <summary>
            Gets or sets the name of the material.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Materials.UniformMaterial.Restitution">
      <summary>
            Gets or sets the coefficient of restitution (bounciness).
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Materials.UniformMaterial.StaticFriction">
      <summary>
            Gets or sets the static friction coefficient.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Materials.UniformMaterial.SupportsSurfaceMotion">
      <summary>
            Gets a value indicating whether this material supports surface motion.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Materials.UniformMaterial.SurfaceMotion">
      <summary>
            Gets or sets the velocity of the rigid body surface (in local space of the body).
            </summary>
      <exception cref="T:DigitalRune.Physics.PhysicsException">
            This material does not support surface motion. (<see cref="P:DigitalRune.Physics.Materials.UniformMaterial.SupportsSurfaceMotion" /> is 
            <see langword="false" />.)
            </exception>
    </member>
    <member name="T:DigitalRune.Physics.Settings.ConstraintSettings">
      <summary>
            Defines constraint-related simulation settings.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Settings.ConstraintSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Settings.ConstraintSettings" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Settings.ConstraintSettings.AllowedAngularDeviation">
      <summary>
            Gets or sets the allowed angular error of constraints.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Settings.ConstraintSettings.AllowedLinearDeviation">
      <summary>
            Gets or sets the allowed linear error of constraints.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Settings.ConstraintSettings.AllowedPenetration">
      <summary>
            Gets or sets the allowed penetration of <see cref="T:DigitalRune.Physics.Constraints.ContactConstraint" />s.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Settings.ConstraintSettings.BaumgarteRatio">
      <summary>
            Gets or sets the Baumgarte error correction ratio. (Experimental)
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or greater than 1.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Settings.ConstraintSettings.ContactErrorReduction">
      <summary>
            Gets or sets the contact error reduction parameter.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Settings.ConstraintSettings.MaxErrorCorrectionVelocity">
      <summary>
            Gets or sets the maximal error correction velocity for general constraint errors.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Settings.ConstraintSettings.MaxPenetrationCorrectionVelocity">
      <summary>
            Gets or sets the maximal error correction velocity for correcting rigid body 
            interpenetrations.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Settings.ConstraintSettings.MinConstraintImpulse">
      <summary>
            Gets or sets the minimal constraint impulse.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Settings.ConstraintSettings.NumberOfConstraintIterations">
      <summary>
            Gets or sets the number of constraint iterations per time step.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Settings.ConstraintSettings.RandomizeConstraints">
      <summary>
            Gets or sets a value indicating whether constraints are randomly reordered during
            constraint solving.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Settings.ConstraintSettings.RestingVelocityLimit">
      <summary>
            Gets or sets the resting velocity limit.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Settings.ConstraintSettings.RestitutionThreshold">
      <summary>
            Gets or sets the restitution threshold.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Settings.ConstraintSettings.StackingFactor">
      <summary>
            Gets or sets the stacking optimization factor. (Experimental)
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Settings.ConstraintSettings.StackingTolerance">
      <summary>
            Gets or sets the stacking optimization tolerance. (Experimental)
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than 0 or greater than 1.
            </exception>
    </member>
    <member name="T:DigitalRune.Physics.Settings.MotionSettings">
      <summary>
            Defines motion-related simulation settings.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Settings.MotionSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Settings.MotionSettings" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Settings.MotionSettings.CcdEnabled">
      <summary>
            Gets or sets a value indicating whether Continuous Collision Detection (CCD) is enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Settings.MotionSettings.CcdFilter">
      <summary>
            Gets or sets a predicate method that defines whether CCD is enabled between a pair of rigid 
            bodies.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Settings.MotionSettings.CcdVelocityThreshold">
      <summary>
            Gets or sets the velocity threshold for Continuous Collision Detection (CCD).
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Settings.MotionSettings.MaxAngularVelocity">
      <summary>
            Gets or sets the maximal angular velocity.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Settings.MotionSettings.MaxLinearVelocity">
      <summary>
            Gets or sets the maximal linear velocity.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Settings.MotionSettings.RemoveBodiesOutsideWorld">
      <summary>
            Gets or sets a value indicating whether bodies that leave the simulation are automatically
            removed.
            </summary>
    </member>
    <member name="T:DigitalRune.Physics.Settings.SimulationSettings">
      <summary>
            Defines simulation settings that control the physics simulation.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Settings.SimulationSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Settings.SimulationSettings" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Settings.SimulationSettings.Constraints">
      <summary>
            Gets or sets the constraint-related simulation settings.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Settings.SimulationSettings.EnableMultithreading">
      <summary>
            Gets or sets a value indicating whether multithreading is enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Settings.SimulationSettings.MaterialPropertyCombiner">
      <summary>
            Gets or sets the material property combiner.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Settings.SimulationSettings.Motion">
      <summary>
            Gets or sets the motion-related simulation settings.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Settings.SimulationSettings.Sleeping">
      <summary>
            Gets or sets the sleeping-related simulation settings.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Settings.SimulationSettings.SynchronizeCollisionDomain">
      <summary>
            Gets or sets a value indicating whether the collision domain is kept up-to-date.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Settings.SimulationSettings.Timing">
      <summary>
            Gets or sets the timing-related simulation settings.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Physics.Settings.SleepingSettings">
      <summary>
            Defines sleeping-related simulation settings.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Settings.SleepingSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Settings.SleepingSettings" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Settings.SleepingSettings.AngularVelocityThreshold">
      <summary>
            Gets or sets the angular sleeping velocity threshold.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Settings.SleepingSettings.LinearVelocityThreshold">
      <summary>
            Gets or sets the linear sleeping velocity threshold.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Settings.SleepingSettings.TimeThreshold">
      <summary>
            Gets or sets the sleeping time threshold in seconds.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="T:DigitalRune.Physics.Settings.TimingSettings">
      <summary>
            Defines timing-related simulation settings.
            </summary>
    </member>
    <member name="M:DigitalRune.Physics.Settings.TimingSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Physics.Settings.TimingSettings" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Physics.Settings.TimingSettings.FixedTimeStep">
      <summary>
            Gets or sets the time step size for fixed time steps in seconds.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
    <member name="P:DigitalRune.Physics.Settings.TimingSettings.MaxNumberOfSteps">
      <summary>
            Gets or sets the maximal number of sub-steps performed during one time step.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
  </members>
</doc>